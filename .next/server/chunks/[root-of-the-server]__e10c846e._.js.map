{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/db/index.ts"],"sourcesContent":["import { createClient, SupabaseClient } from '@supabase/supabase-js';\nimport { config as loadEnv } from 'dotenv';\n\n// Load from env/env.example if not provided via .env/.env.local\nif (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\n  loadEnv({ path: 'env' });\n}\nif (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\n  loadEnv({ path: 'env.example' });\n}\n\nconst PUBLIC_URL = process.env.NEXT_PUBLIC_SUPABASE_URL as string | undefined;\nconst PUBLIC_ANON_KEY = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY as string | undefined;\nconst SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY as string | undefined;\n\nif (!PUBLIC_URL || (!PUBLIC_ANON_KEY && !SERVICE_ROLE_KEY)) {\n  throw new Error(\n    'Supabase env vars missing. Provide NEXT_PUBLIC_SUPABASE_URL and either NEXT_PUBLIC_SUPABASE_ANON_KEY or SUPABASE_SERVICE_ROLE_KEY.'\n  );\n}\n\n// Server actions and API routes should use the service role key if available to bypass RLS.\n// We export a single client named `db` for server usage.\nexport const db: SupabaseClient = createClient(\n  PUBLIC_URL,\n  (SERVICE_ROLE_KEY || PUBLIC_ANON_KEY)!,\n  {\n    auth: {\n      persistSession: false,\n      autoRefreshToken: false,\n    },\n  }\n);\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,gEAAgE;AAChE,IAAI,CAAC,QAAQ,GAAG,CAAC,wBAAwB,IAAI,CAAC,QAAQ,GAAG,CAAC,6BAA6B,EAAE;IACvF,CAAA,GAAA,uIAAA,CAAA,SAAO,AAAD,EAAE;QAAE,MAAM;IAAM;AACxB;AACA,IAAI,CAAC,QAAQ,GAAG,CAAC,wBAAwB,IAAI,CAAC,QAAQ,GAAG,CAAC,6BAA6B,EAAE;IACvF,CAAA,GAAA,uIAAA,CAAA,SAAO,AAAD,EAAE;QAAE,MAAM;IAAc;AAChC;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,wBAAwB;AACvD,MAAM,kBAAkB,QAAQ,GAAG,CAAC,6BAA6B;AACjE,MAAM,mBAAmB,QAAQ,GAAG,CAAC,yBAAyB;AAE9D,IAAI,CAAC,cAAe,CAAC,mBAAmB,CAAC,kBAAmB;IAC1D,MAAM,IAAI,MACR;AAEJ;AAIO,MAAM,KAAqB,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAC3C,YACC,oBAAoB,iBACrB;IACE,MAAM;QACJ,gBAAgB;QAChB,kBAAkB;IACpB;AACF","debugId":null}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/app/api/auth/forgot-password/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { db } from '@/db';\nimport crypto from 'crypto';\n\nfunction epochSecs(date: Date = new Date()) { return Math.floor(date.getTime() / 1000); }\n\nexport async function POST(req: NextRequest) {\n  try {\n    const { email } = await req.json();\n    if (!email || typeof email !== 'string') {\n      return NextResponse.json({ error: 'Email is required' }, { status: 400 });\n    }\n    const normalized = email.toLowerCase().trim();\n\n    // Find user by email\n    const { data: user, error: userErr } = await db\n      .from('users')\n      .select('id,email')\n      .eq('email', normalized)\n      .maybeSingle();\n\n    // Always return success to avoid email enumeration\n    if (userErr) {\n      return NextResponse.json({ success: true });\n    }\n\n    if (!user) {\n      return NextResponse.json({ success: true });\n    }\n\n    // Create password reset token valid for 30 minutes\n    const token = crypto.randomBytes(32).toString('hex');\n    const expiresAt = epochSecs(new Date(Date.now() + 30 * 60 * 1000));\n\n    const { error: insertErr } = await db\n      .from('password_resets')\n      .insert({ token, user_id: user.id, expires_at: expiresAt })\n      .select()\n      .single();\n\n    if (insertErr) {\n      // Still do not reveal\n      return NextResponse.json({ success: true });\n    }\n\n    const resetUrl = `${process.env.NEXT_PUBLIC_BASE_URL || ''}/reset-password?token=${token}`;\n\n    // TODO: Integrate real email provider. For now, log to server console.\n    console.log(`[Password Reset] Send to ${user.email}: ${resetUrl}`);\n\n    return NextResponse.json({ success: true });\n  } catch (e) {\n    return NextResponse.json({ success: true });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,SAAS,UAAU,OAAa,IAAI,MAAM;IAAI,OAAO,KAAK,KAAK,CAAC,KAAK,OAAO,KAAK;AAAO;AAEjF,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,IAAI;QAChC,IAAI,CAAC,SAAS,OAAO,UAAU,UAAU;YACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAoB,GAAG;gBAAE,QAAQ;YAAI;QACzE;QACA,MAAM,aAAa,MAAM,WAAW,GAAG,IAAI;QAE3C,qBAAqB;QACrB,MAAM,EAAE,MAAM,IAAI,EAAE,OAAO,OAAO,EAAE,GAAG,MAAM,oHAAA,CAAA,KAAE,CAC5C,IAAI,CAAC,SACL,MAAM,CAAC,YACP,EAAE,CAAC,SAAS,YACZ,WAAW;QAEd,mDAAmD;QACnD,IAAI,SAAS;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAK;QAC3C;QAEA,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAK;QAC3C;QAEA,mDAAmD;QACnD,MAAM,QAAQ,qGAAA,CAAA,UAAM,CAAC,WAAW,CAAC,IAAI,QAAQ,CAAC;QAC9C,MAAM,YAAY,UAAU,IAAI,KAAK,KAAK,GAAG,KAAK,KAAK,KAAK;QAE5D,MAAM,EAAE,OAAO,SAAS,EAAE,GAAG,MAAM,oHAAA,CAAA,KAAE,CAClC,IAAI,CAAC,mBACL,MAAM,CAAC;YAAE;YAAO,SAAS,KAAK,EAAE;YAAE,YAAY;QAAU,GACxD,MAAM,GACN,MAAM;QAET,IAAI,WAAW;YACb,sBAAsB;YACtB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAK;QAC3C;QAEA,MAAM,WAAW,GAAG,QAAQ,GAAG,CAAC,oBAAoB,IAAI,GAAG,sBAAsB,EAAE,OAAO;QAE1F,uEAAuE;QACvE,QAAQ,GAAG,CAAC,CAAC,yBAAyB,EAAE,KAAK,KAAK,CAAC,EAAE,EAAE,UAAU;QAEjE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAK;IAC3C,EAAE,OAAO,GAAG;QACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAK;IAC3C;AACF","debugId":null}}]
}