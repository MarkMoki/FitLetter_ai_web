{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/db/index.ts"],"sourcesContent":["import { createClient, SupabaseClient } from '@supabase/supabase-js';\nimport { config as loadEnv } from 'dotenv';\n\n// Load from env/env.example if not provided via .env/.env.local\nif (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\n  loadEnv({ path: 'env' });\n}\nif (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\n  loadEnv({ path: 'env.example' });\n}\n\nconst PUBLIC_URL = process.env.NEXT_PUBLIC_SUPABASE_URL as string | undefined;\nconst PUBLIC_ANON_KEY = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY as string | undefined;\nconst SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY as string | undefined;\n\nif (!PUBLIC_URL || (!PUBLIC_ANON_KEY && !SERVICE_ROLE_KEY)) {\n  throw new Error(\n    'Supabase env vars missing. Provide NEXT_PUBLIC_SUPABASE_URL and either NEXT_PUBLIC_SUPABASE_ANON_KEY or SUPABASE_SERVICE_ROLE_KEY.'\n  );\n}\n\n// Server actions and API routes should use the service role key if available to bypass RLS.\n// We export a single client named `db` for server usage.\nexport const db: SupabaseClient = createClient(\n  PUBLIC_URL,\n  (SERVICE_ROLE_KEY || PUBLIC_ANON_KEY)!,\n  {\n    auth: {\n      persistSession: false,\n      autoRefreshToken: false,\n    },\n  }\n);\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,gEAAgE;AAChE,IAAI,CAAC,QAAQ,GAAG,CAAC,wBAAwB,IAAI,CAAC,QAAQ,GAAG,CAAC,6BAA6B,EAAE;IACvF,CAAA,GAAA,uIAAA,CAAA,SAAO,AAAD,EAAE;QAAE,MAAM;IAAM;AACxB;AACA,IAAI,CAAC,QAAQ,GAAG,CAAC,wBAAwB,IAAI,CAAC,QAAQ,GAAG,CAAC,6BAA6B,EAAE;IACvF,CAAA,GAAA,uIAAA,CAAA,SAAO,AAAD,EAAE;QAAE,MAAM;IAAc;AAChC;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,wBAAwB;AACvD,MAAM,kBAAkB,QAAQ,GAAG,CAAC,6BAA6B;AACjE,MAAM,mBAAmB,QAAQ,GAAG,CAAC,yBAAyB;AAE9D,IAAI,CAAC,cAAe,CAAC,mBAAmB,CAAC,kBAAmB;IAC1D,MAAM,IAAI,MACR;AAEJ;AAIO,MAAM,KAAqB,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAC3C,YACC,oBAAoB,iBACrB;IACE,MAAM;QACJ,gBAAgB;QAChB,kBAAkB;IACpB;AACF","debugId":null}},
    {"offset": {"line": 184, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/lib/auth.ts"],"sourcesContent":["import { cookies } from 'next/headers';\nimport { redirect } from 'next/navigation';\nimport { db } from '@/db';\nimport { randomBytes } from 'crypto';\nimport bcrypt from 'bcryptjs';\n\nexport interface User {\n  id: number;\n  email: string;\n  name: string | null;\n  createdAt: Date;\n}\n\nexport interface Session {\n  id: string;\n  userId: number;\n  expiresAt: Date;\n}\n\n// Session configuration\nconst SESSION_DURATION = 7 * 24 * 60 * 60 * 1000; // 7 days in milliseconds\nconst SESSION_COOKIE_NAME = 'fitletter_session';\n\nexport class AuthError extends Error {\n  constructor(message: string, public code: string) {\n    super(message);\n    this.name = 'AuthError';\n  }\n}\n\n// Generate secure session token\nfunction generateSessionToken(): string {\n  return randomBytes(32).toString('hex');\n}\n\n// Hash password\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, 12);\n}\n\n// Verify password\nexport async function verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n  return bcrypt.compare(password, hashedPassword);\n}\n\n// Create session (stored in Supabase sessions table)\nexport async function createSession(userId: number): Promise<string> {\n  const token = generateSessionToken();\n  const expiresAtMs = Date.now() + SESSION_DURATION;\n  const expiresAtSec = Math.floor(expiresAtMs / 1000);\n\n  const { error } = await db\n    .from('sessions')\n    .insert({ id: token, user_id: userId, expires_at: expiresAtSec })\n    .select()\n    .single();\n\n  if (error) {\n    throw new AuthError(`Failed to create session: ${error.message}`, 'SESSION_CREATE_FAILED');\n  }\n\n  // Set secure HTTP-only cookie\n  const cookieStore = await cookies();\n  cookieStore.set(SESSION_COOKIE_NAME, token, {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    sameSite: 'lax',\n    expires: new Date(expiresAtMs),\n    path: '/',\n  });\n\n  return token;\n}\n\n// Get current session\nexport async function getCurrentSession(): Promise<{ user: User; session: Session } | null> {\n  const cookieStore = await cookies();\n  const token = cookieStore.get(SESSION_COOKIE_NAME)?.value;\n\n  if (!token) {\n    return null;\n  }\n\n  const nowSec = Math.floor(Date.now() / 1000);\n\n  // Get session\n  const { data: sessionRow, error: sessionError } = await db\n    .from('sessions')\n    .select('*')\n    .eq('id', token)\n    .gt('expires_at', nowSec)\n    .maybeSingle();\n\n  if (sessionError) {\n    // On query errors, invalidate cookie silently\n    await invalidateSession();\n    return null;\n  }\n\n  if (!sessionRow) {\n    await invalidateSession();\n    return null;\n  }\n\n  // Get user data\n  const { data: userRow, error: userError } = await db\n    .from('users')\n    .select('*')\n    .eq('id', sessionRow.user_id)\n    .maybeSingle();\n\n  if (userError || !userRow) {\n    await invalidateSession();\n    return null;\n  }\n\n  return {\n    user: {\n      id: userRow.id,\n      email: userRow.email,\n      name: userRow.name ?? null,\n      createdAt: userRow.created_at ? new Date((userRow.created_at as number) * 1000) : new Date(),\n    },\n    session: {\n      id: sessionRow.id,\n      userId: sessionRow.user_id,\n      expiresAt: new Date((sessionRow.expires_at as number) * 1000),\n    },\n  };\n}\n\n// Require authentication (for server components)\nexport async function requireAuth(): Promise<{ user: User; session: Session }> {\n  const auth = await getCurrentSession();\n  \n  if (!auth) {\n    redirect('/login');\n  }\n\n  return auth;\n}\n\n// Invalidate session\nexport async function invalidateSession(): Promise<void> {\n  const cookieStore = await cookies();\n  const token = cookieStore.get(SESSION_COOKIE_NAME)?.value;\n\n  if (token) {\n    await db.from('sessions').delete().eq('id', token);\n  }\n\n  cookieStore.delete(SESSION_COOKIE_NAME);\n}\n\n// Clean up expired sessions (should be run periodically)\nexport async function cleanupExpiredSessions(): Promise<void> {\n  const nowSec = Math.floor(Date.now() / 1000);\n  await db.from('sessions').delete().lt('expires_at', nowSec);\n}\n\n// Sign up user\nexport async function signUp(email: string, password: string, name: string): Promise<User> {\n  const normalizedEmail = email.toLowerCase().trim();\n  const trimmedName = name.trim();\n\n  // Check if user already exists\n  const { data: existingUser, error: existingErr } = await db\n    .from('users')\n    .select('id')\n    .eq('email', normalizedEmail)\n    .maybeSingle();\n\n  if (existingErr) {\n    throw new AuthError(`Failed to check existing user: ${existingErr.message}`, 'DB_ERROR');\n  }\n\n  if (existingUser) {\n    throw new AuthError('User already exists with this email', 'USER_EXISTS');\n  }\n\n  // Hash password and create user\n  const passwordHash = await hashPassword(password);\n  const createdAtSec = Math.floor(Date.now() / 1000);\n\n  const { data: insertedUser, error: insertErr } = await db\n    .from('users')\n    .insert({ email: normalizedEmail, name: trimmedName, password_hash: passwordHash, created_at: createdAtSec })\n    .select('*')\n    .single();\n\n  if (insertErr) {\n    throw new AuthError(`Failed to create user: ${insertErr.message}`, 'USER_CREATE_FAILED');\n  }\n\n  return {\n    id: insertedUser.id,\n    email: insertedUser.email,\n    name: insertedUser.name ?? null,\n    createdAt: insertedUser.created_at ? new Date((insertedUser.created_at as number) * 1000) : new Date(),\n  };\n}\n\n// Sign in user\nexport async function signIn(email: string, password: string): Promise<User> {\n  const normalizedEmail = email.toLowerCase().trim();\n\n  const { data: userRow, error } = await db\n    .from('users')\n    .select('*')\n    .eq('email', normalizedEmail)\n    .maybeSingle();\n\n  if (error) {\n    throw new AuthError(`Failed to fetch user: ${error.message}`, 'DB_ERROR');\n  }\n\n  if (!userRow || !userRow.password_hash) {\n    throw new AuthError('Invalid email or password', 'INVALID_CREDENTIALS');\n  }\n\n  const isValidPassword = await verifyPassword(password, userRow.password_hash);\n  \n  if (!isValidPassword) {\n    throw new AuthError('Invalid email or password', 'INVALID_CREDENTIALS');\n  }\n\n  return {\n    id: userRow.id,\n    email: userRow.email,\n    name: userRow.name ?? null,\n    createdAt: userRow.created_at ? new Date((userRow.created_at as number) * 1000) : new Date(),\n  };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 363, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/app/api/auth/signout/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { invalidateSession } from '@/lib/auth';\n\nexport async function POST(request: NextRequest) {\n  try {\n    await invalidateSession();\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('Sign out error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,CAAA,GAAA,oHAAA,CAAA,oBAAiB,AAAD;QAEtB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAK;IAC3C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}