{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/ai/flows/ats-resume-optimization.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview A flow to optimize a resume for Applicant Tracking Systems (ATS).\n *\n * - optimizeResumeForAts - A function that optimizes a resume for ATS.\n * - OptimizeResumeForAtsInput - The input type for the optimizeResumeForAts function.\n * - OptimizeResumeForAtsOutput - The return type for the optimizeResumeForAts function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst OptimizeResumeForAtsInputSchema = z.object({\n  resume: z.string().describe('The resume content to be optimized.'),\n  jobDescription: z.string().describe('The job description to tailor the resume for.'),\n  currentOptimizedResume: z.string().optional().describe('An existing optimized resume to be improved upon.'),\n  missingSkills: z.string().optional().describe('The missing skills that can be used to optimize the resume.'),\n  currentAtsScore: z.number().optional().describe('The current ATS score of the resume to be improved upon.'),\n});\nexport type OptimizeResumeForAtsInput = z.infer<typeof OptimizeResumeForAtsInputSchema>;\n\nconst OptimizeResumeForAtsOutputSchema = z.object({\n  optimizedResume: z.string().describe('The optimized resume content for ATS.'),\n  atsScore: z.number().describe('The estimated ATS score of the optimized resume.'),\n});\nexport type OptimizeResumeForAtsOutput = z.infer<typeof OptimizeResumeForAtsOutputSchema>;\n\nexport async function optimizeResumeForAts(input: OptimizeResumeForAtsInput): Promise<OptimizeResumeForAtsOutput> {\n  return optimizeResumeForAtsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'optimizeResumeForAtsPrompt',\n  input: {schema: OptimizeResumeForAtsInputSchema},\n  output: {schema: OptimizeResumeForAtsOutputSchema},\n  prompt: `You are an expert resume optimizer specializing in Applicant Tracking Systems (ATS).\n\n  {{#if currentOptimizedResume}}\n  Your task is to refine and improve the provided \"Already Optimized Resume\" to achieve an even higher ATS score and better overall quality. Analyze it against the original resume and the job description, and make it even more impactful and keyword-rich.\n  \n  **IMPORTANT RULE**: The new \"atsScore\" you generate MUST be greater than the \"currentAtsScore\". Do not decrease the score.\n\n  Already Optimized Resume:\n  {{{currentOptimizedResume}}}\n\n  Current ATS Score: {{currentAtsScore}}\n  {{else}}\n  You will analyze the resume and job description to tailor the resume for the role, focusing on improving its ATS score.\n  Consider the provided job description and missing skills to identify relevant keywords and phrases to incorporate into the resume.\n  {{/if}}\n\n  Original Resume:\n  {{resume}}\n\n  Job Description:\n  {{jobDescription}}\n\n  Missing Skills (optional):\n  {{#if missingSkills}}\n  {{missingSkills}}\n  {{else}}\n  None provided.\n  {{/if}}\n\n  Based on the information above, provide an optimized resume and an estimated ATS score (out of 100) for the final optimized resume.\n\n  **IMPORTANT FORMATTING RULES**:\n  - The output must be a single block of text.\n  - Use double line breaks (\\n\\n) to separate major sections (e.g., between Summary and Skills).\n  - Use single line breaks (\\n) for lists or bullet points.\n  - Ensure the final output is clean, professional, and easy to read.\n\n  Your output should be in the following format:\n  {\n    \"optimizedResume\": \"[Fully formatted, optimized resume content here]\",\n    \"atsScore\": [Estimated ATS score here]\n  }\n  `,\n});\n\nconst optimizeResumeForAtsFlow = ai.defineFlow(\n  {\n    name: 'optimizeResumeForAtsFlow',\n    inputSchema: OptimizeResumeForAtsInputSchema,\n    outputSchema: OptimizeResumeForAtsOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAGA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACpC,wBAAwB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IACvD,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC9C,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AAClD;AAGA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACrC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGO,eAAe,qBAAqB,KAAgC;IACzE,OAAO,yBAAyB;AAClC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA+B;IAC/C,QAAQ;QAAC,QAAQ;IAAgC;IACjD,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA0CT,CAAC;AACH;AAEA,MAAM,2BAA2B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC5C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA9DoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 348, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/ai/flows/impactful-rewrite.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview Rewrites resume sections to emphasize impact and achievements.\n *\n * - rewriteForImpact - A function that rewrites the resume sections to emphasize impact and achievements.\n * - RewriteForImpactInput - The input type for the rewriteForImpact function.\n * - RewriteForImpactOutput - The return type for the rewriteForImpact function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst RewriteForImpactInputSchema = z.object({\n  resumeSection: z.string().describe('The resume section to rewrite.'),\n  currentText: z.string().describe('The current text of the resume section.'),\n  jobDescription: z.string().optional().describe('The job description to tailor the rewrite for.'),\n});\nexport type RewriteForImpactInput = z.infer<typeof RewriteForImpactInputSchema>;\n\nconst RewriteForImpactOutputSchema = z.object({\n  rewrittenText: z.string().describe('The rewritten text with emphasized impact and achievements.'),\n});\nexport type RewriteForImpactOutput = z.infer<typeof RewriteForImpactOutputSchema>;\n\nexport async function rewriteForImpact(input: RewriteForImpactInput): Promise<RewriteForImpactOutput> {\n  return rewriteForImpactFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'rewriteForImpactPrompt',\n  input: {schema: RewriteForImpactInputSchema},\n  output: {schema: RewriteForImpactOutputSchema},\n  prompt: `You are an expert resume writer specializing in making content more impactful.\n\n  Rewrite the following resume section to highlight the candidate's achievements.\n\n  Your rewriting rules are:\n  1.  Each bullet point must start with a strong action verb (e.g., Engineered, Optimized, Reduced, Automated, Delivered).\n  2.  Focus on quantifiable impact. Add metrics wherever possible (e.g., downloads, %, MAUs, response time improvements).\n  3.  If the original text mentions leadership, reframe it to highlight collaboration and mentorship, especially for non-senior roles. For example, \"led a team\" becomes \"Collaborated with a team\".\n\n  Resume Section: {{{resumeSection}}}\n  Current Text: {{{currentText}}}\n\n  {{#if jobDescription}}\n  Tailor the rewrite for the following job description:\n  {{{jobDescription}}}\n  {{/if}}\n  `,\n});\n\nconst rewriteForImpactFlow = ai.defineFlow(\n  {\n    name: 'rewriteForImpactFlow',\n    inputSchema: RewriteForImpactInputSchema,\n    outputSchema: RewriteForImpactOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAGA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,8BAA8B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3C,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACnC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AACjD;AAGA,MAAM,+BAA+B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5C,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACrC;AAGO,eAAe,iBAAiB,KAA4B;IACjE,OAAO,qBAAqB;AAC9B;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA2B;IAC3C,QAAQ;QAAC,QAAQ;IAA4B;IAC7C,QAAQ,CAAC;;;;;;;;;;;;;;;;EAgBT,CAAC;AACH;AAEA,MAAM,uBAAuB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACxC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IApCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 423, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/ai/flows/resume-flaw-spotter.ts"],"sourcesContent":["// src/ai/flows/resume-flaw-spotter.ts\n'use server';\n/**\n * @fileOverview An AI agent that identifies flaws in a resume and suggests improvements.\n *\n * - resumeFlawSpotter - A function that handles the resume flaw spotting process.\n * - ResumeFlawSpotterInput - The input type for the resumeFlawSpotter function.\n * - ResumeFlawSpotterOutput - The return type for the resumeFlawSpotter function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst ResumeFlawSpotterInputSchema = z.object({\n  resumeText: z.string().describe('The text content of the resume to be reviewed.'),\n});\nexport type ResumeFlawSpotterInput = z.infer<typeof ResumeFlawSpotterInputSchema>;\n\nconst SuggestionSchema = z.object({\n    originalText: z.string().describe(\"The original text from the resume that has a flaw.\"),\n    suggestionText: z.string().describe(\"The suggested replacement text.\"),\n    comment: z.string().describe(\"A brief explanation of why the change is recommended (e.g., 'Adds a quantifiable metric').\")\n})\n\nconst ResumeFlawSpotterOutputSchema = z.object({\n  overallFeedback: z.string().describe(\"A brief, one-sentence summary of the resume's strength.\"),\n  suggestions: z.array(SuggestionSchema).describe(\"A list of specific, actionable suggestions for improvement. Focus on rewriting bullet points for impact, adding metrics, and improving clarity.\")\n});\nexport type ResumeFlawSpotterOutput = z.infer<typeof ResumeFlawSpotterOutputSchema>;\n\nexport async function resumeFlawSpotter(input: ResumeFlawSpotterInput): Promise<ResumeFlawSpotterOutput> {\n  return resumeFlawSpotterFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'resumeFlawSpotterPrompt',\n  input: {schema: ResumeFlawSpotterInputSchema},\n  output: {schema: ResumeFlawSpotterOutputSchema},\n  prompt: `You are an expert resume reviewer for software developers. Your task is to analyze the provided resume text, identify specific areas for improvement, and provide actionable suggestions in a structured format.\n\nRules for providing suggestions:\n1.  **Focus on Impact**: Prioritize suggestions that add quantifiable metrics (e.g., numbers, percentages, user counts) to achievements.\n2.  **Action Verbs**: Suggest rewriting sentences to start with strong action verbs (e.g., Engineered, Optimized, Architected).\n3.  **Clarity and Brevity**: Offer changes that make the text more concise and easier to read.\n4.  **Be Specific**: Each suggestion should target a single, specific line or bullet point. Do not group multiple changes into one suggestion.\n5.  **Provide Feedback**: Give a brief, one-sentence summary of the resume's overall quality.\n\nResume Text to Analyze:\n{{resumeText}}`,\n});\n\nconst resumeFlawSpotterFlow = ai.defineFlow(\n  {\n    name: 'resumeFlawSpotterFlow',\n    inputSchema: ResumeFlawSpotterInputSchema,\n    outputSchema: ResumeFlawSpotterOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,sCAAsC;;;;;;AAEtC;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,+BAA+B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5C,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAClC;AAGA,MAAM,mBAAmB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9B,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACpC,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACjC;AAEA,MAAM,gCAAgC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7C,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACrC,aAAa,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,kBAAkB,QAAQ,CAAC;AAClD;AAGO,eAAe,kBAAkB,KAA6B;IACnE,OAAO,sBAAsB;AAC/B;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA4B;IAC5C,QAAQ;QAAC,QAAQ;IAA6B;IAC9C,QAAQ,CAAC;;;;;;;;;;cAUG,CAAC;AACf;AAEA,MAAM,wBAAwB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACzC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA9BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 497, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/ai/flows/tailored-cover-letter.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview Generates a cover letter tailored to a specific job description.\n *\n * - tailoredCoverLetter - A function that generates a cover letter based on a job description.\n * - TailoredCoverLetterInput - The input type for the tailoredCoverLetter function.\n * - TailoredCoverLetterOutput - The return type for the tailoredCoverLetter function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst TailoredCoverLetterInputSchema = z.object({\n  resume: z.string().describe('The user resume, which includes their skills, experience, and projects.'),\n  jobTitle: z.string().describe('The job title for the cover letter.'),\n  company: z.string().describe('The company name for the cover letter.'),\n  jobDescription: z.string().describe('The job description to tailor the cover letter to.'),\n  tone: z.string().describe('The tone of the cover letter (e.g., Friendly, Formal, Enthusiastic).'),\n  currentCoverLetter: z.string().optional().describe('An existing cover letter to be improved upon.'),\n});\nexport type TailoredCoverLetterInput = z.infer<typeof TailoredCoverLetterInputSchema>;\n\nconst TailoredCoverLetterOutputSchema = z.object({\n  coverLetter: z.string().describe('The generated cover letter.'),\n});\nexport type TailoredCoverLetterOutput = z.infer<typeof TailoredCoverLetterOutputSchema>;\n\nexport async function tailoredCoverLetter(input: TailoredCoverLetterInput): Promise<TailoredCoverLetterOutput> {\n  return tailoredCoverLetterFlow(input);\n}\n\nconst tailoredCoverLetterPrompt = ai.definePrompt({\n  name: 'tailoredCoverLetterPrompt',\n  input: {schema: TailoredCoverLetterInputSchema},\n  output: {schema: TailoredCoverLetterOutputSchema},\n  prompt: `You are an expert cover letter writer for software developers. Your task is to generate a professional, impactful cover letter based on the provided resume and job details.\n\n{{#if currentCoverLetter}}\nYou have been provided with an existing cover letter. Your task is to refine and improve it for better impact and clarity, while adhering to all the rules below.\nExisting Cover Letter:\n{{{currentCoverLetter}}}\n{{/if}}\n\nFollow these MANDATORY rules for the cover letter structure:\n1.  **STRICT 3-PARAGRAPH LIMIT**: The entire cover letter, excluding the opening and closing salutations, MUST consist of exactly three paragraphs.\n2.  **Opening Paragraph:** Start by showing excitement for the company and mention the specific job title. Highlight 1-2 key skills from the resume that directly match the job description.\n3.  **Body Paragraph:** Provide a specific, quantifiable achievement from the resume (a project or experience) that demonstrates impact. Connect this achievement directly to the needs mentioned in the job description.\n4.  **Closing Paragraph:** Reiterate your interest in the role and the company's mission. End with a clear call to action, expressing your eagerness to discuss your qualifications further.\n5.  **Professional Tone**: Maintain the requested tone throughout the letter.\n\n**IMPORTANT FORMATTING RULES**:\n- Use double line breaks to create paragraphs.\n- Ensure the final output is a clean, well-spaced, professional letter.\n\nResume:\n{{{resume}}}\n\nJob Title: {{{jobTitle}}}\nCompany: {{{company}}}\nJob Description: {{{jobDescription}}}\nTone: {{{tone}}}\n`,\n});\n\nconst tailoredCoverLetterFlow = ai.defineFlow(\n  {\n    name: 'tailoredCoverLetterFlow',\n    inputSchema: TailoredCoverLetterInputSchema,\n    outputSchema: TailoredCoverLetterOutputSchema,\n  },\n  async input => {\n    const {output} = await tailoredCoverLetterPrompt(input);\n    return output!;\n  }\n);\n\n"],"names":[],"mappings":";;;;;AAGA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC7B,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACpC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,oBAAoB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AACrD;AAGA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAGO,eAAe,oBAAoB,KAA+B;IACvE,OAAO,wBAAwB;AACjC;AAEA,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAChD,MAAM;IACN,OAAO;QAAC,QAAQ;IAA8B;IAC9C,QAAQ;QAAC,QAAQ;IAA+B;IAChD,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BX,CAAC;AACD;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC3C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,0BAA0B;IACjD,OAAO;AACT;;;IA9CoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 585, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/ai/flows/parse-resume.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview An AI agent that parses resume text into a structured format.\n *\n * - parseResume - A function that handles the resume parsing process.\n * - ParseResumeInput - The input type for the parseResume function.\n * - ParseResumeOutput - The return type for the parseResume function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst ParseResumeInputSchema = z.object({\n  resumeText: z.string().describe('The raw text content of the resume to be parsed.'),\n});\nexport type ParseResumeInput = z.infer<typeof ParseResumeInputSchema>;\n\nconst ExperienceSchema = z.object({\n    role: z.string().describe('The job title or role.'),\n    company: z.string().describe('The name of the company.'),\n    dates: z.string().describe(\"The dates of employment (e.g., 'Jan 2021 - Present').\"),\n    impact: z.array(z.string()).describe('A list of 3-5 bullet points. Each bullet must start with an action verb and describe a key achievement with quantifiable impact (e.g., \"Reduced app crash rate by 20%...\").'),\n});\n\nconst ProjectSchema = z.object({\n    title: z.string().describe(\"The title of the project.\"),\n    techUsed: z.string().describe(\"The technologies used in the project.\"),\n    description: z.string().describe(\"A brief description of what you built for the project.\"),\n    impact: z.string().describe(\"The result or impact of the project. This is a required field. If a project is fictional, create a realistic impact statement.\"),\n});\n\nconst EducationSchema = z.object({\n    degree: z.string().describe('The degree or qualification obtained.'),\n    school: z.string().describe('The name of the educational institution.'),\n    year: z.string().describe('The year of graduation or completion.'),\n});\n\nconst SkillsSchema = z.array(z.string()).describe(\"A flat list of key technical skills. Do not categorize them. Trim any redundancies.\");\n\n\nconst ParseResumeOutputSchema = z.object({\n  name: z.string().describe(\"The candidate's full name.\"),\n  phone: z.string().describe(\"The candidate's phone number.\"),\n  email: z.string().describe(\"The candidate's email address.\"),\n  linkedinUrl: z.string().optional().describe(\"The URL to the candidate's LinkedIn profile.\"),\n  portfolioUrl: z.string().optional().describe(\"The URL to the candidate's GitHub or portfolio.\"),\n  summary: z.string().describe('A 2-3 sentence professional summary. Reframe >3 years of experience to be about adaptability. Add a \"seeking statement\" that mirrors a target role (e.g., \"Eager to apply technical expertise to accelerate AI innovation.\").'),\n  skills: SkillsSchema,\n  experiences: z.array(ExperienceSchema).describe('A list of professional experiences.'),\n  projects: z.array(ProjectSchema).describe(\"A list of key projects. If the candidate has no AI-related projects, add a fictional one about a simple AI experiment using TensorFlow Lite, Hugging Face, or an OpenAI API to demonstrate curiosity in AI. Ensure that every project, including fictional ones, has a defined 'impact' statement.\"),\n  education: z.array(EducationSchema).describe('A list of educational qualifications.'),\n});\nexport type ParseResumeOutput = z.infer<typeof ParseResumeOutputSchema>;\n\nexport async function parseResume(input: ParseResumeInput): Promise<ParseResumeOutput> {\n  return parseResumeFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'parseResumePrompt',\n  input: {schema: ParseResumeInputSchema},\n  output: {schema: ParseResumeOutputSchema},\n  prompt: `You are an expert resume parser for App Developers. Analyze the provided resume text and extract the information into the specified structured JSON format. You must follow all the rules defined in the output schema.\n\n**Skills Formatting Rule**: Provide a flat array of skills. Do not categorize them into buckets like \"programming\", \"backend\", etc.\n\nResume Text:\n{{resumeText}}`,\n});\n\nconst parseResumeFlow = ai.defineFlow(\n  {\n    name: 'parseResumeFlow',\n    inputSchema: ParseResumeInputSchema,\n    outputSchema: ParseResumeOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,yBAAyB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtC,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAClC;AAGA,MAAM,mBAAmB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9B,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC7B,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,QAAQ,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;AACzC;AAEA,MAAM,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3B,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAEA,MAAM,kBAAkB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7B,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC9B;AAEA,MAAM,eAAe,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;AAGlD,MAAM,0BAA0B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC5C,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC7C,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC7B,QAAQ;IACR,aAAa,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,kBAAkB,QAAQ,CAAC;IAChD,UAAU,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,eAAe,QAAQ,CAAC;IAC1C,WAAW,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,iBAAiB,QAAQ,CAAC;AAC/C;AAGO,eAAe,YAAY,KAAuB;IACvD,OAAO,gBAAgB;AACzB;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAsB;IACtC,QAAQ;QAAC,QAAQ;IAAuB;IACxC,QAAQ,CAAC;;;;;cAKG,CAAC;AACf;AAEA,MAAM,kBAAkB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACnC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAzBoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 674, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/ai/flows/autofill-job-details.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview An AI agent that parses job posting text into a structured format.\n *\n * - autofillJobDetails - A function that handles the job detail parsing process.\n * - AutofillJobDetailsInput - The input type for the autofillJobDetails function.\n * - AutofillJobDetailsOutput - The return type for the autofillJobDetails function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst AutofillJobDetailsInputSchema = z.object({\n  jobPostingText: z.string().describe('The raw text content of the job posting to be parsed.'),\n});\nexport type AutofillJobDetailsInput = z.infer<typeof AutofillJobDetailsInputSchema>;\n\nconst AutofillJobDetailsOutputSchema = z.object({\n  jobTitle: z.string().describe('The job title. Leave empty if not found.'),\n  companyName: z.string().describe('The name of the company. Leave empty if not found.'),\n  jobDescription: z.string().describe('The full job description, cleaned up from the raw text. Leave empty if not found.'),\n  requirements: z.string().optional().describe('A concise, bulleted list of the key requirements, skills, or qualifications from the job description. If none are listed, leave this empty.'),\n  url: z.string().optional().describe('The URL to the job posting, if present.')\n});\nexport type AutofillJobDetailsOutput = z.infer<typeof AutofillJobDetailsOutputSchema>;\n\nexport async function autofillJobDetails(input: AutofillJobDetailsInput): Promise<AutofillJobDetailsOutput> {\n  return autofillJobDetailsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'autofillJobDetailsPrompt',\n  input: {schema: AutofillJobDetailsInputSchema},\n  output: {schema: AutofillJobDetailsOutputSchema},\n  prompt: `You are an expert data extractor for job postings. Your task is to analyze the provided text and pull out key details into a structured format.\n\nYour instructions are:\n1.  **Extract Key Information**: From the text below, identify the Job Title, Company Name, and the full Job Description.\n2.  **Summarize Requirements**: From the full job description, create a concise, bulleted list of the most important requirements, skills, or qualifications. Place this in the 'requirements' field.\n3.  **Find URL**: If a URL to the job posting is present in the text, extract it.\n4.  **Clean Description**: Tidy up the job description to be a readable block of text, removing any formatting artifacts.\n5.  **Handle Missing Info**: If you cannot find a specific piece of information (e.g., no requirements listed), leave the corresponding field in the JSON output as an empty string.\n\nJob Posting Text:\n{{{jobPostingText}}}`,\n});\n\nconst autofillJobDetailsFlow = ai.defineFlow(\n  {\n    name: 'autofillJobDetailsFlow',\n    inputSchema: AutofillJobDetailsInputSchema,\n    outputSchema: AutofillJobDetailsOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,gCAAgC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7C,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACtC;AAGA,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACpC,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC7C,KAAK,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AACtC;AAGO,eAAe,mBAAmB,KAA8B;IACrE,OAAO,uBAAuB;AAChC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA6B;IAC7C,QAAQ;QAAC,QAAQ;IAA8B;IAC/C,QAAQ,CAAC;;;;;;;;;;oBAUS,CAAC;AACrB;AAEA,MAAM,yBAAyB,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC1C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA9BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 753, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/db/index.ts"],"sourcesContent":["import { createClient, SupabaseClient } from '@supabase/supabase-js';\nimport { config as loadEnv } from 'dotenv';\n\n// Load from env/env.example if not provided via .env/.env.local\nif (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\n  loadEnv({ path: 'env' });\n}\nif (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\n  loadEnv({ path: 'env.example' });\n}\n\nconst PUBLIC_URL = process.env.NEXT_PUBLIC_SUPABASE_URL as string | undefined;\nconst PUBLIC_ANON_KEY = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY as string | undefined;\nconst SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY as string | undefined;\n\nif (!PUBLIC_URL || (!PUBLIC_ANON_KEY && !SERVICE_ROLE_KEY)) {\n  throw new Error(\n    'Supabase env vars missing. Provide NEXT_PUBLIC_SUPABASE_URL and either NEXT_PUBLIC_SUPABASE_ANON_KEY or SUPABASE_SERVICE_ROLE_KEY.'\n  );\n}\n\n// Server actions and API routes should use the service role key if available to bypass RLS.\n// We export a single client named `db` for server usage.\nexport const db: SupabaseClient = createClient(\n  PUBLIC_URL,\n  (SERVICE_ROLE_KEY || PUBLIC_ANON_KEY)!,\n  {\n    auth: {\n      persistSession: false,\n      autoRefreshToken: false,\n    },\n  }\n);\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,gEAAgE;AAChE,IAAI,CAAC,QAAQ,GAAG,CAAC,wBAAwB,IAAI,CAAC,QAAQ,GAAG,CAAC,6BAA6B,EAAE;IACvF,CAAA,GAAA,qIAAA,CAAA,SAAO,AAAD,EAAE;QAAE,MAAM;IAAM;AACxB;AACA,IAAI,CAAC,QAAQ,GAAG,CAAC,wBAAwB,IAAI,CAAC,QAAQ,GAAG,CAAC,6BAA6B,EAAE;IACvF,CAAA,GAAA,qIAAA,CAAA,SAAO,AAAD,EAAE;QAAE,MAAM;IAAc;AAChC;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,wBAAwB;AACvD,MAAM,kBAAkB,QAAQ,GAAG,CAAC,6BAA6B;AACjE,MAAM,mBAAmB,QAAQ,GAAG,CAAC,yBAAyB;AAE9D,IAAI,CAAC,cAAe,CAAC,mBAAmB,CAAC,kBAAmB;IAC1D,MAAM,IAAI,MACR;AAEJ;AAIO,MAAM,KAAqB,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,EAC3C,YACC,oBAAoB,iBACrB;IACE,MAAM;QACJ,gBAAgB;QAChB,kBAAkB;IACpB;AACF","debugId":null}},
    {"offset": {"line": 789, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/lib/auth.ts"],"sourcesContent":["import { cookies } from 'next/headers';\nimport { redirect } from 'next/navigation';\nimport { db } from '@/db';\nimport { randomBytes } from 'crypto';\nimport bcrypt from 'bcryptjs';\n\nexport interface User {\n  id: number;\n  email: string;\n  name: string | null;\n  createdAt: Date;\n}\n\nexport interface Session {\n  id: string;\n  userId: number;\n  expiresAt: Date;\n}\n\n// Session configuration\nconst SESSION_DURATION = 7 * 24 * 60 * 60 * 1000; // 7 days in milliseconds\nconst SESSION_COOKIE_NAME = 'fitletter_session';\n\nexport class AuthError extends Error {\n  constructor(message: string, public code: string) {\n    super(message);\n    this.name = 'AuthError';\n  }\n}\n\n// Generate secure session token\nfunction generateSessionToken(): string {\n  return randomBytes(32).toString('hex');\n}\n\n// Hash password\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, 12);\n}\n\n// Verify password\nexport async function verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n  return bcrypt.compare(password, hashedPassword);\n}\n\n// Create session (stored in Supabase sessions table)\nexport async function createSession(userId: number): Promise<string> {\n  const token = generateSessionToken();\n  const expiresAtMs = Date.now() + SESSION_DURATION;\n  const expiresAtSec = Math.floor(expiresAtMs / 1000);\n\n  const { error } = await db\n    .from('sessions')\n    .insert({ id: token, user_id: userId, expires_at: expiresAtSec })\n    .select()\n    .single();\n\n  if (error) {\n    throw new AuthError(`Failed to create session: ${error.message}`, 'SESSION_CREATE_FAILED');\n  }\n\n  // Set secure HTTP-only cookie\n  const cookieStore = await cookies();\n  cookieStore.set(SESSION_COOKIE_NAME, token, {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    sameSite: 'lax',\n    expires: new Date(expiresAtMs),\n    path: '/',\n  });\n\n  return token;\n}\n\n// Get current session\nexport async function getCurrentSession(): Promise<{ user: User; session: Session } | null> {\n  const cookieStore = await cookies();\n  const token = cookieStore.get(SESSION_COOKIE_NAME)?.value;\n\n  if (!token) {\n    return null;\n  }\n\n  const nowSec = Math.floor(Date.now() / 1000);\n\n  // Get session\n  const { data: sessionRow, error: sessionError } = await db\n    .from('sessions')\n    .select('*')\n    .eq('id', token)\n    .gt('expires_at', nowSec)\n    .maybeSingle();\n\n  if (sessionError) {\n    // On query errors, invalidate cookie silently\n    await invalidateSession();\n    return null;\n  }\n\n  if (!sessionRow) {\n    await invalidateSession();\n    return null;\n  }\n\n  // Get user data\n  const { data: userRow, error: userError } = await db\n    .from('users')\n    .select('*')\n    .eq('id', sessionRow.user_id)\n    .maybeSingle();\n\n  if (userError || !userRow) {\n    await invalidateSession();\n    return null;\n  }\n\n  return {\n    user: {\n      id: userRow.id,\n      email: userRow.email,\n      name: userRow.name ?? null,\n      createdAt: userRow.created_at ? new Date((userRow.created_at as number) * 1000) : new Date(),\n    },\n    session: {\n      id: sessionRow.id,\n      userId: sessionRow.user_id,\n      expiresAt: new Date((sessionRow.expires_at as number) * 1000),\n    },\n  };\n}\n\n// Require authentication (for server components)\nexport async function requireAuth(): Promise<{ user: User; session: Session }> {\n  const auth = await getCurrentSession();\n  \n  if (!auth) {\n    redirect('/login');\n  }\n\n  return auth;\n}\n\n// Invalidate session\nexport async function invalidateSession(): Promise<void> {\n  const cookieStore = await cookies();\n  const token = cookieStore.get(SESSION_COOKIE_NAME)?.value;\n\n  if (token) {\n    await db.from('sessions').delete().eq('id', token);\n  }\n\n  cookieStore.delete(SESSION_COOKIE_NAME);\n}\n\n// Clean up expired sessions (should be run periodically)\nexport async function cleanupExpiredSessions(): Promise<void> {\n  const nowSec = Math.floor(Date.now() / 1000);\n  await db.from('sessions').delete().lt('expires_at', nowSec);\n}\n\n// Sign up user\nexport async function signUp(email: string, password: string, name: string): Promise<User> {\n  const normalizedEmail = email.toLowerCase().trim();\n  const trimmedName = name.trim();\n\n  // Check if user already exists\n  const { data: existingUser, error: existingErr } = await db\n    .from('users')\n    .select('id')\n    .eq('email', normalizedEmail)\n    .maybeSingle();\n\n  if (existingErr) {\n    throw new AuthError(`Failed to check existing user: ${existingErr.message}`, 'DB_ERROR');\n  }\n\n  if (existingUser) {\n    throw new AuthError('User already exists with this email', 'USER_EXISTS');\n  }\n\n  // Hash password and create user\n  const passwordHash = await hashPassword(password);\n  const createdAtSec = Math.floor(Date.now() / 1000);\n\n  const { data: insertedUser, error: insertErr } = await db\n    .from('users')\n    .insert({ email: normalizedEmail, name: trimmedName, password_hash: passwordHash, created_at: createdAtSec })\n    .select('*')\n    .single();\n\n  if (insertErr) {\n    throw new AuthError(`Failed to create user: ${insertErr.message}`, 'USER_CREATE_FAILED');\n  }\n\n  return {\n    id: insertedUser.id,\n    email: insertedUser.email,\n    name: insertedUser.name ?? null,\n    createdAt: insertedUser.created_at ? new Date((insertedUser.created_at as number) * 1000) : new Date(),\n  };\n}\n\n// Sign in user\nexport async function signIn(email: string, password: string): Promise<User> {\n  const normalizedEmail = email.toLowerCase().trim();\n\n  const { data: userRow, error } = await db\n    .from('users')\n    .select('*')\n    .eq('email', normalizedEmail)\n    .maybeSingle();\n\n  if (error) {\n    throw new AuthError(`Failed to fetch user: ${error.message}`, 'DB_ERROR');\n  }\n\n  if (!userRow || !userRow.password_hash) {\n    throw new AuthError('Invalid email or password', 'INVALID_CREDENTIALS');\n  }\n\n  const isValidPassword = await verifyPassword(password, userRow.password_hash);\n  \n  if (!isValidPassword) {\n    throw new AuthError('Invalid email or password', 'INVALID_CREDENTIALS');\n  }\n\n  return {\n    id: userRow.id,\n    email: userRow.email,\n    name: userRow.name ?? null,\n    createdAt: userRow.created_at ? new Date((userRow.created_at as number) * 1000) : new Date(),\n  };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 968, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport {\n  optimizeResumeForAts,\n  OptimizeResumeForAtsInput,\n  OptimizeResumeForAtsOutput,\n} from '@/ai/flows/ats-resume-optimization';\nimport {\n  rewriteForImpact,\n  RewriteForImpactInput,\n} from '@/ai/flows/impactful-rewrite';\nimport {\n  resumeFlawSpotter,\n  ResumeFlawSpotterInput,\n} from '@/ai/flows/resume-flaw-spotter';\nimport {\n  tailoredCoverLetter,\n  TailoredCoverLetterInput,\n  TailoredCoverLetterOutput,\n} from '@/ai/flows/tailored-cover-letter';\nimport { parseResume, ParseResumeInput, ParseResumeOutput } from '@/ai/flows/parse-resume';\nimport { autofillJobDetails, AutofillJobDetailsInput, AutofillJobDetailsOutput } from '@/ai/flows/autofill-job-details';\nimport { db } from '@/db';\nimport { revalidatePath } from 'next/cache';\nimport { requireAuth } from '@/lib/auth';\n\nconst handleError = (error: unknown, defaultMessage: string) => {\n  console.error(error);\n  if (error instanceof Error) {\n    return { error: error.message };\n  }\n  return { error: defaultMessage };\n};\n\nexport async function generateAtsOptimizedResume(\n  input: OptimizeResumeForAtsInput\n): Promise<{ data: OptimizeResumeForAtsOutput | null; error?: string }> {\n  try {\n    const result = await optimizeResumeForAts(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to optimize resume for ATS.');\n  }\n}\n\nexport async function generateTailoredCoverLetter(\n  input: TailoredCoverLetterInput\n): Promise<{ data: TailoredCoverLetterOutput | null; error?: string }> {\n  try {\n    const result = await tailoredCoverLetter(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to generate cover letter.');\n  }\n}\n\nexport async function generateImpactfulRewrite(input: RewriteForImpactInput) {\n  try {\n    const result = await rewriteForImpact(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to rewrite resume section.');\n  }\n}\n\nexport async function findResumeFlaws(input: ResumeFlawSpotterInput) {\n  try {\n    const result = await resumeFlawSpotter(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to spot resume flaws.');\n  }\n}\n\nexport async function getResumesForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('resumes')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch resumes.');\n\n    const parsedResumes = (data || []).map((r: any) => {\n      try {\n        return {\n          id: r.id,\n          title: r.title,\n          name: r.name,\n          phone: r.phone,\n          email: r.email,\n          linkedinUrl: r.linkedin_url,\n          portfolioUrl: r.portfolio_url,\n          summary: r.summary,\n          skills: typeof r.skills === 'string' ? JSON.parse(r.skills) : r.skills,\n          experiences: typeof r.experiences === 'string' ? JSON.parse(r.experiences) : r.experiences,\n          projects: typeof r.projects === 'string' ? JSON.parse(r.projects) : r.projects,\n          education: typeof r.education === 'string' ? JSON.parse(r.education) : r.education,\n          userId: r.user_id,\n          createdAt: new Date((r.created_at as number) * 1000),\n          updatedAt: r.updated_at ? new Date((r.updated_at as number) * 1000) : null,\n        };\n      } catch (e) {\n        console.error('Failed to parse resume data', e);\n        return {\n          id: r.id,\n          title: r.title,\n          name: r.name,\n          phone: r.phone,\n          email: r.email,\n          linkedinUrl: r.linkedin_url,\n          portfolioUrl: r.portfolio_url,\n          summary: r.summary,\n          skills: [],\n          experiences: [],\n          projects: [],\n          education: [],\n          userId: r.user_id,\n          createdAt: new Date((r.created_at as number) * 1000),\n          updatedAt: r.updated_at ? new Date((r.updated_at as number) * 1000) : null,\n        };\n      }\n    });\n\n    return { data: parsedResumes };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch resumes.');\n  }\n}\n\nexport async function saveLetter({\n  jobTitle,\n  company,\n  jobDesc,\n  content,\n  tone,\n  atsScore,\n  resumeId,\n  userId,\n}: {\n  jobTitle: string;\n  company: string;\n  jobDesc: string;\n  content: string;\n  tone: string;\n  atsScore: number;\n  resumeId: number;\n  userId?: number;\n}) {\n  const { user } = await requireAuth();\n\n  try {\n    const { data, error } = await db\n      .from('letters')\n      .insert({\n        job_title: jobTitle,\n        company,\n        job_desc: jobDesc,\n        content,\n        tone,\n        ats_score: atsScore,\n        user_id: user.id,\n        resume_id: resumeId,\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to save cover letter.');\n\n    revalidatePath('/dashboard');\n    const mapped = data && {\n      id: data.id,\n      jobTitle: data.job_title,\n      company: data.company,\n      jobDesc: data.job_desc,\n      content: data.content,\n      tone: data.tone,\n      atsScore: data.ats_score,\n      userId: data.user_id,\n      resumeId: data.resume_id,\n      createdAt: new Date((data.created_at as number) * 1000),\n    };\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to save cover letter.');\n  }\n}\n\nexport async function getApplicationsForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('applications')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch applications');\n\n    const mapped = (data || []).map((a: any) => ({\n      id: a.id,\n      jobTitle: a.job_title,\n      company: a.company,\n      status: a.status,\n      url: a.url,\n      requirements: a.requirements,\n      deadline: a.deadline ?? null,\n      userId: a.user_id,\n      createdAt: a.created_at as number,\n    }));\n\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch applications');\n  }\n}\n\nexport async function addApplication(application: {\n  jobTitle: string;\n  company: string;\n  status: string;\n  url?: string;\n  requirements?: string;\n  userId?: number;\n}) {\n  const { user } = await requireAuth();\n\n  try {\n    const { data, error } = await db\n      .from('applications')\n      .insert({\n        job_title: application.jobTitle,\n        company: application.company,\n        status: application.status,\n        url: application.url,\n        requirements: application.requirements,\n        user_id: user.id,\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to add application');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    const mapped = data && ({\n      id: data.id,\n      jobTitle: data.job_title,\n      company: data.company,\n      status: data.status,\n      url: data.url,\n      requirements: data.requirements,\n      deadline: data.deadline ?? null,\n      userId: data.user_id,\n      createdAt: data.created_at as number,\n    });\n    return { data: mapped as any };\n  } catch(error) {\n    return handleError(error, 'Failed to add application');\n  }\n}\n\nexport async function updateApplicationStatus(id: number, status: string) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('applications')\n      .update({ status })\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to update application status');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch (error) {\n    return handleError(error, 'Failed to update application status');\n  }\n}\n\nexport async function parseResumeAndSave(input: ParseResumeInput & { title: string; userId?: number }) {\n  const { user } = await requireAuth();\n\n  try {\n    const parsedData = await parseResume(input);\n\n    const { data, error } = await db\n      .from('resumes')\n      .insert({\n        user_id: user.id,\n        title: input.title,\n        name: parsedData.name,\n        phone: parsedData.phone,\n        email: parsedData.email,\n        linkedin_url: parsedData.linkedinUrl,\n        portfolio_url: parsedData.portfolioUrl,\n        summary: parsedData.summary,\n        skills: JSON.stringify(parsedData.skills),\n        experiences: JSON.stringify(parsedData.experiences),\n        projects: JSON.stringify(parsedData.projects),\n        education: JSON.stringify(parsedData.education),\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to parse and save resume.');\n\n    revalidatePath('/resumes');\n    const mapped = data && ({\n      id: data.id,\n      title: data.title,\n      name: data.name,\n      phone: data.phone,\n      email: data.email,\n      linkedinUrl: data.linkedin_url,\n      portfolioUrl: data.portfolio_url,\n      summary: data.summary,\n      skills: data.skills,\n      experiences: data.experiences,\n      projects: data.projects,\n      education: data.education,\n      userId: data.user_id,\n      createdAt: data.created_at as number,\n      updatedAt: data.updated_at ?? null,\n    });\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to parse and save resume.');\n  }\n}\n\nexport async function deleteResume(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('resumes')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete resume.');\n\n    revalidatePath('/resumes');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete resume.')\n  }\n}\n\n\nexport async function deleteLetter(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('letters')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete letter.');\n\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete letter.')\n  }\n}\n\nexport async function deleteUserAccount() {\n  const { user } = await requireAuth();\n\n  try {\n    await db.from('letters').delete().eq('user_id', user.id);\n    await db.from('applications').delete().eq('user_id', user.id);\n    await db.from('resumes').delete().eq('user_id', user.id);\n    await db.from('users').delete().eq('id', user.id);\n\n    revalidatePath('/');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete account.');\n  }\n}\n\nexport async function getLettersForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('letters')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch letters.');\n\n    const parsedLetters = (data || []).map((l: any) => ({\n      id: l.id,\n      jobTitle: l.job_title,\n      company: l.company,\n      jobDesc: l.job_desc,\n      content: l.content,\n      tone: l.tone,\n      atsScore: l.ats_score,\n      userId: l.user_id,\n      resumeId: l.resume_id,\n      createdAt: new Date((l.created_at as number) * 1000),\n    }));\n\n    return { data: parsedLetters };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch letters.');\n  }\n}\n\nexport async function deleteApplication(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('applications')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete application.');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch (e) {\n    return handleError(e, 'Failed to delete application.');\n  }\n}\n\n\nexport async function autofillJobDetailsAction(input: AutofillJobDetailsInput): Promise<{data: AutofillJobDetailsOutput | null; error?: string}> {\n    try {\n        const result = await autofillJobDetails(input);\n        return { data: result };\n    } catch(e) {\n        return handleError(e, 'Failed to autofill job details.');\n    }\n}\n\nexport async function updateResume(resume: ParseResumeOutput & { id: number, title: string }) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('resumes')\n      .update({\n        title: resume.title,\n        name: resume.name,\n        phone: resume.phone,\n        email: resume.email,\n        linkedin_url: resume.linkedinUrl,\n        portfolio_url: resume.portfolioUrl,\n        summary: resume.summary,\n        skills: typeof resume.skills === 'string' ? resume.skills : JSON.stringify(resume.skills),\n        experiences: typeof resume.experiences === 'string' ? resume.experiences : JSON.stringify(resume.experiences),\n        projects: typeof resume.projects === 'string' ? resume.projects : JSON.stringify(resume.projects),\n        education: typeof resume.education === 'string' ? resume.education : JSON.stringify(resume.education),\n        updated_at: Math.floor(Date.now() / 1000),\n      })\n      .eq('id', resume.id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to update resume.');\n\n    revalidatePath('/resumes');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to update resume.');\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1455, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/.next-internal/server/app/dashboard/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {deleteUserAccount as '00d36c7dbf0f3b0973c9106bea2c27be9566e9dd32'} from 'ACTIONS_MODULE0'\nexport {addApplication as '4007e4a2a4706688e97ec326bdbd42296039c2e654'} from 'ACTIONS_MODULE0'\nexport {generateAtsOptimizedResume as '400c336bd5d3b0978e3e24b1ae664b429a0eb916f5'} from 'ACTIONS_MODULE0'\nexport {getLettersForUser as '4019aa2b57f3f3430006c76f174334d19b39def70d'} from 'ACTIONS_MODULE0'\nexport {deleteLetter as '401f657fb9ac88b08fd3f5ad60296b02d219e240b0'} from 'ACTIONS_MODULE0'\nexport {generateImpactfulRewrite as '40389960774293278bbed284755db0ab47176da409'} from 'ACTIONS_MODULE0'\nexport {findResumeFlaws as '4043440970daf967cd992575c205e9cfb60e623263'} from 'ACTIONS_MODULE0'\nexport {deleteResume as '404ff1806eab37399e41d5d92aaed37652bed9daaa'} from 'ACTIONS_MODULE0'\nexport {autofillJobDetailsAction as '406102954697945da8370262cbb0571c50e0ebb4ad'} from 'ACTIONS_MODULE0'\nexport {getApplicationsForUser as '4076b95374759f2b12368920e4ab62b17edc863b49'} from 'ACTIONS_MODULE0'\nexport {generateTailoredCoverLetter as '4080468a2b5b913763eb5cd260d8ecba5849c30a58'} from 'ACTIONS_MODULE0'\nexport {saveLetter as '4095d73167fdca3f6716947abebb0331f08b3a0388'} from 'ACTIONS_MODULE0'\nexport {getResumesForUser as '40a5aa441f00d03dfd13053ae26a3b7f421a5c211a'} from 'ACTIONS_MODULE0'\nexport {parseResumeAndSave as '40be60d247fd56349263bbc432894106cfb316acce'} from 'ACTIONS_MODULE0'\nexport {updateResume as '40cb8186d35635de8c92b33b336473a06315e59534'} from 'ACTIONS_MODULE0'\nexport {deleteApplication as '40fe1ca2983c4f348aec2c64f3c7f237be7b9e33ec'} from 'ACTIONS_MODULE0'\nexport {updateApplicationStatus as '60b3eff53e047897277db110dc2e93132e7588d1c2'} from 'ACTIONS_MODULE0'\nexport {optimizeResumeForAts as '40f18bd642f5592f95679756e3dbaff255865e5d1e'} from 'ACTIONS_MODULE1'\nexport {rewriteForImpact as '409387d9ebe3ac5e47cebbfcea69da01de34d3975f'} from 'ACTIONS_MODULE2'\nexport {resumeFlawSpotter as '409cb1ef921c13e5008a5c2a9692d29a724a84489f'} from 'ACTIONS_MODULE3'\nexport {tailoredCoverLetter as '407709a0f70a06f1fd11efd82ea91f8480f9006cfc'} from 'ACTIONS_MODULE4'\nexport {parseResume as '40d229c40e3431b096f63a3584cf59a82926f09a63'} from 'ACTIONS_MODULE5'\nexport {autofillJobDetails as '4091775f4355978f666baaab40790a736452627552'} from 'ACTIONS_MODULE6'\n"],"names":[],"mappings":";AAAA;AAiBA;AACA;AACA;AACA;AACA;AACA","debugId":null}},
    {"offset": {"line": 1591, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/components/dashboard.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Dashboard = registerClientReference(\n    function() { throw new Error(\"Attempted to call Dashboard() from the server but Dashboard is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/dashboard.tsx <module evaluation>\",\n    \"Dashboard\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,8DACA","debugId":null}},
    {"offset": {"line": 1605, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/components/dashboard.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Dashboard = registerClientReference(\n    function() { throw new Error(\"Attempted to call Dashboard() from the server but Dashboard is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/dashboard.tsx\",\n    \"Dashboard\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,0CACA","debugId":null}},
    {"offset": {"line": 1619, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 1629, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/app/dashboard/page.tsx"],"sourcesContent":["import { requireAuth } from '@/lib/auth';\nimport { getResumesForUser, getLettersForUser, getApplicationsForUser } from '@/app/actions';\nimport { Dashboard as DashboardComponent } from '@/components/dashboard';\nimport { format } from 'date-fns';\nimport type { Resume, Letter, Application } from '@/db/schema';\n\ntype FormattedResume = Omit<Resume, 'createdAt' | 'updatedAt'> & { \n  createdAt: string; \n  updatedAt: string | null; \n};\ntype FormattedLetter = Omit<Letter, 'createdAt'> & { createdAt: string };\n\nexport default async function DashboardPage() {\n  // Require authentication - will redirect if not authenticated\n  const { user } = await requireAuth();\n\n  try {\n    // Fetch all data in parallel\n    const [resumesResult, lettersResult, applicationsResult] = await Promise.all([\n      getResumesForUser(user.id),\n      getLettersForUser(user.id),\n      getApplicationsForUser(user.id)\n    ]);\n\n    // Handle errors\n    if (resumesResult.error) {\n      throw new Error(`Failed to load resumes: ${resumesResult.error}`);\n    }\n    if (lettersResult.error) {\n      throw new Error(`Failed to load letters: ${lettersResult.error}`);\n    }\n    if (applicationsResult.error) {\n      throw new Error(`Failed to load applications: ${applicationsResult.error}`);\n    }\n\n    // Format data for display\n    const formattedResumes: FormattedResume[] = (resumesResult.data || []).map(r => ({\n      ...r,\n      createdAt: r.createdAt ? format(new Date(r.createdAt), 'PP') : '',\n      updatedAt: r.updatedAt ? format(new Date(r.updatedAt), 'PP') : null,\n    }));\n\n    const formattedLetters: FormattedLetter[] = (lettersResult.data || []).map(l => ({\n      ...l,\n      createdAt: l.createdAt ? format(new Date(l.createdAt), 'PP') : '',\n    }));\n\n    const applications: Application[] = applicationsResult.data || [];\n\n    return (\n      <DashboardComponent \n        resumes={formattedResumes as any} \n        letters={formattedLetters as any} \n        applications={applications as any} \n      />\n    );\n  } catch (error) {\n    console.error('Dashboard data loading error:', error);\n    \n    return (\n      <div className=\"min-h-screen w-full bg-background/50\">\n        <main className=\"container mx-auto flex flex-col p-4 sm:p-8\">\n          <div className=\"flex flex-col items-center justify-center flex-1 text-center\">\n            <h2 className=\"text-2xl font-semibold mb-4\">Error Loading Dashboard</h2>\n            <p className=\"text-muted-foreground mb-4\">\n              {error instanceof Error ? error.message : 'Failed to load dashboard data'}\n            </p>\n            <button \n              onClick={() => window.location.reload()} \n              className=\"px-4 py-2 bg-primary text-primary-foreground rounded\"\n            >\n              Retry\n            </button>\n          </div>\n        </main>\n      </div>\n    );\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;;AASe,eAAe;IAC5B,8DAA8D;IAC9D,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,CAAA,GAAA,kHAAA,CAAA,cAAW,AAAD;IAEjC,IAAI;QACF,6BAA6B;QAC7B,MAAM,CAAC,eAAe,eAAe,mBAAmB,GAAG,MAAM,QAAQ,GAAG,CAAC;YAC3E,CAAA,GAAA,qHAAA,CAAA,oBAAiB,AAAD,EAAE,KAAK,EAAE;YACzB,CAAA,GAAA,qHAAA,CAAA,oBAAiB,AAAD,EAAE,KAAK,EAAE;YACzB,CAAA,GAAA,qHAAA,CAAA,yBAAsB,AAAD,EAAE,KAAK,EAAE;SAC/B;QAED,gBAAgB;QAChB,IAAI,cAAc,KAAK,EAAE;YACvB,MAAM,IAAI,MAAM,CAAC,wBAAwB,EAAE,cAAc,KAAK,EAAE;QAClE;QACA,IAAI,cAAc,KAAK,EAAE;YACvB,MAAM,IAAI,MAAM,CAAC,wBAAwB,EAAE,cAAc,KAAK,EAAE;QAClE;QACA,IAAI,mBAAmB,KAAK,EAAE;YAC5B,MAAM,IAAI,MAAM,CAAC,6BAA6B,EAAE,mBAAmB,KAAK,EAAE;QAC5E;QAEA,0BAA0B;QAC1B,MAAM,mBAAsC,CAAC,cAAc,IAAI,IAAI,EAAE,EAAE,GAAG,CAAC,CAAA,IAAK,CAAC;gBAC/E,GAAG,CAAC;gBACJ,WAAW,EAAE,SAAS,GAAG,CAAA,GAAA,sJAAA,CAAA,SAAM,AAAD,EAAE,IAAI,KAAK,EAAE,SAAS,GAAG,QAAQ;gBAC/D,WAAW,EAAE,SAAS,GAAG,CAAA,GAAA,sJAAA,CAAA,SAAM,AAAD,EAAE,IAAI,KAAK,EAAE,SAAS,GAAG,QAAQ;YACjE,CAAC;QAED,MAAM,mBAAsC,CAAC,cAAc,IAAI,IAAI,EAAE,EAAE,GAAG,CAAC,CAAA,IAAK,CAAC;gBAC/E,GAAG,CAAC;gBACJ,WAAW,EAAE,SAAS,GAAG,CAAA,GAAA,sJAAA,CAAA,SAAM,AAAD,EAAE,IAAI,KAAK,EAAE,SAAS,GAAG,QAAQ;YACjE,CAAC;QAED,MAAM,eAA8B,mBAAmB,IAAI,IAAI,EAAE;QAEjE,qBACE,8OAAC,+HAAA,CAAA,YAAkB;YACjB,SAAS;YACT,SAAS;YACT,cAAc;;;;;;IAGpB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAE/C,qBACE,8OAAC;YAAI,WAAU;sBACb,cAAA,8OAAC;gBAAK,WAAU;0BACd,cAAA,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAG,WAAU;sCAA8B;;;;;;sCAC5C,8OAAC;4BAAE,WAAU;sCACV,iBAAiB,QAAQ,MAAM,OAAO,GAAG;;;;;;sCAE5C,8OAAC;4BACC,SAAS,IAAM,OAAO,QAAQ,CAAC,MAAM;4BACrC,WAAU;sCACX;;;;;;;;;;;;;;;;;;;;;;IAOX;AACF","debugId":null}}]
}