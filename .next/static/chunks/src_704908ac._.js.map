{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport {\n  optimizeResumeForAts,\n  OptimizeResumeForAtsInput,\n  OptimizeResumeForAtsOutput,\n} from '@/ai/flows/ats-resume-optimization';\nimport {\n  rewriteForImpact,\n  RewriteForImpactInput,\n} from '@/ai/flows/impactful-rewrite';\nimport {\n  resumeFlawSpotter,\n  ResumeFlawSpotterInput,\n} from '@/ai/flows/resume-flaw-spotter';\nimport {\n  tailoredCoverLetter,\n  TailoredCoverLetterInput,\n  TailoredCoverLetterOutput,\n} from '@/ai/flows/tailored-cover-letter';\nimport { parseResume, ParseResumeInput, ParseResumeOutput } from '@/ai/flows/parse-resume';\nimport { autofillJobDetails, AutofillJobDetailsInput, AutofillJobDetailsOutput } from '@/ai/flows/autofill-job-details';\nimport { db } from '@/db';\nimport { revalidatePath } from 'next/cache';\nimport { requireAuth } from '@/lib/auth';\n\nconst handleError = (error: unknown, defaultMessage: string) => {\n  console.error(error);\n  if (error instanceof Error) {\n    return { error: error.message };\n  }\n  return { error: defaultMessage };\n};\n\nexport async function generateAtsOptimizedResume(\n  input: OptimizeResumeForAtsInput\n): Promise<{ data: OptimizeResumeForAtsOutput | null; error?: string }> {\n  try {\n    const result = await optimizeResumeForAts(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to optimize resume for ATS.');\n  }\n}\n\nexport async function generateTailoredCoverLetter(\n  input: TailoredCoverLetterInput\n): Promise<{ data: TailoredCoverLetterOutput | null; error?: string }> {\n  try {\n    const result = await tailoredCoverLetter(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to generate cover letter.');\n  }\n}\n\nexport async function generateImpactfulRewrite(input: RewriteForImpactInput) {\n  try {\n    const result = await rewriteForImpact(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to rewrite resume section.');\n  }\n}\n\nexport async function findResumeFlaws(input: ResumeFlawSpotterInput) {\n  try {\n    const result = await resumeFlawSpotter(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to spot resume flaws.');\n  }\n}\n\nexport async function getResumesForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('resumes')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch resumes.');\n\n    const parsedResumes = (data || []).map((r: any) => {\n      try {\n        return {\n          id: r.id,\n          title: r.title,\n          name: r.name,\n          phone: r.phone,\n          email: r.email,\n          linkedinUrl: r.linkedin_url,\n          portfolioUrl: r.portfolio_url,\n          summary: r.summary,\n          skills: typeof r.skills === 'string' ? JSON.parse(r.skills) : r.skills,\n          experiences: typeof r.experiences === 'string' ? JSON.parse(r.experiences) : r.experiences,\n          projects: typeof r.projects === 'string' ? JSON.parse(r.projects) : r.projects,\n          education: typeof r.education === 'string' ? JSON.parse(r.education) : r.education,\n          userId: r.user_id,\n          createdAt: new Date((r.created_at as number) * 1000),\n          updatedAt: r.updated_at ? new Date((r.updated_at as number) * 1000) : null,\n        };\n      } catch (e) {\n        console.error('Failed to parse resume data', e);\n        return {\n          id: r.id,\n          title: r.title,\n          name: r.name,\n          phone: r.phone,\n          email: r.email,\n          linkedinUrl: r.linkedin_url,\n          portfolioUrl: r.portfolio_url,\n          summary: r.summary,\n          skills: [],\n          experiences: [],\n          projects: [],\n          education: [],\n          userId: r.user_id,\n          createdAt: new Date((r.created_at as number) * 1000),\n          updatedAt: r.updated_at ? new Date((r.updated_at as number) * 1000) : null,\n        };\n      }\n    });\n\n    return { data: parsedResumes };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch resumes.');\n  }\n}\n\nexport async function saveLetter({\n  jobTitle,\n  company,\n  jobDesc,\n  content,\n  tone,\n  atsScore,\n  resumeId,\n  userId,\n}: {\n  jobTitle: string;\n  company: string;\n  jobDesc: string;\n  content: string;\n  tone: string;\n  atsScore: number;\n  resumeId: number;\n  userId?: number;\n}) {\n  const { user } = await requireAuth();\n\n  try {\n    const { data, error } = await db\n      .from('letters')\n      .insert({\n        job_title: jobTitle,\n        company,\n        job_desc: jobDesc,\n        content,\n        tone,\n        ats_score: atsScore,\n        user_id: user.id,\n        resume_id: resumeId,\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to save cover letter.');\n\n    revalidatePath('/dashboard');\n    const mapped = data && {\n      id: data.id,\n      jobTitle: data.job_title,\n      company: data.company,\n      jobDesc: data.job_desc,\n      content: data.content,\n      tone: data.tone,\n      atsScore: data.ats_score,\n      userId: data.user_id,\n      resumeId: data.resume_id,\n      createdAt: new Date((data.created_at as number) * 1000),\n    };\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to save cover letter.');\n  }\n}\n\nexport async function getApplicationsForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('applications')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch applications');\n\n    const mapped = (data || []).map((a: any) => ({\n      id: a.id,\n      jobTitle: a.job_title,\n      company: a.company,\n      status: a.status,\n      url: a.url,\n      requirements: a.requirements,\n      deadline: a.deadline ?? null,\n      userId: a.user_id,\n      createdAt: a.created_at as number,\n    }));\n\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch applications');\n  }\n}\n\nexport async function addApplication(application: {\n  jobTitle: string;\n  company: string;\n  status: string;\n  url?: string;\n  requirements?: string;\n  userId?: number;\n}) {\n  const { user } = await requireAuth();\n\n  try {\n    const { data, error } = await db\n      .from('applications')\n      .insert({\n        job_title: application.jobTitle,\n        company: application.company,\n        status: application.status,\n        url: application.url,\n        requirements: application.requirements,\n        user_id: user.id,\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to add application');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    const mapped = data && ({\n      id: data.id,\n      jobTitle: data.job_title,\n      company: data.company,\n      status: data.status,\n      url: data.url,\n      requirements: data.requirements,\n      deadline: data.deadline ?? null,\n      userId: data.user_id,\n      createdAt: data.created_at as number,\n    });\n    return { data: mapped as any };\n  } catch(error) {\n    return handleError(error, 'Failed to add application');\n  }\n}\n\nexport async function updateApplicationStatus(id: number, status: string) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('applications')\n      .update({ status })\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to update application status');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch (error) {\n    return handleError(error, 'Failed to update application status');\n  }\n}\n\nexport async function parseResumeAndSave(input: ParseResumeInput & { title: string; userId?: number }) {\n  const { user } = await requireAuth();\n\n  try {\n    const parsedData = await parseResume(input);\n\n    const { data, error } = await db\n      .from('resumes')\n      .insert({\n        user_id: user.id,\n        title: input.title,\n        name: parsedData.name,\n        phone: parsedData.phone,\n        email: parsedData.email,\n        linkedin_url: parsedData.linkedinUrl,\n        portfolio_url: parsedData.portfolioUrl,\n        summary: parsedData.summary,\n        skills: JSON.stringify(parsedData.skills),\n        experiences: JSON.stringify(parsedData.experiences),\n        projects: JSON.stringify(parsedData.projects),\n        education: JSON.stringify(parsedData.education),\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to parse and save resume.');\n\n    revalidatePath('/resumes');\n    const mapped = data && ({\n      id: data.id,\n      title: data.title,\n      name: data.name,\n      phone: data.phone,\n      email: data.email,\n      linkedinUrl: data.linkedin_url,\n      portfolioUrl: data.portfolio_url,\n      summary: data.summary,\n      skills: data.skills,\n      experiences: data.experiences,\n      projects: data.projects,\n      education: data.education,\n      userId: data.user_id,\n      createdAt: data.created_at as number,\n      updatedAt: data.updated_at ?? null,\n    });\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to parse and save resume.');\n  }\n}\n\nexport async function deleteResume(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('resumes')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete resume.');\n\n    revalidatePath('/resumes');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete resume.')\n  }\n}\n\n\nexport async function deleteLetter(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('letters')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete letter.');\n\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete letter.')\n  }\n}\n\nexport async function deleteUserAccount() {\n  const { user } = await requireAuth();\n\n  try {\n    await db.from('letters').delete().eq('user_id', user.id);\n    await db.from('applications').delete().eq('user_id', user.id);\n    await db.from('resumes').delete().eq('user_id', user.id);\n    await db.from('users').delete().eq('id', user.id);\n\n    revalidatePath('/');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete account.');\n  }\n}\n\nexport async function getLettersForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('letters')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch letters.');\n\n    const parsedLetters = (data || []).map((l: any) => ({\n      id: l.id,\n      jobTitle: l.job_title,\n      company: l.company,\n      jobDesc: l.job_desc,\n      content: l.content,\n      tone: l.tone,\n      atsScore: l.ats_score,\n      userId: l.user_id,\n      resumeId: l.resume_id,\n      createdAt: new Date((l.created_at as number) * 1000),\n    }));\n\n    return { data: parsedLetters };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch letters.');\n  }\n}\n\nexport async function deleteApplication(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('applications')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete application.');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch (e) {\n    return handleError(e, 'Failed to delete application.');\n  }\n}\n\n\nexport async function autofillJobDetailsAction(input: AutofillJobDetailsInput): Promise<{data: AutofillJobDetailsOutput | null; error?: string}> {\n    try {\n        const result = await autofillJobDetails(input);\n        return { data: result };\n    } catch(e) {\n        return handleError(e, 'Failed to autofill job details.');\n    }\n}\n\nexport async function updateResume(resume: ParseResumeOutput & { id: number, title: string }) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('resumes')\n      .update({\n        title: resume.title,\n        name: resume.name,\n        phone: resume.phone,\n        email: resume.email,\n        linkedin_url: resume.linkedinUrl,\n        portfolio_url: resume.portfolioUrl,\n        summary: resume.summary,\n        skills: typeof resume.skills === 'string' ? resume.skills : JSON.stringify(resume.skills),\n        experiences: typeof resume.experiences === 'string' ? resume.experiences : JSON.stringify(resume.experiences),\n        projects: typeof resume.projects === 'string' ? resume.projects : JSON.stringify(resume.projects),\n        education: typeof resume.education === 'string' ? resume.education : JSON.stringify(resume.education),\n        updated_at: Math.floor(Date.now() / 1000),\n      })\n      .eq('id', resume.id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to update resume.');\n\n    revalidatePath('/resumes');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to update resume.');\n  }\n}\n"],"names":[],"mappings":";;;;;;IA2EsB,oBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport {\n  optimizeResumeForAts,\n  OptimizeResumeForAtsInput,\n  OptimizeResumeForAtsOutput,\n} from '@/ai/flows/ats-resume-optimization';\nimport {\n  rewriteForImpact,\n  RewriteForImpactInput,\n} from '@/ai/flows/impactful-rewrite';\nimport {\n  resumeFlawSpotter,\n  ResumeFlawSpotterInput,\n} from '@/ai/flows/resume-flaw-spotter';\nimport {\n  tailoredCoverLetter,\n  TailoredCoverLetterInput,\n  TailoredCoverLetterOutput,\n} from '@/ai/flows/tailored-cover-letter';\nimport { parseResume, ParseResumeInput, ParseResumeOutput } from '@/ai/flows/parse-resume';\nimport { autofillJobDetails, AutofillJobDetailsInput, AutofillJobDetailsOutput } from '@/ai/flows/autofill-job-details';\nimport { db } from '@/db';\nimport { revalidatePath } from 'next/cache';\nimport { requireAuth } from '@/lib/auth';\n\nconst handleError = (error: unknown, defaultMessage: string) => {\n  console.error(error);\n  if (error instanceof Error) {\n    return { error: error.message };\n  }\n  return { error: defaultMessage };\n};\n\nexport async function generateAtsOptimizedResume(\n  input: OptimizeResumeForAtsInput\n): Promise<{ data: OptimizeResumeForAtsOutput | null; error?: string }> {\n  try {\n    const result = await optimizeResumeForAts(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to optimize resume for ATS.');\n  }\n}\n\nexport async function generateTailoredCoverLetter(\n  input: TailoredCoverLetterInput\n): Promise<{ data: TailoredCoverLetterOutput | null; error?: string }> {\n  try {\n    const result = await tailoredCoverLetter(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to generate cover letter.');\n  }\n}\n\nexport async function generateImpactfulRewrite(input: RewriteForImpactInput) {\n  try {\n    const result = await rewriteForImpact(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to rewrite resume section.');\n  }\n}\n\nexport async function findResumeFlaws(input: ResumeFlawSpotterInput) {\n  try {\n    const result = await resumeFlawSpotter(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to spot resume flaws.');\n  }\n}\n\nexport async function getResumesForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('resumes')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch resumes.');\n\n    const parsedResumes = (data || []).map((r: any) => {\n      try {\n        return {\n          id: r.id,\n          title: r.title,\n          name: r.name,\n          phone: r.phone,\n          email: r.email,\n          linkedinUrl: r.linkedin_url,\n          portfolioUrl: r.portfolio_url,\n          summary: r.summary,\n          skills: typeof r.skills === 'string' ? JSON.parse(r.skills) : r.skills,\n          experiences: typeof r.experiences === 'string' ? JSON.parse(r.experiences) : r.experiences,\n          projects: typeof r.projects === 'string' ? JSON.parse(r.projects) : r.projects,\n          education: typeof r.education === 'string' ? JSON.parse(r.education) : r.education,\n          userId: r.user_id,\n          createdAt: new Date((r.created_at as number) * 1000),\n          updatedAt: r.updated_at ? new Date((r.updated_at as number) * 1000) : null,\n        };\n      } catch (e) {\n        console.error('Failed to parse resume data', e);\n        return {\n          id: r.id,\n          title: r.title,\n          name: r.name,\n          phone: r.phone,\n          email: r.email,\n          linkedinUrl: r.linkedin_url,\n          portfolioUrl: r.portfolio_url,\n          summary: r.summary,\n          skills: [],\n          experiences: [],\n          projects: [],\n          education: [],\n          userId: r.user_id,\n          createdAt: new Date((r.created_at as number) * 1000),\n          updatedAt: r.updated_at ? new Date((r.updated_at as number) * 1000) : null,\n        };\n      }\n    });\n\n    return { data: parsedResumes };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch resumes.');\n  }\n}\n\nexport async function saveLetter({\n  jobTitle,\n  company,\n  jobDesc,\n  content,\n  tone,\n  atsScore,\n  resumeId,\n  userId,\n}: {\n  jobTitle: string;\n  company: string;\n  jobDesc: string;\n  content: string;\n  tone: string;\n  atsScore: number;\n  resumeId: number;\n  userId?: number;\n}) {\n  const { user } = await requireAuth();\n\n  try {\n    const { data, error } = await db\n      .from('letters')\n      .insert({\n        job_title: jobTitle,\n        company,\n        job_desc: jobDesc,\n        content,\n        tone,\n        ats_score: atsScore,\n        user_id: user.id,\n        resume_id: resumeId,\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to save cover letter.');\n\n    revalidatePath('/dashboard');\n    const mapped = data && {\n      id: data.id,\n      jobTitle: data.job_title,\n      company: data.company,\n      jobDesc: data.job_desc,\n      content: data.content,\n      tone: data.tone,\n      atsScore: data.ats_score,\n      userId: data.user_id,\n      resumeId: data.resume_id,\n      createdAt: new Date((data.created_at as number) * 1000),\n    };\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to save cover letter.');\n  }\n}\n\nexport async function getApplicationsForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('applications')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch applications');\n\n    const mapped = (data || []).map((a: any) => ({\n      id: a.id,\n      jobTitle: a.job_title,\n      company: a.company,\n      status: a.status,\n      url: a.url,\n      requirements: a.requirements,\n      deadline: a.deadline ?? null,\n      userId: a.user_id,\n      createdAt: a.created_at as number,\n    }));\n\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch applications');\n  }\n}\n\nexport async function addApplication(application: {\n  jobTitle: string;\n  company: string;\n  status: string;\n  url?: string;\n  requirements?: string;\n  userId?: number;\n}) {\n  const { user } = await requireAuth();\n\n  try {\n    const { data, error } = await db\n      .from('applications')\n      .insert({\n        job_title: application.jobTitle,\n        company: application.company,\n        status: application.status,\n        url: application.url,\n        requirements: application.requirements,\n        user_id: user.id,\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to add application');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    const mapped = data && ({\n      id: data.id,\n      jobTitle: data.job_title,\n      company: data.company,\n      status: data.status,\n      url: data.url,\n      requirements: data.requirements,\n      deadline: data.deadline ?? null,\n      userId: data.user_id,\n      createdAt: data.created_at as number,\n    });\n    return { data: mapped as any };\n  } catch(error) {\n    return handleError(error, 'Failed to add application');\n  }\n}\n\nexport async function updateApplicationStatus(id: number, status: string) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('applications')\n      .update({ status })\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to update application status');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch (error) {\n    return handleError(error, 'Failed to update application status');\n  }\n}\n\nexport async function parseResumeAndSave(input: ParseResumeInput & { title: string; userId?: number }) {\n  const { user } = await requireAuth();\n\n  try {\n    const parsedData = await parseResume(input);\n\n    const { data, error } = await db\n      .from('resumes')\n      .insert({\n        user_id: user.id,\n        title: input.title,\n        name: parsedData.name,\n        phone: parsedData.phone,\n        email: parsedData.email,\n        linkedin_url: parsedData.linkedinUrl,\n        portfolio_url: parsedData.portfolioUrl,\n        summary: parsedData.summary,\n        skills: JSON.stringify(parsedData.skills),\n        experiences: JSON.stringify(parsedData.experiences),\n        projects: JSON.stringify(parsedData.projects),\n        education: JSON.stringify(parsedData.education),\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to parse and save resume.');\n\n    revalidatePath('/resumes');\n    const mapped = data && ({\n      id: data.id,\n      title: data.title,\n      name: data.name,\n      phone: data.phone,\n      email: data.email,\n      linkedinUrl: data.linkedin_url,\n      portfolioUrl: data.portfolio_url,\n      summary: data.summary,\n      skills: data.skills,\n      experiences: data.experiences,\n      projects: data.projects,\n      education: data.education,\n      userId: data.user_id,\n      createdAt: data.created_at as number,\n      updatedAt: data.updated_at ?? null,\n    });\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to parse and save resume.');\n  }\n}\n\nexport async function deleteResume(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('resumes')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete resume.');\n\n    revalidatePath('/resumes');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete resume.')\n  }\n}\n\n\nexport async function deleteLetter(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('letters')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete letter.');\n\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete letter.')\n  }\n}\n\nexport async function deleteUserAccount() {\n  const { user } = await requireAuth();\n\n  try {\n    await db.from('letters').delete().eq('user_id', user.id);\n    await db.from('applications').delete().eq('user_id', user.id);\n    await db.from('resumes').delete().eq('user_id', user.id);\n    await db.from('users').delete().eq('id', user.id);\n\n    revalidatePath('/');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete account.');\n  }\n}\n\nexport async function getLettersForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('letters')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch letters.');\n\n    const parsedLetters = (data || []).map((l: any) => ({\n      id: l.id,\n      jobTitle: l.job_title,\n      company: l.company,\n      jobDesc: l.job_desc,\n      content: l.content,\n      tone: l.tone,\n      atsScore: l.ats_score,\n      userId: l.user_id,\n      resumeId: l.resume_id,\n      createdAt: new Date((l.created_at as number) * 1000),\n    }));\n\n    return { data: parsedLetters };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch letters.');\n  }\n}\n\nexport async function deleteApplication(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('applications')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete application.');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch (e) {\n    return handleError(e, 'Failed to delete application.');\n  }\n}\n\n\nexport async function autofillJobDetailsAction(input: AutofillJobDetailsInput): Promise<{data: AutofillJobDetailsOutput | null; error?: string}> {\n    try {\n        const result = await autofillJobDetails(input);\n        return { data: result };\n    } catch(e) {\n        return handleError(e, 'Failed to autofill job details.');\n    }\n}\n\nexport async function updateResume(resume: ParseResumeOutput & { id: number, title: string }) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('resumes')\n      .update({\n        title: resume.title,\n        name: resume.name,\n        phone: resume.phone,\n        email: resume.email,\n        linkedin_url: resume.linkedinUrl,\n        portfolio_url: resume.portfolioUrl,\n        summary: resume.summary,\n        skills: typeof resume.skills === 'string' ? resume.skills : JSON.stringify(resume.skills),\n        experiences: typeof resume.experiences === 'string' ? resume.experiences : JSON.stringify(resume.experiences),\n        projects: typeof resume.projects === 'string' ? resume.projects : JSON.stringify(resume.projects),\n        education: typeof resume.education === 'string' ? resume.education : JSON.stringify(resume.education),\n        updated_at: Math.floor(Date.now() / 1000),\n      })\n      .eq('id', resume.id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to update resume.');\n\n    revalidatePath('/resumes');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to update resume.');\n  }\n}\n"],"names":[],"mappings":";;;;;;IAwVsB,eAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport {\n  optimizeResumeForAts,\n  OptimizeResumeForAtsInput,\n  OptimizeResumeForAtsOutput,\n} from '@/ai/flows/ats-resume-optimization';\nimport {\n  rewriteForImpact,\n  RewriteForImpactInput,\n} from '@/ai/flows/impactful-rewrite';\nimport {\n  resumeFlawSpotter,\n  ResumeFlawSpotterInput,\n} from '@/ai/flows/resume-flaw-spotter';\nimport {\n  tailoredCoverLetter,\n  TailoredCoverLetterInput,\n  TailoredCoverLetterOutput,\n} from '@/ai/flows/tailored-cover-letter';\nimport { parseResume, ParseResumeInput, ParseResumeOutput } from '@/ai/flows/parse-resume';\nimport { autofillJobDetails, AutofillJobDetailsInput, AutofillJobDetailsOutput } from '@/ai/flows/autofill-job-details';\nimport { db } from '@/db';\nimport { revalidatePath } from 'next/cache';\nimport { requireAuth } from '@/lib/auth';\n\nconst handleError = (error: unknown, defaultMessage: string) => {\n  console.error(error);\n  if (error instanceof Error) {\n    return { error: error.message };\n  }\n  return { error: defaultMessage };\n};\n\nexport async function generateAtsOptimizedResume(\n  input: OptimizeResumeForAtsInput\n): Promise<{ data: OptimizeResumeForAtsOutput | null; error?: string }> {\n  try {\n    const result = await optimizeResumeForAts(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to optimize resume for ATS.');\n  }\n}\n\nexport async function generateTailoredCoverLetter(\n  input: TailoredCoverLetterInput\n): Promise<{ data: TailoredCoverLetterOutput | null; error?: string }> {\n  try {\n    const result = await tailoredCoverLetter(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to generate cover letter.');\n  }\n}\n\nexport async function generateImpactfulRewrite(input: RewriteForImpactInput) {\n  try {\n    const result = await rewriteForImpact(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to rewrite resume section.');\n  }\n}\n\nexport async function findResumeFlaws(input: ResumeFlawSpotterInput) {\n  try {\n    const result = await resumeFlawSpotter(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to spot resume flaws.');\n  }\n}\n\nexport async function getResumesForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('resumes')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch resumes.');\n\n    const parsedResumes = (data || []).map((r: any) => {\n      try {\n        return {\n          id: r.id,\n          title: r.title,\n          name: r.name,\n          phone: r.phone,\n          email: r.email,\n          linkedinUrl: r.linkedin_url,\n          portfolioUrl: r.portfolio_url,\n          summary: r.summary,\n          skills: typeof r.skills === 'string' ? JSON.parse(r.skills) : r.skills,\n          experiences: typeof r.experiences === 'string' ? JSON.parse(r.experiences) : r.experiences,\n          projects: typeof r.projects === 'string' ? JSON.parse(r.projects) : r.projects,\n          education: typeof r.education === 'string' ? JSON.parse(r.education) : r.education,\n          userId: r.user_id,\n          createdAt: new Date((r.created_at as number) * 1000),\n          updatedAt: r.updated_at ? new Date((r.updated_at as number) * 1000) : null,\n        };\n      } catch (e) {\n        console.error('Failed to parse resume data', e);\n        return {\n          id: r.id,\n          title: r.title,\n          name: r.name,\n          phone: r.phone,\n          email: r.email,\n          linkedinUrl: r.linkedin_url,\n          portfolioUrl: r.portfolio_url,\n          summary: r.summary,\n          skills: [],\n          experiences: [],\n          projects: [],\n          education: [],\n          userId: r.user_id,\n          createdAt: new Date((r.created_at as number) * 1000),\n          updatedAt: r.updated_at ? new Date((r.updated_at as number) * 1000) : null,\n        };\n      }\n    });\n\n    return { data: parsedResumes };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch resumes.');\n  }\n}\n\nexport async function saveLetter({\n  jobTitle,\n  company,\n  jobDesc,\n  content,\n  tone,\n  atsScore,\n  resumeId,\n  userId,\n}: {\n  jobTitle: string;\n  company: string;\n  jobDesc: string;\n  content: string;\n  tone: string;\n  atsScore: number;\n  resumeId: number;\n  userId?: number;\n}) {\n  const { user } = await requireAuth();\n\n  try {\n    const { data, error } = await db\n      .from('letters')\n      .insert({\n        job_title: jobTitle,\n        company,\n        job_desc: jobDesc,\n        content,\n        tone,\n        ats_score: atsScore,\n        user_id: user.id,\n        resume_id: resumeId,\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to save cover letter.');\n\n    revalidatePath('/dashboard');\n    const mapped = data && {\n      id: data.id,\n      jobTitle: data.job_title,\n      company: data.company,\n      jobDesc: data.job_desc,\n      content: data.content,\n      tone: data.tone,\n      atsScore: data.ats_score,\n      userId: data.user_id,\n      resumeId: data.resume_id,\n      createdAt: new Date((data.created_at as number) * 1000),\n    };\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to save cover letter.');\n  }\n}\n\nexport async function getApplicationsForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('applications')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch applications');\n\n    const mapped = (data || []).map((a: any) => ({\n      id: a.id,\n      jobTitle: a.job_title,\n      company: a.company,\n      status: a.status,\n      url: a.url,\n      requirements: a.requirements,\n      deadline: a.deadline ?? null,\n      userId: a.user_id,\n      createdAt: a.created_at as number,\n    }));\n\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch applications');\n  }\n}\n\nexport async function addApplication(application: {\n  jobTitle: string;\n  company: string;\n  status: string;\n  url?: string;\n  requirements?: string;\n  userId?: number;\n}) {\n  const { user } = await requireAuth();\n\n  try {\n    const { data, error } = await db\n      .from('applications')\n      .insert({\n        job_title: application.jobTitle,\n        company: application.company,\n        status: application.status,\n        url: application.url,\n        requirements: application.requirements,\n        user_id: user.id,\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to add application');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    const mapped = data && ({\n      id: data.id,\n      jobTitle: data.job_title,\n      company: data.company,\n      status: data.status,\n      url: data.url,\n      requirements: data.requirements,\n      deadline: data.deadline ?? null,\n      userId: data.user_id,\n      createdAt: data.created_at as number,\n    });\n    return { data: mapped as any };\n  } catch(error) {\n    return handleError(error, 'Failed to add application');\n  }\n}\n\nexport async function updateApplicationStatus(id: number, status: string) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('applications')\n      .update({ status })\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to update application status');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch (error) {\n    return handleError(error, 'Failed to update application status');\n  }\n}\n\nexport async function parseResumeAndSave(input: ParseResumeInput & { title: string; userId?: number }) {\n  const { user } = await requireAuth();\n\n  try {\n    const parsedData = await parseResume(input);\n\n    const { data, error } = await db\n      .from('resumes')\n      .insert({\n        user_id: user.id,\n        title: input.title,\n        name: parsedData.name,\n        phone: parsedData.phone,\n        email: parsedData.email,\n        linkedin_url: parsedData.linkedinUrl,\n        portfolio_url: parsedData.portfolioUrl,\n        summary: parsedData.summary,\n        skills: JSON.stringify(parsedData.skills),\n        experiences: JSON.stringify(parsedData.experiences),\n        projects: JSON.stringify(parsedData.projects),\n        education: JSON.stringify(parsedData.education),\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to parse and save resume.');\n\n    revalidatePath('/resumes');\n    const mapped = data && ({\n      id: data.id,\n      title: data.title,\n      name: data.name,\n      phone: data.phone,\n      email: data.email,\n      linkedinUrl: data.linkedin_url,\n      portfolioUrl: data.portfolio_url,\n      summary: data.summary,\n      skills: data.skills,\n      experiences: data.experiences,\n      projects: data.projects,\n      education: data.education,\n      userId: data.user_id,\n      createdAt: data.created_at as number,\n      updatedAt: data.updated_at ?? null,\n    });\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to parse and save resume.');\n  }\n}\n\nexport async function deleteResume(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('resumes')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete resume.');\n\n    revalidatePath('/resumes');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete resume.')\n  }\n}\n\n\nexport async function deleteLetter(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('letters')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete letter.');\n\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete letter.')\n  }\n}\n\nexport async function deleteUserAccount() {\n  const { user } = await requireAuth();\n\n  try {\n    await db.from('letters').delete().eq('user_id', user.id);\n    await db.from('applications').delete().eq('user_id', user.id);\n    await db.from('resumes').delete().eq('user_id', user.id);\n    await db.from('users').delete().eq('id', user.id);\n\n    revalidatePath('/');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete account.');\n  }\n}\n\nexport async function getLettersForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('letters')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch letters.');\n\n    const parsedLetters = (data || []).map((l: any) => ({\n      id: l.id,\n      jobTitle: l.job_title,\n      company: l.company,\n      jobDesc: l.job_desc,\n      content: l.content,\n      tone: l.tone,\n      atsScore: l.ats_score,\n      userId: l.user_id,\n      resumeId: l.resume_id,\n      createdAt: new Date((l.created_at as number) * 1000),\n    }));\n\n    return { data: parsedLetters };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch letters.');\n  }\n}\n\nexport async function deleteApplication(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('applications')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete application.');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch (e) {\n    return handleError(e, 'Failed to delete application.');\n  }\n}\n\n\nexport async function autofillJobDetailsAction(input: AutofillJobDetailsInput): Promise<{data: AutofillJobDetailsOutput | null; error?: string}> {\n    try {\n        const result = await autofillJobDetails(input);\n        return { data: result };\n    } catch(e) {\n        return handleError(e, 'Failed to autofill job details.');\n    }\n}\n\nexport async function updateResume(resume: ParseResumeOutput & { id: number, title: string }) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('resumes')\n      .update({\n        title: resume.title,\n        name: resume.name,\n        phone: resume.phone,\n        email: resume.email,\n        linkedin_url: resume.linkedinUrl,\n        portfolio_url: resume.portfolioUrl,\n        summary: resume.summary,\n        skills: typeof resume.skills === 'string' ? resume.skills : JSON.stringify(resume.skills),\n        experiences: typeof resume.experiences === 'string' ? resume.experiences : JSON.stringify(resume.experiences),\n        projects: typeof resume.projects === 'string' ? resume.projects : JSON.stringify(resume.projects),\n        education: typeof resume.education === 'string' ? resume.education : JSON.stringify(resume.education),\n        updated_at: Math.floor(Date.now() / 1000),\n      })\n      .eq('id', resume.id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to update resume.');\n\n    revalidatePath('/resumes');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to update resume.');\n  }\n}\n"],"names":[],"mappings":";;;;;;IAqSsB,qBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/components/ui/button.tsx"],"sourcesContent":["\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-transform duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AACA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACvB,4WACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,mKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/components/ui/card.tsx"],"sourcesContent":["\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AACA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 225, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/components/ui/table.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YACC,KAAK;YACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAM,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,mBAAmB;QAAa,GAAG,KAAK;;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,2DACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,+EACA;QAED,GAAG,KAAK;;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,oGACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,kDAAkD;QAC/D,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,6BAAe,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 363, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/components/ui/dropdown-menu.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 591, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/components/ui/skeleton.tsx"],"sourcesContent":["import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n"],"names":[],"mappings":";;;;AAAA;;;AAEA,SAAS,SAAS,EAChB,SAAS,EACT,GAAG,OACkC;IACrC,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,qCAAqC;QAClD,GAAG,KAAK;;;;;;AAGf;KAVS","debugId":null}},
    {"offset": {"line": 621, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/components/ui/alert-dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 773, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/components/ui/dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,SAAS,qKAAA,CAAA,OAAoB;AAEnC,MAAM,gBAAgB,qKAAA,CAAA,UAAuB;AAE7C,MAAM,eAAe,qKAAA,CAAA,SAAsB;AAE3C,MAAM,cAAc,qKAAA,CAAA,QAAqB;AAEzC,MAAM,8BAAgB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,qKAAA,CAAA,UAAuB;QACtB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,0JACA;QAED,GAAG,KAAK;;;;;;KAVP;AAaN,cAAc,WAAW,GAAG,qKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,8BAAgB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGnC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,6LAAC;;0BACC,6LAAC;;;;;0BACD,6LAAC,qKAAA,CAAA,UAAuB;gBACtB,KAAK;gBACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,+fACA;gBAED,GAAG,KAAK;;oBAER;kCACD,6LAAC,qKAAA,CAAA,QAAqB;wBAAC,WAAU;;0CAC/B,6LAAC,+LAAA,CAAA,IAAC;gCAAC,WAAU;;;;;;0CACb,6LAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;;AAKlC,cAAc,WAAW,GAAG,qKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;MATP;AAYN,aAAa,WAAW,GAAG;AAE3B,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;;;;;;MATP;AAYN,aAAa,WAAW,GAAG;AAE3B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,qKAAA,CAAA,QAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qDACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG,qKAAA,CAAA,QAAqB,CAAC,WAAW;AAE3D,MAAM,kCAAoB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGvC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,qKAAA,CAAA,cAA2B;QAC1B,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,kBAAkB,WAAW,GAAG,qKAAA,CAAA,cAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 924, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,oKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;;AAGb,MAAM,WAAW,GAAG,oKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 963, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,6LAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 999, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC9B,CAAC,EAAC,SAAS,EAAE,GAAG,OAAM,EAAE;IACtB,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 1034, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/components/ui/progress.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n"],"names":[],"mappings":";;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG9B,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,OAAO,EAAE,oBACjC,6LAAC,uKAAA,CAAA,OAAsB;QACrB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;kBAET,cAAA,6LAAC,uKAAA,CAAA,YAA2B;YAC1B,WAAU;YACV,OAAO;gBAAE,WAAW,CAAC,YAAY,EAAE,MAAM,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC;YAAC;;;;;;;;;;;;AAIhE,SAAS,WAAW,GAAG,uKAAA,CAAA,OAAsB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 1080, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/app/resumes/page.tsx"],"sourcesContent":["\n'use client';\n\nimport { getResumesForUser, deleteResume, parseResumeAndSave } from '@/app/actions';\nimport { Button } from '@/components/ui/button';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport type { Resume } from '@/db/schema';\nimport { format } from 'date-fns';\nimport { ArrowLeft, Edit, Loader2, MoreHorizontal, PlusCircle, Trash2, UploadCloud, Wand2 } from 'lucide-react';\nimport { useRouter } from 'next/navigation';\nimport { useEffect, useState, useRef } from 'react';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Label } from '@/components/ui/label';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport * as pdfjs from 'pdfjs-dist';\nimport { Progress } from '@/components/ui/progress';\n\ntype ResumeWithParsedJson = Omit<\n  Resume,\n  'experiences' | 'education' | 'skills' | 'projects' | 'createdAt' | 'updatedAt'\n> & {\n  experiences: any[];\n  education: any[];\n  skills: any;\n  projects: any[];\n  createdAt: Date | null;\n  updatedAt: Date | null;\n};\n\nconst DocumentActions = ({ resume, onConfirmDelete }: { resume: ResumeWithParsedJson, onConfirmDelete: () => void }) => {\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const router = useRouter();\n  return (\n    <>\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" className=\"h-8 w-8 p-0\" onClick={(e) => e.stopPropagation()}>\n          <span className=\"sr-only\">Open menu</span>\n          <MoreHorizontal className=\"h-4 w-4\" />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" onClick={(e) => e.stopPropagation()}>\n        <DropdownMenuItem onClick={() => router.push(`/editor/${resume.id}`)}>\n          <Edit className=\"mr-2\" />\n          Edit\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setIsDeleteDialogOpen(true)} className=\"text-destructive\">\n          <Trash2 className=\"mr-2\" />\n          Delete\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n    <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n        <AlertDialogContent>\n            <AlertDialogHeader>\n            <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n            <AlertDialogDescription>\n                This action cannot be undone. This will permanently delete the resume\n                and any associated cover letters.\n            </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction onClick={onConfirmDelete}>Delete</AlertDialogAction>\n            </AlertDialogFooter>\n        </AlertDialogContent>\n    </AlertDialog>\n    </>\n  );\n}\n\n\nexport default function ResumesPage() {\n  const router = useRouter();\n  const [resumes, setResumes] = useState<ResumeWithParsedJson[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [userId, setUserId] = useState<number|null>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const storedId = localStorage.getItem('fitletter_user_id');\n    if (!storedId) {\n      router.push('/');\n      return;\n    }\n    const id = parseInt(storedId);\n    setUserId(id);\n\n    async function loadResumes() {\n      setIsLoading(true);\n      const { data, error } = await getResumesForUser(id);\n      if (error) {\n        console.error(error);\n        toast({title: \"Error\", description: error, variant: 'destructive'})\n      } else {\n        setResumes(data as ResumeWithParsedJson[]);\n      }\n      setIsLoading(false);\n    }\n    loadResumes();\n  }, [router, toast]);\n\n\n  const handleDelete = async (id: number) => {\n    const {error} = await deleteResume(id);\n     if (error) {\n        toast({title: \"Error deleting resume\", description: error, variant: 'destructive'})\n      } else {\n        toast({title: \"Success\", description: \"Resume deleted.\"})\n        setResumes(resumes.filter(r => r.id !== id));\n      }\n  };\n\n  const onResumeCreated = (newResume: Resume) => {\n      const fullyParsedResume: ResumeWithParsedJson = {\n        ...newResume,\n        createdAt: new Date(),\n        updatedAt: null,\n        experiences: JSON.parse(newResume.experiences as string),\n        education: JSON.parse(newResume.education as string),\n        skills: JSON.parse(newResume.skills as string),\n        projects: JSON.parse(newResume.projects as string),\n      }\n      setResumes([fullyParsedResume, ...resumes]);\n  }\n\n\n  return (\n    <div className=\"min-h-screen w-full bg-background/50\">\n      <main className=\"container mx-auto flex flex-col p-4 sm:p-8\">\n        <header className=\"mb-8 flex items-center justify-between\">\n           <Button variant=\"outline\" onClick={() => router.back()}>\n            <ArrowLeft className=\"mr-2\" />\n            Back\n          </Button>\n          <h1 className=\"font-headline text-3xl font-bold tracking-tight animate-fade-in-up\">\n            My Resumes\n          </h1>\n          <CreateResumeDialog onResumeCreated={onResumeCreated} userId={userId}>\n            <Button className=\"animate-fade-in-up\" style={{animationDelay: '0.2s'}}>\n                <PlusCircle className=\"mr-2\" />\n                Create New Resume\n            </Button>\n          </CreateResumeDialog>\n        </header>\n        <Card className=\"animate-fade-in-up\" style={{animationDelay: '0.3s'}}>\n          <CardHeader>\n            <CardTitle>Manage Your Resumes</CardTitle>\n            <CardDescription>\n              Here you can view, edit, and create new resumes to use in your\n              applications.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n                <div className=\"space-y-4\">\n                    <Skeleton className=\"h-10 w-full\" />\n                    <Skeleton className=\"h-10 w-full\" />\n                    <Skeleton className=\"h-10 w-full\" />\n                </div>\n            ) : (\n\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Title</TableHead>\n                  <TableHead>Summary</TableHead>\n                  <TableHead>Created</TableHead>\n                  <TableHead className=\"w-12\"></TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {resumes.length > 0 ? resumes.map((resume) => (\n                  <TableRow key={resume.id} className=\"cursor-pointer\" onClick={() => router.push(`/editor/${resume.id}`)}>\n                    <TableCell className=\"font-medium\">{resume.title}</TableCell>\n                    <TableCell className=\"max-w-xs truncate text-muted-foreground\">{resume.summary}</TableCell>\n                    <TableCell>{resume.createdAt ? format(resume.createdAt, 'PP') : 'N/A'}</TableCell>\n                    <TableCell>\n                      <DocumentActions resume={resume} onConfirmDelete={() => handleDelete(resume.id)} />\n                    </TableCell>\n                  </TableRow>\n                )) : (\n                     <TableRow>\n                        <TableCell colSpan={4} className=\"h-24 text-center\">\n                          No resumes found.\n                          <CreateResumeDialog onResumeCreated={onResumeCreated} userId={userId}>\n                            <Button variant=\"link\">Create one now</Button>\n                          </CreateResumeDialog>\n                        </TableCell>\n                    </TableRow>\n                )}\n              </TableBody>\n            </Table>\n            )}\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}\n\nconst MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB\n\n\nfunction CreateResumeDialog({ children, onResumeCreated, userId }: { children: React.ReactNode, onResumeCreated: (newResume: Resume) => void, userId: number | null }) {\n    const [isOpen, setIsOpen] = useState(false);\n    const [isParsing, setIsParsing] = useState(false);\n    const [resumeText, setResumeText] = useState('');\n    const [resumeTitle, setResumeTitle] = useState('');\n    const fileInputRef = useRef<HTMLInputElement>(null);\n    const [uploadProgress, setUploadProgress] = useState<number | null>(null);\n    const { toast } = useToast();\n\n    useEffect(() => {\n        pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.min.mjs`;\n    }, []);\n\n    const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        if (!file) return;\n\n        if (file.size > MAX_FILE_SIZE) {\n            toast({ title: 'File Too Large', description: `Please select a file smaller than ${MAX_FILE_SIZE / 1024 / 1024}MB.`, variant: 'destructive'});\n            return;\n        }\n        \n        const isPdf = file.type === 'application/pdf' || file.name.endsWith('.pdf');\n        const isTxt = file.type === 'text/plain' || file.name.endsWith('.txt');\n        const isMd = file.type === 'text/markdown' || file.name.endsWith('.md');\n\n        if (!isPdf && !isTxt && !isMd) {\n            toast({\n                title: 'Invalid File Type',\n                description: 'Please select a .pdf, .txt, or .md file.',\n                variant: 'destructive',\n            });\n            return;\n        }\n\n        setUploadProgress(0);\n        setIsParsing(true);\n\n        const reader = new FileReader();\n\n        reader.onprogress = (e) => {\n            if (e.lengthComputable) {\n                const progress = Math.round((e.loaded / e.total) * 100);\n                setUploadProgress(progress);\n            }\n        };\n\n        reader.onloadend = () => {\n            setIsParsing(false);\n            setUploadProgress(null);\n        };\n\n        reader.onerror = () => {\n            setIsParsing(false);\n            setUploadProgress(null);\n            toast({ title: 'Error reading file', description: 'There was an issue reading your file.', variant: 'destructive'})\n        }\n\n        if (isPdf) {\n            reader.onload = async (e) => {\n              if (e.target?.result) {\n                try {\n                  const typedArray = new Uint8Array(e.target.result as ArrayBuffer);\n                  const pdf = await pdfjs.getDocument(typedArray).promise;\n                  let fullText = '';\n                  for (let i = 1; i <= pdf.numPages; i++) {\n                    const page = await pdf.getPage(i);\n                    const textContent = await page.getTextContent();\n                    const pageText = textContent.items.map(item => 'str' in item ? item.str : '').join(' ');\n                    fullText += pageText + '\\n\\n';\n                  }\n                  setResumeText(fullText.trim());\n                  toast({ title: 'PDF loaded!', description: 'The content of your PDF resume has been loaded.' });\n                } catch (error) {\n                     console.error(\"PDF parsing error: \", error);\n                     toast({ title: 'Error reading PDF', description: \"Could not parse the PDF file. Please ensure it's a valid, text-based PDF.\", variant: 'destructive'})\n                     setResumeText('');\n                }\n              }\n            };\n            reader.readAsArrayBuffer(file);\n        } else {\n            reader.onload = (e) => {\n                const text = e.target?.result as string;\n                setResumeText(text);\n                toast({ title: 'File loaded!', description: 'The content of your file has been loaded.' });\n            };\n            reader.readAsText(file);\n        }\n    }\n\n\n    const handleParse = async () => {\n        if (!resumeText || !resumeTitle) {\n            toast({ title: \"Missing info\", description: \"Please provide a title and your resume content.\", variant: \"destructive\"});\n            return;\n        }\n         if (!userId) {\n            toast({ title: \"User not found\", description: \"You must be logged in to create a resume.\", variant: \"destructive\"});\n            return;\n        }\n        setIsParsing(true);\n        const { data, error } = await parseResumeAndSave({ resumeText, title: resumeTitle, userId });\n        if (data) {\n            toast({ title: \"Resume Created!\", description: \"Your new resume has been saved.\" });\n            onResumeCreated(data);\n            setResumeText('');\n            setResumeTitle('');\n            setIsOpen(false);\n        } else {\n            toast({ title: \"Parsing Failed\", description: error, variant: \"destructive\" });\n        }\n        setIsParsing(false);\n    }\n    \n    return (\n        <Dialog open={isOpen} onOpenChange={setIsOpen}>\n            <DialogTrigger asChild>{children}</DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n                <DialogHeader>\n                    <DialogTitle>Create a New Resume</DialogTitle>\n                    <DialogDescription>\n                        Provide a title and paste your resume content below. We'll parse it into a structured format.\n                    </DialogDescription>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                    <div className=\"grid gap-2\">\n                        <Label htmlFor=\"new-resume-title\">Resume Title</Label>\n                        <Input id=\"new-resume-title\" placeholder=\"e.g. My Product Manager Resume\" value={resumeTitle} onChange={e => setResumeTitle(e.target.value)} />\n                    </div>\n                    <div className=\"grid gap-2\">\n                        <Label htmlFor=\"new-resume-text\">Resume Content</Label>\n                        <Textarea id=\"new-resume-text\" placeholder=\"Paste your full resume content here...\" className=\"min-h-64\" value={resumeText} onChange={(e) => setResumeText(e.target.value)} />\n                    </div>\n                    <div className=\"text-center space-y-2\">\n                        <input type=\"file\" ref={fileInputRef} onChange={handleFileChange} accept=\".pdf,.txt,.md\" className=\"hidden\" />\n                        <Button variant=\"outline\" onClick={() => fileInputRef.current?.click()} disabled={isParsing}>\n                            {isParsing && uploadProgress === null ? <Loader2 className=\"mr-2 animate-spin\"/> : <UploadCloud className=\"mr-2\"/>}\n                            Upload from File\n                        </Button>\n                         {uploadProgress !== null && <Progress value={uploadProgress} className=\"mt-4\" />}\n                    </div>\n                </div>\n                 <DialogFooter>\n                    <Button variant=\"outline\" onClick={() => setIsOpen(false)}>Cancel</Button>\n                    <Button onClick={handleParse} disabled={isParsing || !resumeText}>\n                        {isParsing ? <Loader2 className=\"mr-2 animate-spin\"/> : <Wand2 className=\"mr-2\" />}\n                        Parse and Save Resume\n                    </Button>\n                </DialogFooter>\n            </DialogContent>\n        </Dialog>\n    )\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}