{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport {\n  optimizeResumeForAts,\n  OptimizeResumeForAtsInput,\n  OptimizeResumeForAtsOutput,\n} from '@/ai/flows/ats-resume-optimization';\nimport {\n  rewriteForImpact,\n  RewriteForImpactInput,\n} from '@/ai/flows/impactful-rewrite';\nimport {\n  resumeFlawSpotter,\n  ResumeFlawSpotterInput,\n} from '@/ai/flows/resume-flaw-spotter';\nimport {\n  tailoredCoverLetter,\n  TailoredCoverLetterInput,\n  TailoredCoverLetterOutput,\n} from '@/ai/flows/tailored-cover-letter';\nimport { parseResume, ParseResumeInput, ParseResumeOutput } from '@/ai/flows/parse-resume';\nimport { autofillJobDetails, AutofillJobDetailsInput, AutofillJobDetailsOutput } from '@/ai/flows/autofill-job-details';\nimport { db } from '@/db';\nimport { revalidatePath } from 'next/cache';\nimport { requireAuth } from '@/lib/auth';\n\nconst handleError = (error: unknown, defaultMessage: string) => {\n  console.error(error);\n  if (error instanceof Error) {\n    return { error: error.message };\n  }\n  return { error: defaultMessage };\n};\n\nexport async function generateAtsOptimizedResume(\n  input: OptimizeResumeForAtsInput\n): Promise<{ data: OptimizeResumeForAtsOutput | null; error?: string }> {\n  try {\n    const result = await optimizeResumeForAts(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to optimize resume for ATS.');\n  }\n}\n\nexport async function generateTailoredCoverLetter(\n  input: TailoredCoverLetterInput\n): Promise<{ data: TailoredCoverLetterOutput | null; error?: string }> {\n  try {\n    const result = await tailoredCoverLetter(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to generate cover letter.');\n  }\n}\n\nexport async function generateImpactfulRewrite(input: RewriteForImpactInput) {\n  try {\n    const result = await rewriteForImpact(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to rewrite resume section.');\n  }\n}\n\nexport async function findResumeFlaws(input: ResumeFlawSpotterInput) {\n  try {\n    const result = await resumeFlawSpotter(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to spot resume flaws.');\n  }\n}\n\nexport async function getResumesForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('resumes')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch resumes.');\n\n    const parsedResumes = (data || []).map((r: any) => {\n      try {\n        return {\n          id: r.id,\n          title: r.title,\n          name: r.name,\n          phone: r.phone,\n          email: r.email,\n          linkedinUrl: r.linkedin_url,\n          portfolioUrl: r.portfolio_url,\n          summary: r.summary,\n          skills: typeof r.skills === 'string' ? JSON.parse(r.skills) : r.skills,\n          experiences: typeof r.experiences === 'string' ? JSON.parse(r.experiences) : r.experiences,\n          projects: typeof r.projects === 'string' ? JSON.parse(r.projects) : r.projects,\n          education: typeof r.education === 'string' ? JSON.parse(r.education) : r.education,\n          userId: r.user_id,\n          createdAt: new Date((r.created_at as number) * 1000),\n          updatedAt: r.updated_at ? new Date((r.updated_at as number) * 1000) : null,\n        };\n      } catch (e) {\n        console.error('Failed to parse resume data', e);\n        return {\n          id: r.id,\n          title: r.title,\n          name: r.name,\n          phone: r.phone,\n          email: r.email,\n          linkedinUrl: r.linkedin_url,\n          portfolioUrl: r.portfolio_url,\n          summary: r.summary,\n          skills: [],\n          experiences: [],\n          projects: [],\n          education: [],\n          userId: r.user_id,\n          createdAt: new Date((r.created_at as number) * 1000),\n          updatedAt: r.updated_at ? new Date((r.updated_at as number) * 1000) : null,\n        };\n      }\n    });\n\n    return { data: parsedResumes };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch resumes.');\n  }\n}\n\nexport async function saveLetter({\n  jobTitle,\n  company,\n  jobDesc,\n  content,\n  tone,\n  atsScore,\n  resumeId,\n  userId,\n}: {\n  jobTitle: string;\n  company: string;\n  jobDesc: string;\n  content: string;\n  tone: string;\n  atsScore: number;\n  resumeId: number;\n  userId?: number;\n}) {\n  const { user } = await requireAuth();\n\n  try {\n    const { data, error } = await db\n      .from('letters')\n      .insert({\n        job_title: jobTitle,\n        company,\n        job_desc: jobDesc,\n        content,\n        tone,\n        ats_score: atsScore,\n        user_id: user.id,\n        resume_id: resumeId,\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to save cover letter.');\n\n    revalidatePath('/dashboard');\n    const mapped = data && {\n      id: data.id,\n      jobTitle: data.job_title,\n      company: data.company,\n      jobDesc: data.job_desc,\n      content: data.content,\n      tone: data.tone,\n      atsScore: data.ats_score,\n      userId: data.user_id,\n      resumeId: data.resume_id,\n      createdAt: new Date((data.created_at as number) * 1000),\n    };\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to save cover letter.');\n  }\n}\n\nexport async function getApplicationsForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('applications')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch applications');\n\n    const mapped = (data || []).map((a: any) => ({\n      id: a.id,\n      jobTitle: a.job_title,\n      company: a.company,\n      status: a.status,\n      url: a.url,\n      requirements: a.requirements,\n      deadline: a.deadline ?? null,\n      userId: a.user_id,\n      createdAt: a.created_at as number,\n    }));\n\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch applications');\n  }\n}\n\nexport async function addApplication(application: {\n  jobTitle: string;\n  company: string;\n  status: string;\n  url?: string;\n  requirements?: string;\n  userId?: number;\n}) {\n  const { user } = await requireAuth();\n\n  try {\n    const { data, error } = await db\n      .from('applications')\n      .insert({\n        job_title: application.jobTitle,\n        company: application.company,\n        status: application.status,\n        url: application.url,\n        requirements: application.requirements,\n        user_id: user.id,\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to add application');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    const mapped = data && ({\n      id: data.id,\n      jobTitle: data.job_title,\n      company: data.company,\n      status: data.status,\n      url: data.url,\n      requirements: data.requirements,\n      deadline: data.deadline ?? null,\n      userId: data.user_id,\n      createdAt: data.created_at as number,\n    });\n    return { data: mapped as any };\n  } catch(error) {\n    return handleError(error, 'Failed to add application');\n  }\n}\n\nexport async function updateApplicationStatus(id: number, status: string) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('applications')\n      .update({ status })\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to update application status');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch (error) {\n    return handleError(error, 'Failed to update application status');\n  }\n}\n\nexport async function parseResumeAndSave(input: ParseResumeInput & { title: string; userId?: number }) {\n  const { user } = await requireAuth();\n\n  try {\n    const parsedData = await parseResume(input);\n\n    const { data, error } = await db\n      .from('resumes')\n      .insert({\n        user_id: user.id,\n        title: input.title,\n        name: parsedData.name,\n        phone: parsedData.phone,\n        email: parsedData.email,\n        linkedin_url: parsedData.linkedinUrl,\n        portfolio_url: parsedData.portfolioUrl,\n        summary: parsedData.summary,\n        skills: JSON.stringify(parsedData.skills),\n        experiences: JSON.stringify(parsedData.experiences),\n        projects: JSON.stringify(parsedData.projects),\n        education: JSON.stringify(parsedData.education),\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to parse and save resume.');\n\n    revalidatePath('/resumes');\n    const mapped = data && ({\n      id: data.id,\n      title: data.title,\n      name: data.name,\n      phone: data.phone,\n      email: data.email,\n      linkedinUrl: data.linkedin_url,\n      portfolioUrl: data.portfolio_url,\n      summary: data.summary,\n      skills: data.skills,\n      experiences: data.experiences,\n      projects: data.projects,\n      education: data.education,\n      userId: data.user_id,\n      createdAt: data.created_at as number,\n      updatedAt: data.updated_at ?? null,\n    });\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to parse and save resume.');\n  }\n}\n\nexport async function deleteResume(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('resumes')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete resume.');\n\n    revalidatePath('/resumes');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete resume.')\n  }\n}\n\n\nexport async function deleteLetter(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('letters')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete letter.');\n\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete letter.')\n  }\n}\n\nexport async function deleteUserAccount() {\n  const { user } = await requireAuth();\n\n  try {\n    await db.from('letters').delete().eq('user_id', user.id);\n    await db.from('applications').delete().eq('user_id', user.id);\n    await db.from('resumes').delete().eq('user_id', user.id);\n    await db.from('users').delete().eq('id', user.id);\n\n    revalidatePath('/');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete account.');\n  }\n}\n\nexport async function getLettersForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('letters')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch letters.');\n\n    const parsedLetters = (data || []).map((l: any) => ({\n      id: l.id,\n      jobTitle: l.job_title,\n      company: l.company,\n      jobDesc: l.job_desc,\n      content: l.content,\n      tone: l.tone,\n      atsScore: l.ats_score,\n      userId: l.user_id,\n      resumeId: l.resume_id,\n      createdAt: new Date((l.created_at as number) * 1000),\n    }));\n\n    return { data: parsedLetters };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch letters.');\n  }\n}\n\nexport async function deleteApplication(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('applications')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete application.');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch (e) {\n    return handleError(e, 'Failed to delete application.');\n  }\n}\n\n\nexport async function autofillJobDetailsAction(input: AutofillJobDetailsInput): Promise<{data: AutofillJobDetailsOutput | null; error?: string}> {\n    try {\n        const result = await autofillJobDetails(input);\n        return { data: result };\n    } catch(e) {\n        return handleError(e, 'Failed to autofill job details.');\n    }\n}\n\nexport async function updateResume(resume: ParseResumeOutput & { id: number, title: string }) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('resumes')\n      .update({\n        title: resume.title,\n        name: resume.name,\n        phone: resume.phone,\n        email: resume.email,\n        linkedin_url: resume.linkedinUrl,\n        portfolio_url: resume.portfolioUrl,\n        summary: resume.summary,\n        skills: typeof resume.skills === 'string' ? resume.skills : JSON.stringify(resume.skills),\n        experiences: typeof resume.experiences === 'string' ? resume.experiences : JSON.stringify(resume.experiences),\n        projects: typeof resume.projects === 'string' ? resume.projects : JSON.stringify(resume.projects),\n        education: typeof resume.education === 'string' ? resume.education : JSON.stringify(resume.education),\n        updated_at: Math.floor(Date.now() / 1000),\n      })\n      .eq('id', resume.id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to update resume.');\n\n    revalidatePath('/resumes');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to update resume.');\n  }\n}\n"],"names":[],"mappings":";;;;;;IA2EsB,oBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport {\n  optimizeResumeForAts,\n  OptimizeResumeForAtsInput,\n  OptimizeResumeForAtsOutput,\n} from '@/ai/flows/ats-resume-optimization';\nimport {\n  rewriteForImpact,\n  RewriteForImpactInput,\n} from '@/ai/flows/impactful-rewrite';\nimport {\n  resumeFlawSpotter,\n  ResumeFlawSpotterInput,\n} from '@/ai/flows/resume-flaw-spotter';\nimport {\n  tailoredCoverLetter,\n  TailoredCoverLetterInput,\n  TailoredCoverLetterOutput,\n} from '@/ai/flows/tailored-cover-letter';\nimport { parseResume, ParseResumeInput, ParseResumeOutput } from '@/ai/flows/parse-resume';\nimport { autofillJobDetails, AutofillJobDetailsInput, AutofillJobDetailsOutput } from '@/ai/flows/autofill-job-details';\nimport { db } from '@/db';\nimport { revalidatePath } from 'next/cache';\nimport { requireAuth } from '@/lib/auth';\n\nconst handleError = (error: unknown, defaultMessage: string) => {\n  console.error(error);\n  if (error instanceof Error) {\n    return { error: error.message };\n  }\n  return { error: defaultMessage };\n};\n\nexport async function generateAtsOptimizedResume(\n  input: OptimizeResumeForAtsInput\n): Promise<{ data: OptimizeResumeForAtsOutput | null; error?: string }> {\n  try {\n    const result = await optimizeResumeForAts(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to optimize resume for ATS.');\n  }\n}\n\nexport async function generateTailoredCoverLetter(\n  input: TailoredCoverLetterInput\n): Promise<{ data: TailoredCoverLetterOutput | null; error?: string }> {\n  try {\n    const result = await tailoredCoverLetter(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to generate cover letter.');\n  }\n}\n\nexport async function generateImpactfulRewrite(input: RewriteForImpactInput) {\n  try {\n    const result = await rewriteForImpact(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to rewrite resume section.');\n  }\n}\n\nexport async function findResumeFlaws(input: ResumeFlawSpotterInput) {\n  try {\n    const result = await resumeFlawSpotter(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to spot resume flaws.');\n  }\n}\n\nexport async function getResumesForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('resumes')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch resumes.');\n\n    const parsedResumes = (data || []).map((r: any) => {\n      try {\n        return {\n          id: r.id,\n          title: r.title,\n          name: r.name,\n          phone: r.phone,\n          email: r.email,\n          linkedinUrl: r.linkedin_url,\n          portfolioUrl: r.portfolio_url,\n          summary: r.summary,\n          skills: typeof r.skills === 'string' ? JSON.parse(r.skills) : r.skills,\n          experiences: typeof r.experiences === 'string' ? JSON.parse(r.experiences) : r.experiences,\n          projects: typeof r.projects === 'string' ? JSON.parse(r.projects) : r.projects,\n          education: typeof r.education === 'string' ? JSON.parse(r.education) : r.education,\n          userId: r.user_id,\n          createdAt: new Date((r.created_at as number) * 1000),\n          updatedAt: r.updated_at ? new Date((r.updated_at as number) * 1000) : null,\n        };\n      } catch (e) {\n        console.error('Failed to parse resume data', e);\n        return {\n          id: r.id,\n          title: r.title,\n          name: r.name,\n          phone: r.phone,\n          email: r.email,\n          linkedinUrl: r.linkedin_url,\n          portfolioUrl: r.portfolio_url,\n          summary: r.summary,\n          skills: [],\n          experiences: [],\n          projects: [],\n          education: [],\n          userId: r.user_id,\n          createdAt: new Date((r.created_at as number) * 1000),\n          updatedAt: r.updated_at ? new Date((r.updated_at as number) * 1000) : null,\n        };\n      }\n    });\n\n    return { data: parsedResumes };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch resumes.');\n  }\n}\n\nexport async function saveLetter({\n  jobTitle,\n  company,\n  jobDesc,\n  content,\n  tone,\n  atsScore,\n  resumeId,\n  userId,\n}: {\n  jobTitle: string;\n  company: string;\n  jobDesc: string;\n  content: string;\n  tone: string;\n  atsScore: number;\n  resumeId: number;\n  userId?: number;\n}) {\n  const { user } = await requireAuth();\n\n  try {\n    const { data, error } = await db\n      .from('letters')\n      .insert({\n        job_title: jobTitle,\n        company,\n        job_desc: jobDesc,\n        content,\n        tone,\n        ats_score: atsScore,\n        user_id: user.id,\n        resume_id: resumeId,\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to save cover letter.');\n\n    revalidatePath('/dashboard');\n    const mapped = data && {\n      id: data.id,\n      jobTitle: data.job_title,\n      company: data.company,\n      jobDesc: data.job_desc,\n      content: data.content,\n      tone: data.tone,\n      atsScore: data.ats_score,\n      userId: data.user_id,\n      resumeId: data.resume_id,\n      createdAt: new Date((data.created_at as number) * 1000),\n    };\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to save cover letter.');\n  }\n}\n\nexport async function getApplicationsForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('applications')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch applications');\n\n    const mapped = (data || []).map((a: any) => ({\n      id: a.id,\n      jobTitle: a.job_title,\n      company: a.company,\n      status: a.status,\n      url: a.url,\n      requirements: a.requirements,\n      deadline: a.deadline ?? null,\n      userId: a.user_id,\n      createdAt: a.created_at as number,\n    }));\n\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch applications');\n  }\n}\n\nexport async function addApplication(application: {\n  jobTitle: string;\n  company: string;\n  status: string;\n  url?: string;\n  requirements?: string;\n  userId?: number;\n}) {\n  const { user } = await requireAuth();\n\n  try {\n    const { data, error } = await db\n      .from('applications')\n      .insert({\n        job_title: application.jobTitle,\n        company: application.company,\n        status: application.status,\n        url: application.url,\n        requirements: application.requirements,\n        user_id: user.id,\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to add application');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    const mapped = data && ({\n      id: data.id,\n      jobTitle: data.job_title,\n      company: data.company,\n      status: data.status,\n      url: data.url,\n      requirements: data.requirements,\n      deadline: data.deadline ?? null,\n      userId: data.user_id,\n      createdAt: data.created_at as number,\n    });\n    return { data: mapped as any };\n  } catch(error) {\n    return handleError(error, 'Failed to add application');\n  }\n}\n\nexport async function updateApplicationStatus(id: number, status: string) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('applications')\n      .update({ status })\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to update application status');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch (error) {\n    return handleError(error, 'Failed to update application status');\n  }\n}\n\nexport async function parseResumeAndSave(input: ParseResumeInput & { title: string; userId?: number }) {\n  const { user } = await requireAuth();\n\n  try {\n    const parsedData = await parseResume(input);\n\n    const { data, error } = await db\n      .from('resumes')\n      .insert({\n        user_id: user.id,\n        title: input.title,\n        name: parsedData.name,\n        phone: parsedData.phone,\n        email: parsedData.email,\n        linkedin_url: parsedData.linkedinUrl,\n        portfolio_url: parsedData.portfolioUrl,\n        summary: parsedData.summary,\n        skills: JSON.stringify(parsedData.skills),\n        experiences: JSON.stringify(parsedData.experiences),\n        projects: JSON.stringify(parsedData.projects),\n        education: JSON.stringify(parsedData.education),\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to parse and save resume.');\n\n    revalidatePath('/resumes');\n    const mapped = data && ({\n      id: data.id,\n      title: data.title,\n      name: data.name,\n      phone: data.phone,\n      email: data.email,\n      linkedinUrl: data.linkedin_url,\n      portfolioUrl: data.portfolio_url,\n      summary: data.summary,\n      skills: data.skills,\n      experiences: data.experiences,\n      projects: data.projects,\n      education: data.education,\n      userId: data.user_id,\n      createdAt: data.created_at as number,\n      updatedAt: data.updated_at ?? null,\n    });\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to parse and save resume.');\n  }\n}\n\nexport async function deleteResume(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('resumes')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete resume.');\n\n    revalidatePath('/resumes');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete resume.')\n  }\n}\n\n\nexport async function deleteLetter(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('letters')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete letter.');\n\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete letter.')\n  }\n}\n\nexport async function deleteUserAccount() {\n  const { user } = await requireAuth();\n\n  try {\n    await db.from('letters').delete().eq('user_id', user.id);\n    await db.from('applications').delete().eq('user_id', user.id);\n    await db.from('resumes').delete().eq('user_id', user.id);\n    await db.from('users').delete().eq('id', user.id);\n\n    revalidatePath('/');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete account.');\n  }\n}\n\nexport async function getLettersForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('letters')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch letters.');\n\n    const parsedLetters = (data || []).map((l: any) => ({\n      id: l.id,\n      jobTitle: l.job_title,\n      company: l.company,\n      jobDesc: l.job_desc,\n      content: l.content,\n      tone: l.tone,\n      atsScore: l.ats_score,\n      userId: l.user_id,\n      resumeId: l.resume_id,\n      createdAt: new Date((l.created_at as number) * 1000),\n    }));\n\n    return { data: parsedLetters };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch letters.');\n  }\n}\n\nexport async function deleteApplication(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('applications')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete application.');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch (e) {\n    return handleError(e, 'Failed to delete application.');\n  }\n}\n\n\nexport async function autofillJobDetailsAction(input: AutofillJobDetailsInput): Promise<{data: AutofillJobDetailsOutput | null; error?: string}> {\n    try {\n        const result = await autofillJobDetails(input);\n        return { data: result };\n    } catch(e) {\n        return handleError(e, 'Failed to autofill job details.');\n    }\n}\n\nexport async function updateResume(resume: ParseResumeOutput & { id: number, title: string }) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('resumes')\n      .update({\n        title: resume.title,\n        name: resume.name,\n        phone: resume.phone,\n        email: resume.email,\n        linkedin_url: resume.linkedinUrl,\n        portfolio_url: resume.portfolioUrl,\n        summary: resume.summary,\n        skills: typeof resume.skills === 'string' ? resume.skills : JSON.stringify(resume.skills),\n        experiences: typeof resume.experiences === 'string' ? resume.experiences : JSON.stringify(resume.experiences),\n        projects: typeof resume.projects === 'string' ? resume.projects : JSON.stringify(resume.projects),\n        education: typeof resume.education === 'string' ? resume.education : JSON.stringify(resume.education),\n        updated_at: Math.floor(Date.now() / 1000),\n      })\n      .eq('id', resume.id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to update resume.');\n\n    revalidatePath('/resumes');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to update resume.');\n  }\n}\n"],"names":[],"mappings":";;;;;;IA8CsB,8BAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport {\n  optimizeResumeForAts,\n  OptimizeResumeForAtsInput,\n  OptimizeResumeForAtsOutput,\n} from '@/ai/flows/ats-resume-optimization';\nimport {\n  rewriteForImpact,\n  RewriteForImpactInput,\n} from '@/ai/flows/impactful-rewrite';\nimport {\n  resumeFlawSpotter,\n  ResumeFlawSpotterInput,\n} from '@/ai/flows/resume-flaw-spotter';\nimport {\n  tailoredCoverLetter,\n  TailoredCoverLetterInput,\n  TailoredCoverLetterOutput,\n} from '@/ai/flows/tailored-cover-letter';\nimport { parseResume, ParseResumeInput, ParseResumeOutput } from '@/ai/flows/parse-resume';\nimport { autofillJobDetails, AutofillJobDetailsInput, AutofillJobDetailsOutput } from '@/ai/flows/autofill-job-details';\nimport { db } from '@/db';\nimport { revalidatePath } from 'next/cache';\nimport { requireAuth } from '@/lib/auth';\n\nconst handleError = (error: unknown, defaultMessage: string) => {\n  console.error(error);\n  if (error instanceof Error) {\n    return { error: error.message };\n  }\n  return { error: defaultMessage };\n};\n\nexport async function generateAtsOptimizedResume(\n  input: OptimizeResumeForAtsInput\n): Promise<{ data: OptimizeResumeForAtsOutput | null; error?: string }> {\n  try {\n    const result = await optimizeResumeForAts(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to optimize resume for ATS.');\n  }\n}\n\nexport async function generateTailoredCoverLetter(\n  input: TailoredCoverLetterInput\n): Promise<{ data: TailoredCoverLetterOutput | null; error?: string }> {\n  try {\n    const result = await tailoredCoverLetter(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to generate cover letter.');\n  }\n}\n\nexport async function generateImpactfulRewrite(input: RewriteForImpactInput) {\n  try {\n    const result = await rewriteForImpact(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to rewrite resume section.');\n  }\n}\n\nexport async function findResumeFlaws(input: ResumeFlawSpotterInput) {\n  try {\n    const result = await resumeFlawSpotter(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to spot resume flaws.');\n  }\n}\n\nexport async function getResumesForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('resumes')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch resumes.');\n\n    const parsedResumes = (data || []).map((r: any) => {\n      try {\n        return {\n          id: r.id,\n          title: r.title,\n          name: r.name,\n          phone: r.phone,\n          email: r.email,\n          linkedinUrl: r.linkedin_url,\n          portfolioUrl: r.portfolio_url,\n          summary: r.summary,\n          skills: typeof r.skills === 'string' ? JSON.parse(r.skills) : r.skills,\n          experiences: typeof r.experiences === 'string' ? JSON.parse(r.experiences) : r.experiences,\n          projects: typeof r.projects === 'string' ? JSON.parse(r.projects) : r.projects,\n          education: typeof r.education === 'string' ? JSON.parse(r.education) : r.education,\n          userId: r.user_id,\n          createdAt: new Date((r.created_at as number) * 1000),\n          updatedAt: r.updated_at ? new Date((r.updated_at as number) * 1000) : null,\n        };\n      } catch (e) {\n        console.error('Failed to parse resume data', e);\n        return {\n          id: r.id,\n          title: r.title,\n          name: r.name,\n          phone: r.phone,\n          email: r.email,\n          linkedinUrl: r.linkedin_url,\n          portfolioUrl: r.portfolio_url,\n          summary: r.summary,\n          skills: [],\n          experiences: [],\n          projects: [],\n          education: [],\n          userId: r.user_id,\n          createdAt: new Date((r.created_at as number) * 1000),\n          updatedAt: r.updated_at ? new Date((r.updated_at as number) * 1000) : null,\n        };\n      }\n    });\n\n    return { data: parsedResumes };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch resumes.');\n  }\n}\n\nexport async function saveLetter({\n  jobTitle,\n  company,\n  jobDesc,\n  content,\n  tone,\n  atsScore,\n  resumeId,\n  userId,\n}: {\n  jobTitle: string;\n  company: string;\n  jobDesc: string;\n  content: string;\n  tone: string;\n  atsScore: number;\n  resumeId: number;\n  userId?: number;\n}) {\n  const { user } = await requireAuth();\n\n  try {\n    const { data, error } = await db\n      .from('letters')\n      .insert({\n        job_title: jobTitle,\n        company,\n        job_desc: jobDesc,\n        content,\n        tone,\n        ats_score: atsScore,\n        user_id: user.id,\n        resume_id: resumeId,\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to save cover letter.');\n\n    revalidatePath('/dashboard');\n    const mapped = data && {\n      id: data.id,\n      jobTitle: data.job_title,\n      company: data.company,\n      jobDesc: data.job_desc,\n      content: data.content,\n      tone: data.tone,\n      atsScore: data.ats_score,\n      userId: data.user_id,\n      resumeId: data.resume_id,\n      createdAt: new Date((data.created_at as number) * 1000),\n    };\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to save cover letter.');\n  }\n}\n\nexport async function getApplicationsForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('applications')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch applications');\n\n    const mapped = (data || []).map((a: any) => ({\n      id: a.id,\n      jobTitle: a.job_title,\n      company: a.company,\n      status: a.status,\n      url: a.url,\n      requirements: a.requirements,\n      deadline: a.deadline ?? null,\n      userId: a.user_id,\n      createdAt: a.created_at as number,\n    }));\n\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch applications');\n  }\n}\n\nexport async function addApplication(application: {\n  jobTitle: string;\n  company: string;\n  status: string;\n  url?: string;\n  requirements?: string;\n  userId?: number;\n}) {\n  const { user } = await requireAuth();\n\n  try {\n    const { data, error } = await db\n      .from('applications')\n      .insert({\n        job_title: application.jobTitle,\n        company: application.company,\n        status: application.status,\n        url: application.url,\n        requirements: application.requirements,\n        user_id: user.id,\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to add application');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    const mapped = data && ({\n      id: data.id,\n      jobTitle: data.job_title,\n      company: data.company,\n      status: data.status,\n      url: data.url,\n      requirements: data.requirements,\n      deadline: data.deadline ?? null,\n      userId: data.user_id,\n      createdAt: data.created_at as number,\n    });\n    return { data: mapped as any };\n  } catch(error) {\n    return handleError(error, 'Failed to add application');\n  }\n}\n\nexport async function updateApplicationStatus(id: number, status: string) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('applications')\n      .update({ status })\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to update application status');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch (error) {\n    return handleError(error, 'Failed to update application status');\n  }\n}\n\nexport async function parseResumeAndSave(input: ParseResumeInput & { title: string; userId?: number }) {\n  const { user } = await requireAuth();\n\n  try {\n    const parsedData = await parseResume(input);\n\n    const { data, error } = await db\n      .from('resumes')\n      .insert({\n        user_id: user.id,\n        title: input.title,\n        name: parsedData.name,\n        phone: parsedData.phone,\n        email: parsedData.email,\n        linkedin_url: parsedData.linkedinUrl,\n        portfolio_url: parsedData.portfolioUrl,\n        summary: parsedData.summary,\n        skills: JSON.stringify(parsedData.skills),\n        experiences: JSON.stringify(parsedData.experiences),\n        projects: JSON.stringify(parsedData.projects),\n        education: JSON.stringify(parsedData.education),\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to parse and save resume.');\n\n    revalidatePath('/resumes');\n    const mapped = data && ({\n      id: data.id,\n      title: data.title,\n      name: data.name,\n      phone: data.phone,\n      email: data.email,\n      linkedinUrl: data.linkedin_url,\n      portfolioUrl: data.portfolio_url,\n      summary: data.summary,\n      skills: data.skills,\n      experiences: data.experiences,\n      projects: data.projects,\n      education: data.education,\n      userId: data.user_id,\n      createdAt: data.created_at as number,\n      updatedAt: data.updated_at ?? null,\n    });\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to parse and save resume.');\n  }\n}\n\nexport async function deleteResume(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('resumes')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete resume.');\n\n    revalidatePath('/resumes');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete resume.')\n  }\n}\n\n\nexport async function deleteLetter(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('letters')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete letter.');\n\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete letter.')\n  }\n}\n\nexport async function deleteUserAccount() {\n  const { user } = await requireAuth();\n\n  try {\n    await db.from('letters').delete().eq('user_id', user.id);\n    await db.from('applications').delete().eq('user_id', user.id);\n    await db.from('resumes').delete().eq('user_id', user.id);\n    await db.from('users').delete().eq('id', user.id);\n\n    revalidatePath('/');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete account.');\n  }\n}\n\nexport async function getLettersForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('letters')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch letters.');\n\n    const parsedLetters = (data || []).map((l: any) => ({\n      id: l.id,\n      jobTitle: l.job_title,\n      company: l.company,\n      jobDesc: l.job_desc,\n      content: l.content,\n      tone: l.tone,\n      atsScore: l.ats_score,\n      userId: l.user_id,\n      resumeId: l.resume_id,\n      createdAt: new Date((l.created_at as number) * 1000),\n    }));\n\n    return { data: parsedLetters };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch letters.');\n  }\n}\n\nexport async function deleteApplication(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('applications')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete application.');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch (e) {\n    return handleError(e, 'Failed to delete application.');\n  }\n}\n\n\nexport async function autofillJobDetailsAction(input: AutofillJobDetailsInput): Promise<{data: AutofillJobDetailsOutput | null; error?: string}> {\n    try {\n        const result = await autofillJobDetails(input);\n        return { data: result };\n    } catch(e) {\n        return handleError(e, 'Failed to autofill job details.');\n    }\n}\n\nexport async function updateResume(resume: ParseResumeOutput & { id: number, title: string }) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('resumes')\n      .update({\n        title: resume.title,\n        name: resume.name,\n        phone: resume.phone,\n        email: resume.email,\n        linkedin_url: resume.linkedinUrl,\n        portfolio_url: resume.portfolioUrl,\n        summary: resume.summary,\n        skills: typeof resume.skills === 'string' ? resume.skills : JSON.stringify(resume.skills),\n        experiences: typeof resume.experiences === 'string' ? resume.experiences : JSON.stringify(resume.experiences),\n        projects: typeof resume.projects === 'string' ? resume.projects : JSON.stringify(resume.projects),\n        education: typeof resume.education === 'string' ? resume.education : JSON.stringify(resume.education),\n        updated_at: Math.floor(Date.now() / 1000),\n      })\n      .eq('id', resume.id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to update resume.');\n\n    revalidatePath('/resumes');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to update resume.');\n  }\n}\n"],"names":[],"mappings":";;;;;;IAmCsB,6BAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport {\n  optimizeResumeForAts,\n  OptimizeResumeForAtsInput,\n  OptimizeResumeForAtsOutput,\n} from '@/ai/flows/ats-resume-optimization';\nimport {\n  rewriteForImpact,\n  RewriteForImpactInput,\n} from '@/ai/flows/impactful-rewrite';\nimport {\n  resumeFlawSpotter,\n  ResumeFlawSpotterInput,\n} from '@/ai/flows/resume-flaw-spotter';\nimport {\n  tailoredCoverLetter,\n  TailoredCoverLetterInput,\n  TailoredCoverLetterOutput,\n} from '@/ai/flows/tailored-cover-letter';\nimport { parseResume, ParseResumeInput, ParseResumeOutput } from '@/ai/flows/parse-resume';\nimport { autofillJobDetails, AutofillJobDetailsInput, AutofillJobDetailsOutput } from '@/ai/flows/autofill-job-details';\nimport { db } from '@/db';\nimport { revalidatePath } from 'next/cache';\nimport { requireAuth } from '@/lib/auth';\n\nconst handleError = (error: unknown, defaultMessage: string) => {\n  console.error(error);\n  if (error instanceof Error) {\n    return { error: error.message };\n  }\n  return { error: defaultMessage };\n};\n\nexport async function generateAtsOptimizedResume(\n  input: OptimizeResumeForAtsInput\n): Promise<{ data: OptimizeResumeForAtsOutput | null; error?: string }> {\n  try {\n    const result = await optimizeResumeForAts(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to optimize resume for ATS.');\n  }\n}\n\nexport async function generateTailoredCoverLetter(\n  input: TailoredCoverLetterInput\n): Promise<{ data: TailoredCoverLetterOutput | null; error?: string }> {\n  try {\n    const result = await tailoredCoverLetter(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to generate cover letter.');\n  }\n}\n\nexport async function generateImpactfulRewrite(input: RewriteForImpactInput) {\n  try {\n    const result = await rewriteForImpact(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to rewrite resume section.');\n  }\n}\n\nexport async function findResumeFlaws(input: ResumeFlawSpotterInput) {\n  try {\n    const result = await resumeFlawSpotter(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to spot resume flaws.');\n  }\n}\n\nexport async function getResumesForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('resumes')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch resumes.');\n\n    const parsedResumes = (data || []).map((r: any) => {\n      try {\n        return {\n          id: r.id,\n          title: r.title,\n          name: r.name,\n          phone: r.phone,\n          email: r.email,\n          linkedinUrl: r.linkedin_url,\n          portfolioUrl: r.portfolio_url,\n          summary: r.summary,\n          skills: typeof r.skills === 'string' ? JSON.parse(r.skills) : r.skills,\n          experiences: typeof r.experiences === 'string' ? JSON.parse(r.experiences) : r.experiences,\n          projects: typeof r.projects === 'string' ? JSON.parse(r.projects) : r.projects,\n          education: typeof r.education === 'string' ? JSON.parse(r.education) : r.education,\n          userId: r.user_id,\n          createdAt: new Date((r.created_at as number) * 1000),\n          updatedAt: r.updated_at ? new Date((r.updated_at as number) * 1000) : null,\n        };\n      } catch (e) {\n        console.error('Failed to parse resume data', e);\n        return {\n          id: r.id,\n          title: r.title,\n          name: r.name,\n          phone: r.phone,\n          email: r.email,\n          linkedinUrl: r.linkedin_url,\n          portfolioUrl: r.portfolio_url,\n          summary: r.summary,\n          skills: [],\n          experiences: [],\n          projects: [],\n          education: [],\n          userId: r.user_id,\n          createdAt: new Date((r.created_at as number) * 1000),\n          updatedAt: r.updated_at ? new Date((r.updated_at as number) * 1000) : null,\n        };\n      }\n    });\n\n    return { data: parsedResumes };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch resumes.');\n  }\n}\n\nexport async function saveLetter({\n  jobTitle,\n  company,\n  jobDesc,\n  content,\n  tone,\n  atsScore,\n  resumeId,\n  userId,\n}: {\n  jobTitle: string;\n  company: string;\n  jobDesc: string;\n  content: string;\n  tone: string;\n  atsScore: number;\n  resumeId: number;\n  userId?: number;\n}) {\n  const { user } = await requireAuth();\n\n  try {\n    const { data, error } = await db\n      .from('letters')\n      .insert({\n        job_title: jobTitle,\n        company,\n        job_desc: jobDesc,\n        content,\n        tone,\n        ats_score: atsScore,\n        user_id: user.id,\n        resume_id: resumeId,\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to save cover letter.');\n\n    revalidatePath('/dashboard');\n    const mapped = data && {\n      id: data.id,\n      jobTitle: data.job_title,\n      company: data.company,\n      jobDesc: data.job_desc,\n      content: data.content,\n      tone: data.tone,\n      atsScore: data.ats_score,\n      userId: data.user_id,\n      resumeId: data.resume_id,\n      createdAt: new Date((data.created_at as number) * 1000),\n    };\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to save cover letter.');\n  }\n}\n\nexport async function getApplicationsForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('applications')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch applications');\n\n    const mapped = (data || []).map((a: any) => ({\n      id: a.id,\n      jobTitle: a.job_title,\n      company: a.company,\n      status: a.status,\n      url: a.url,\n      requirements: a.requirements,\n      deadline: a.deadline ?? null,\n      userId: a.user_id,\n      createdAt: a.created_at as number,\n    }));\n\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch applications');\n  }\n}\n\nexport async function addApplication(application: {\n  jobTitle: string;\n  company: string;\n  status: string;\n  url?: string;\n  requirements?: string;\n  userId?: number;\n}) {\n  const { user } = await requireAuth();\n\n  try {\n    const { data, error } = await db\n      .from('applications')\n      .insert({\n        job_title: application.jobTitle,\n        company: application.company,\n        status: application.status,\n        url: application.url,\n        requirements: application.requirements,\n        user_id: user.id,\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to add application');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    const mapped = data && ({\n      id: data.id,\n      jobTitle: data.job_title,\n      company: data.company,\n      status: data.status,\n      url: data.url,\n      requirements: data.requirements,\n      deadline: data.deadline ?? null,\n      userId: data.user_id,\n      createdAt: data.created_at as number,\n    });\n    return { data: mapped as any };\n  } catch(error) {\n    return handleError(error, 'Failed to add application');\n  }\n}\n\nexport async function updateApplicationStatus(id: number, status: string) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('applications')\n      .update({ status })\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to update application status');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch (error) {\n    return handleError(error, 'Failed to update application status');\n  }\n}\n\nexport async function parseResumeAndSave(input: ParseResumeInput & { title: string; userId?: number }) {\n  const { user } = await requireAuth();\n\n  try {\n    const parsedData = await parseResume(input);\n\n    const { data, error } = await db\n      .from('resumes')\n      .insert({\n        user_id: user.id,\n        title: input.title,\n        name: parsedData.name,\n        phone: parsedData.phone,\n        email: parsedData.email,\n        linkedin_url: parsedData.linkedinUrl,\n        portfolio_url: parsedData.portfolioUrl,\n        summary: parsedData.summary,\n        skills: JSON.stringify(parsedData.skills),\n        experiences: JSON.stringify(parsedData.experiences),\n        projects: JSON.stringify(parsedData.projects),\n        education: JSON.stringify(parsedData.education),\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to parse and save resume.');\n\n    revalidatePath('/resumes');\n    const mapped = data && ({\n      id: data.id,\n      title: data.title,\n      name: data.name,\n      phone: data.phone,\n      email: data.email,\n      linkedinUrl: data.linkedin_url,\n      portfolioUrl: data.portfolio_url,\n      summary: data.summary,\n      skills: data.skills,\n      experiences: data.experiences,\n      projects: data.projects,\n      education: data.education,\n      userId: data.user_id,\n      createdAt: data.created_at as number,\n      updatedAt: data.updated_at ?? null,\n    });\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to parse and save resume.');\n  }\n}\n\nexport async function deleteResume(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('resumes')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete resume.');\n\n    revalidatePath('/resumes');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete resume.')\n  }\n}\n\n\nexport async function deleteLetter(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('letters')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete letter.');\n\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete letter.')\n  }\n}\n\nexport async function deleteUserAccount() {\n  const { user } = await requireAuth();\n\n  try {\n    await db.from('letters').delete().eq('user_id', user.id);\n    await db.from('applications').delete().eq('user_id', user.id);\n    await db.from('resumes').delete().eq('user_id', user.id);\n    await db.from('users').delete().eq('id', user.id);\n\n    revalidatePath('/');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete account.');\n  }\n}\n\nexport async function getLettersForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('letters')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch letters.');\n\n    const parsedLetters = (data || []).map((l: any) => ({\n      id: l.id,\n      jobTitle: l.job_title,\n      company: l.company,\n      jobDesc: l.job_desc,\n      content: l.content,\n      tone: l.tone,\n      atsScore: l.ats_score,\n      userId: l.user_id,\n      resumeId: l.resume_id,\n      createdAt: new Date((l.created_at as number) * 1000),\n    }));\n\n    return { data: parsedLetters };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch letters.');\n  }\n}\n\nexport async function deleteApplication(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('applications')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete application.');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch (e) {\n    return handleError(e, 'Failed to delete application.');\n  }\n}\n\n\nexport async function autofillJobDetailsAction(input: AutofillJobDetailsInput): Promise<{data: AutofillJobDetailsOutput | null; error?: string}> {\n    try {\n        const result = await autofillJobDetails(input);\n        return { data: result };\n    } catch(e) {\n        return handleError(e, 'Failed to autofill job details.');\n    }\n}\n\nexport async function updateResume(resume: ParseResumeOutput & { id: number, title: string }) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('resumes')\n      .update({\n        title: resume.title,\n        name: resume.name,\n        phone: resume.phone,\n        email: resume.email,\n        linkedin_url: resume.linkedinUrl,\n        portfolio_url: resume.portfolioUrl,\n        summary: resume.summary,\n        skills: typeof resume.skills === 'string' ? resume.skills : JSON.stringify(resume.skills),\n        experiences: typeof resume.experiences === 'string' ? resume.experiences : JSON.stringify(resume.experiences),\n        projects: typeof resume.projects === 'string' ? resume.projects : JSON.stringify(resume.projects),\n        education: typeof resume.education === 'string' ? resume.education : JSON.stringify(resume.education),\n        updated_at: Math.floor(Date.now() / 1000),\n      })\n      .eq('id', resume.id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to update resume.');\n\n    revalidatePath('/resumes');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to update resume.');\n  }\n}\n"],"names":[],"mappings":";;;;;;IAyIsB,aAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport {\n  optimizeResumeForAts,\n  OptimizeResumeForAtsInput,\n  OptimizeResumeForAtsOutput,\n} from '@/ai/flows/ats-resume-optimization';\nimport {\n  rewriteForImpact,\n  RewriteForImpactInput,\n} from '@/ai/flows/impactful-rewrite';\nimport {\n  resumeFlawSpotter,\n  ResumeFlawSpotterInput,\n} from '@/ai/flows/resume-flaw-spotter';\nimport {\n  tailoredCoverLetter,\n  TailoredCoverLetterInput,\n  TailoredCoverLetterOutput,\n} from '@/ai/flows/tailored-cover-letter';\nimport { parseResume, ParseResumeInput, ParseResumeOutput } from '@/ai/flows/parse-resume';\nimport { autofillJobDetails, AutofillJobDetailsInput, AutofillJobDetailsOutput } from '@/ai/flows/autofill-job-details';\nimport { db } from '@/db';\nimport { revalidatePath } from 'next/cache';\nimport { requireAuth } from '@/lib/auth';\n\nconst handleError = (error: unknown, defaultMessage: string) => {\n  console.error(error);\n  if (error instanceof Error) {\n    return { error: error.message };\n  }\n  return { error: defaultMessage };\n};\n\nexport async function generateAtsOptimizedResume(\n  input: OptimizeResumeForAtsInput\n): Promise<{ data: OptimizeResumeForAtsOutput | null; error?: string }> {\n  try {\n    const result = await optimizeResumeForAts(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to optimize resume for ATS.');\n  }\n}\n\nexport async function generateTailoredCoverLetter(\n  input: TailoredCoverLetterInput\n): Promise<{ data: TailoredCoverLetterOutput | null; error?: string }> {\n  try {\n    const result = await tailoredCoverLetter(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to generate cover letter.');\n  }\n}\n\nexport async function generateImpactfulRewrite(input: RewriteForImpactInput) {\n  try {\n    const result = await rewriteForImpact(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to rewrite resume section.');\n  }\n}\n\nexport async function findResumeFlaws(input: ResumeFlawSpotterInput) {\n  try {\n    const result = await resumeFlawSpotter(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to spot resume flaws.');\n  }\n}\n\nexport async function getResumesForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('resumes')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch resumes.');\n\n    const parsedResumes = (data || []).map((r: any) => {\n      try {\n        return {\n          id: r.id,\n          title: r.title,\n          name: r.name,\n          phone: r.phone,\n          email: r.email,\n          linkedinUrl: r.linkedin_url,\n          portfolioUrl: r.portfolio_url,\n          summary: r.summary,\n          skills: typeof r.skills === 'string' ? JSON.parse(r.skills) : r.skills,\n          experiences: typeof r.experiences === 'string' ? JSON.parse(r.experiences) : r.experiences,\n          projects: typeof r.projects === 'string' ? JSON.parse(r.projects) : r.projects,\n          education: typeof r.education === 'string' ? JSON.parse(r.education) : r.education,\n          userId: r.user_id,\n          createdAt: new Date((r.created_at as number) * 1000),\n          updatedAt: r.updated_at ? new Date((r.updated_at as number) * 1000) : null,\n        };\n      } catch (e) {\n        console.error('Failed to parse resume data', e);\n        return {\n          id: r.id,\n          title: r.title,\n          name: r.name,\n          phone: r.phone,\n          email: r.email,\n          linkedinUrl: r.linkedin_url,\n          portfolioUrl: r.portfolio_url,\n          summary: r.summary,\n          skills: [],\n          experiences: [],\n          projects: [],\n          education: [],\n          userId: r.user_id,\n          createdAt: new Date((r.created_at as number) * 1000),\n          updatedAt: r.updated_at ? new Date((r.updated_at as number) * 1000) : null,\n        };\n      }\n    });\n\n    return { data: parsedResumes };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch resumes.');\n  }\n}\n\nexport async function saveLetter({\n  jobTitle,\n  company,\n  jobDesc,\n  content,\n  tone,\n  atsScore,\n  resumeId,\n  userId,\n}: {\n  jobTitle: string;\n  company: string;\n  jobDesc: string;\n  content: string;\n  tone: string;\n  atsScore: number;\n  resumeId: number;\n  userId?: number;\n}) {\n  const { user } = await requireAuth();\n\n  try {\n    const { data, error } = await db\n      .from('letters')\n      .insert({\n        job_title: jobTitle,\n        company,\n        job_desc: jobDesc,\n        content,\n        tone,\n        ats_score: atsScore,\n        user_id: user.id,\n        resume_id: resumeId,\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to save cover letter.');\n\n    revalidatePath('/dashboard');\n    const mapped = data && {\n      id: data.id,\n      jobTitle: data.job_title,\n      company: data.company,\n      jobDesc: data.job_desc,\n      content: data.content,\n      tone: data.tone,\n      atsScore: data.ats_score,\n      userId: data.user_id,\n      resumeId: data.resume_id,\n      createdAt: new Date((data.created_at as number) * 1000),\n    };\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to save cover letter.');\n  }\n}\n\nexport async function getApplicationsForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('applications')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch applications');\n\n    const mapped = (data || []).map((a: any) => ({\n      id: a.id,\n      jobTitle: a.job_title,\n      company: a.company,\n      status: a.status,\n      url: a.url,\n      requirements: a.requirements,\n      deadline: a.deadline ?? null,\n      userId: a.user_id,\n      createdAt: a.created_at as number,\n    }));\n\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch applications');\n  }\n}\n\nexport async function addApplication(application: {\n  jobTitle: string;\n  company: string;\n  status: string;\n  url?: string;\n  requirements?: string;\n  userId?: number;\n}) {\n  const { user } = await requireAuth();\n\n  try {\n    const { data, error } = await db\n      .from('applications')\n      .insert({\n        job_title: application.jobTitle,\n        company: application.company,\n        status: application.status,\n        url: application.url,\n        requirements: application.requirements,\n        user_id: user.id,\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to add application');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    const mapped = data && ({\n      id: data.id,\n      jobTitle: data.job_title,\n      company: data.company,\n      status: data.status,\n      url: data.url,\n      requirements: data.requirements,\n      deadline: data.deadline ?? null,\n      userId: data.user_id,\n      createdAt: data.created_at as number,\n    });\n    return { data: mapped as any };\n  } catch(error) {\n    return handleError(error, 'Failed to add application');\n  }\n}\n\nexport async function updateApplicationStatus(id: number, status: string) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('applications')\n      .update({ status })\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to update application status');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch (error) {\n    return handleError(error, 'Failed to update application status');\n  }\n}\n\nexport async function parseResumeAndSave(input: ParseResumeInput & { title: string; userId?: number }) {\n  const { user } = await requireAuth();\n\n  try {\n    const parsedData = await parseResume(input);\n\n    const { data, error } = await db\n      .from('resumes')\n      .insert({\n        user_id: user.id,\n        title: input.title,\n        name: parsedData.name,\n        phone: parsedData.phone,\n        email: parsedData.email,\n        linkedin_url: parsedData.linkedinUrl,\n        portfolio_url: parsedData.portfolioUrl,\n        summary: parsedData.summary,\n        skills: JSON.stringify(parsedData.skills),\n        experiences: JSON.stringify(parsedData.experiences),\n        projects: JSON.stringify(parsedData.projects),\n        education: JSON.stringify(parsedData.education),\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to parse and save resume.');\n\n    revalidatePath('/resumes');\n    const mapped = data && ({\n      id: data.id,\n      title: data.title,\n      name: data.name,\n      phone: data.phone,\n      email: data.email,\n      linkedinUrl: data.linkedin_url,\n      portfolioUrl: data.portfolio_url,\n      summary: data.summary,\n      skills: data.skills,\n      experiences: data.experiences,\n      projects: data.projects,\n      education: data.education,\n      userId: data.user_id,\n      createdAt: data.created_at as number,\n      updatedAt: data.updated_at ?? null,\n    });\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to parse and save resume.');\n  }\n}\n\nexport async function deleteResume(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('resumes')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete resume.');\n\n    revalidatePath('/resumes');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete resume.')\n  }\n}\n\n\nexport async function deleteLetter(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('letters')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete letter.');\n\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete letter.')\n  }\n}\n\nexport async function deleteUserAccount() {\n  const { user } = await requireAuth();\n\n  try {\n    await db.from('letters').delete().eq('user_id', user.id);\n    await db.from('applications').delete().eq('user_id', user.id);\n    await db.from('resumes').delete().eq('user_id', user.id);\n    await db.from('users').delete().eq('id', user.id);\n\n    revalidatePath('/');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete account.');\n  }\n}\n\nexport async function getLettersForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('letters')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch letters.');\n\n    const parsedLetters = (data || []).map((l: any) => ({\n      id: l.id,\n      jobTitle: l.job_title,\n      company: l.company,\n      jobDesc: l.job_desc,\n      content: l.content,\n      tone: l.tone,\n      atsScore: l.ats_score,\n      userId: l.user_id,\n      resumeId: l.resume_id,\n      createdAt: new Date((l.created_at as number) * 1000),\n    }));\n\n    return { data: parsedLetters };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch letters.');\n  }\n}\n\nexport async function deleteApplication(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('applications')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete application.');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch (e) {\n    return handleError(e, 'Failed to delete application.');\n  }\n}\n\n\nexport async function autofillJobDetailsAction(input: AutofillJobDetailsInput): Promise<{data: AutofillJobDetailsOutput | null; error?: string}> {\n    try {\n        const result = await autofillJobDetails(input);\n        return { data: result };\n    } catch(e) {\n        return handleError(e, 'Failed to autofill job details.');\n    }\n}\n\nexport async function updateResume(resume: ParseResumeOutput & { id: number, title: string }) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('resumes')\n      .update({\n        title: resume.title,\n        name: resume.name,\n        phone: resume.phone,\n        email: resume.email,\n        linkedin_url: resume.linkedinUrl,\n        portfolio_url: resume.portfolioUrl,\n        summary: resume.summary,\n        skills: typeof resume.skills === 'string' ? resume.skills : JSON.stringify(resume.skills),\n        experiences: typeof resume.experiences === 'string' ? resume.experiences : JSON.stringify(resume.experiences),\n        projects: typeof resume.projects === 'string' ? resume.projects : JSON.stringify(resume.projects),\n        education: typeof resume.education === 'string' ? resume.education : JSON.stringify(resume.education),\n        updated_at: Math.floor(Date.now() / 1000),\n      })\n      .eq('id', resume.id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to update resume.');\n\n    revalidatePath('/resumes');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to update resume.');\n  }\n}\n"],"names":[],"mappings":";;;;;;IAucsB,2BAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport {\n  optimizeResumeForAts,\n  OptimizeResumeForAtsInput,\n  OptimizeResumeForAtsOutput,\n} from '@/ai/flows/ats-resume-optimization';\nimport {\n  rewriteForImpact,\n  RewriteForImpactInput,\n} from '@/ai/flows/impactful-rewrite';\nimport {\n  resumeFlawSpotter,\n  ResumeFlawSpotterInput,\n} from '@/ai/flows/resume-flaw-spotter';\nimport {\n  tailoredCoverLetter,\n  TailoredCoverLetterInput,\n  TailoredCoverLetterOutput,\n} from '@/ai/flows/tailored-cover-letter';\nimport { parseResume, ParseResumeInput, ParseResumeOutput } from '@/ai/flows/parse-resume';\nimport { autofillJobDetails, AutofillJobDetailsInput, AutofillJobDetailsOutput } from '@/ai/flows/autofill-job-details';\nimport { db } from '@/db';\nimport { revalidatePath } from 'next/cache';\nimport { requireAuth } from '@/lib/auth';\n\nconst handleError = (error: unknown, defaultMessage: string) => {\n  console.error(error);\n  if (error instanceof Error) {\n    return { error: error.message };\n  }\n  return { error: defaultMessage };\n};\n\nexport async function generateAtsOptimizedResume(\n  input: OptimizeResumeForAtsInput\n): Promise<{ data: OptimizeResumeForAtsOutput | null; error?: string }> {\n  try {\n    const result = await optimizeResumeForAts(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to optimize resume for ATS.');\n  }\n}\n\nexport async function generateTailoredCoverLetter(\n  input: TailoredCoverLetterInput\n): Promise<{ data: TailoredCoverLetterOutput | null; error?: string }> {\n  try {\n    const result = await tailoredCoverLetter(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to generate cover letter.');\n  }\n}\n\nexport async function generateImpactfulRewrite(input: RewriteForImpactInput) {\n  try {\n    const result = await rewriteForImpact(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to rewrite resume section.');\n  }\n}\n\nexport async function findResumeFlaws(input: ResumeFlawSpotterInput) {\n  try {\n    const result = await resumeFlawSpotter(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to spot resume flaws.');\n  }\n}\n\nexport async function getResumesForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('resumes')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch resumes.');\n\n    const parsedResumes = (data || []).map((r: any) => {\n      try {\n        return {\n          id: r.id,\n          title: r.title,\n          name: r.name,\n          phone: r.phone,\n          email: r.email,\n          linkedinUrl: r.linkedin_url,\n          portfolioUrl: r.portfolio_url,\n          summary: r.summary,\n          skills: typeof r.skills === 'string' ? JSON.parse(r.skills) : r.skills,\n          experiences: typeof r.experiences === 'string' ? JSON.parse(r.experiences) : r.experiences,\n          projects: typeof r.projects === 'string' ? JSON.parse(r.projects) : r.projects,\n          education: typeof r.education === 'string' ? JSON.parse(r.education) : r.education,\n          userId: r.user_id,\n          createdAt: new Date((r.created_at as number) * 1000),\n          updatedAt: r.updated_at ? new Date((r.updated_at as number) * 1000) : null,\n        };\n      } catch (e) {\n        console.error('Failed to parse resume data', e);\n        return {\n          id: r.id,\n          title: r.title,\n          name: r.name,\n          phone: r.phone,\n          email: r.email,\n          linkedinUrl: r.linkedin_url,\n          portfolioUrl: r.portfolio_url,\n          summary: r.summary,\n          skills: [],\n          experiences: [],\n          projects: [],\n          education: [],\n          userId: r.user_id,\n          createdAt: new Date((r.created_at as number) * 1000),\n          updatedAt: r.updated_at ? new Date((r.updated_at as number) * 1000) : null,\n        };\n      }\n    });\n\n    return { data: parsedResumes };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch resumes.');\n  }\n}\n\nexport async function saveLetter({\n  jobTitle,\n  company,\n  jobDesc,\n  content,\n  tone,\n  atsScore,\n  resumeId,\n  userId,\n}: {\n  jobTitle: string;\n  company: string;\n  jobDesc: string;\n  content: string;\n  tone: string;\n  atsScore: number;\n  resumeId: number;\n  userId?: number;\n}) {\n  const { user } = await requireAuth();\n\n  try {\n    const { data, error } = await db\n      .from('letters')\n      .insert({\n        job_title: jobTitle,\n        company,\n        job_desc: jobDesc,\n        content,\n        tone,\n        ats_score: atsScore,\n        user_id: user.id,\n        resume_id: resumeId,\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to save cover letter.');\n\n    revalidatePath('/dashboard');\n    const mapped = data && {\n      id: data.id,\n      jobTitle: data.job_title,\n      company: data.company,\n      jobDesc: data.job_desc,\n      content: data.content,\n      tone: data.tone,\n      atsScore: data.ats_score,\n      userId: data.user_id,\n      resumeId: data.resume_id,\n      createdAt: new Date((data.created_at as number) * 1000),\n    };\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to save cover letter.');\n  }\n}\n\nexport async function getApplicationsForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('applications')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch applications');\n\n    const mapped = (data || []).map((a: any) => ({\n      id: a.id,\n      jobTitle: a.job_title,\n      company: a.company,\n      status: a.status,\n      url: a.url,\n      requirements: a.requirements,\n      deadline: a.deadline ?? null,\n      userId: a.user_id,\n      createdAt: a.created_at as number,\n    }));\n\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch applications');\n  }\n}\n\nexport async function addApplication(application: {\n  jobTitle: string;\n  company: string;\n  status: string;\n  url?: string;\n  requirements?: string;\n  userId?: number;\n}) {\n  const { user } = await requireAuth();\n\n  try {\n    const { data, error } = await db\n      .from('applications')\n      .insert({\n        job_title: application.jobTitle,\n        company: application.company,\n        status: application.status,\n        url: application.url,\n        requirements: application.requirements,\n        user_id: user.id,\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to add application');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    const mapped = data && ({\n      id: data.id,\n      jobTitle: data.job_title,\n      company: data.company,\n      status: data.status,\n      url: data.url,\n      requirements: data.requirements,\n      deadline: data.deadline ?? null,\n      userId: data.user_id,\n      createdAt: data.created_at as number,\n    });\n    return { data: mapped as any };\n  } catch(error) {\n    return handleError(error, 'Failed to add application');\n  }\n}\n\nexport async function updateApplicationStatus(id: number, status: string) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('applications')\n      .update({ status })\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to update application status');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch (error) {\n    return handleError(error, 'Failed to update application status');\n  }\n}\n\nexport async function parseResumeAndSave(input: ParseResumeInput & { title: string; userId?: number }) {\n  const { user } = await requireAuth();\n\n  try {\n    const parsedData = await parseResume(input);\n\n    const { data, error } = await db\n      .from('resumes')\n      .insert({\n        user_id: user.id,\n        title: input.title,\n        name: parsedData.name,\n        phone: parsedData.phone,\n        email: parsedData.email,\n        linkedin_url: parsedData.linkedinUrl,\n        portfolio_url: parsedData.portfolioUrl,\n        summary: parsedData.summary,\n        skills: JSON.stringify(parsedData.skills),\n        experiences: JSON.stringify(parsedData.experiences),\n        projects: JSON.stringify(parsedData.projects),\n        education: JSON.stringify(parsedData.education),\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to parse and save resume.');\n\n    revalidatePath('/resumes');\n    const mapped = data && ({\n      id: data.id,\n      title: data.title,\n      name: data.name,\n      phone: data.phone,\n      email: data.email,\n      linkedinUrl: data.linkedin_url,\n      portfolioUrl: data.portfolio_url,\n      summary: data.summary,\n      skills: data.skills,\n      experiences: data.experiences,\n      projects: data.projects,\n      education: data.education,\n      userId: data.user_id,\n      createdAt: data.created_at as number,\n      updatedAt: data.updated_at ?? null,\n    });\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to parse and save resume.');\n  }\n}\n\nexport async function deleteResume(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('resumes')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete resume.');\n\n    revalidatePath('/resumes');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete resume.')\n  }\n}\n\n\nexport async function deleteLetter(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('letters')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete letter.');\n\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete letter.')\n  }\n}\n\nexport async function deleteUserAccount() {\n  const { user } = await requireAuth();\n\n  try {\n    await db.from('letters').delete().eq('user_id', user.id);\n    await db.from('applications').delete().eq('user_id', user.id);\n    await db.from('resumes').delete().eq('user_id', user.id);\n    await db.from('users').delete().eq('id', user.id);\n\n    revalidatePath('/');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete account.');\n  }\n}\n\nexport async function getLettersForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('letters')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch letters.');\n\n    const parsedLetters = (data || []).map((l: any) => ({\n      id: l.id,\n      jobTitle: l.job_title,\n      company: l.company,\n      jobDesc: l.job_desc,\n      content: l.content,\n      tone: l.tone,\n      atsScore: l.ats_score,\n      userId: l.user_id,\n      resumeId: l.resume_id,\n      createdAt: new Date((l.created_at as number) * 1000),\n    }));\n\n    return { data: parsedLetters };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch letters.');\n  }\n}\n\nexport async function deleteApplication(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('applications')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete application.');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch (e) {\n    return handleError(e, 'Failed to delete application.');\n  }\n}\n\n\nexport async function autofillJobDetailsAction(input: AutofillJobDetailsInput): Promise<{data: AutofillJobDetailsOutput | null; error?: string}> {\n    try {\n        const result = await autofillJobDetails(input);\n        return { data: result };\n    } catch(e) {\n        return handleError(e, 'Failed to autofill job details.');\n    }\n}\n\nexport async function updateResume(resume: ParseResumeOutput & { id: number, title: string }) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('resumes')\n      .update({\n        title: resume.title,\n        name: resume.name,\n        phone: resume.phone,\n        email: resume.email,\n        linkedin_url: resume.linkedinUrl,\n        portfolio_url: resume.portfolioUrl,\n        summary: resume.summary,\n        skills: typeof resume.skills === 'string' ? resume.skills : JSON.stringify(resume.skills),\n        experiences: typeof resume.experiences === 'string' ? resume.experiences : JSON.stringify(resume.experiences),\n        projects: typeof resume.projects === 'string' ? resume.projects : JSON.stringify(resume.projects),\n        education: typeof resume.education === 'string' ? resume.education : JSON.stringify(resume.education),\n        updated_at: Math.floor(Date.now() / 1000),\n      })\n      .eq('id', resume.id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to update resume.');\n\n    revalidatePath('/resumes');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to update resume.');\n  }\n}\n"],"names":[],"mappings":";;;;;;IAgdsB,eAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/components/ui/button.tsx"],"sourcesContent":["\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-transform duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AACA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACvB,4WACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,mKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/components/ui/card.tsx"],"sourcesContent":["\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AACA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 273, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,6LAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 309, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,oKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;;AAGb,MAAM,WAAW,GAAG,oKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 348, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/components/ui/select.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 563, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/components/ui/slider.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n"],"names":[],"mappings":";;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,uBAAS,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG5B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,qKAAA,CAAA,OAAoB;QACnB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;0BAET,6LAAC,qKAAA,CAAA,QAAqB;gBAAC,WAAU;0BAC/B,cAAA,6LAAC,qKAAA,CAAA,QAAqB;oBAAC,WAAU;;;;;;;;;;;0BAEnC,6LAAC,qKAAA,CAAA,QAAqB;gBAAC,WAAU;;;;;;;;;;;;;AAGrC,OAAO,WAAW,GAAG,qKAAA,CAAA,OAAoB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 622, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC9B,CAAC,EAAC,SAAS,EAAE,GAAG,OAAM,EAAE;IACtB,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 657, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport {\n  optimizeResumeForAts,\n  OptimizeResumeForAtsInput,\n  OptimizeResumeForAtsOutput,\n} from '@/ai/flows/ats-resume-optimization';\nimport {\n  rewriteForImpact,\n  RewriteForImpactInput,\n} from '@/ai/flows/impactful-rewrite';\nimport {\n  resumeFlawSpotter,\n  ResumeFlawSpotterInput,\n} from '@/ai/flows/resume-flaw-spotter';\nimport {\n  tailoredCoverLetter,\n  TailoredCoverLetterInput,\n  TailoredCoverLetterOutput,\n} from '@/ai/flows/tailored-cover-letter';\nimport { parseResume, ParseResumeInput, ParseResumeOutput } from '@/ai/flows/parse-resume';\nimport { autofillJobDetails, AutofillJobDetailsInput, AutofillJobDetailsOutput } from '@/ai/flows/autofill-job-details';\nimport { db } from '@/db';\nimport { revalidatePath } from 'next/cache';\nimport { requireAuth } from '@/lib/auth';\n\nconst handleError = (error: unknown, defaultMessage: string) => {\n  console.error(error);\n  if (error instanceof Error) {\n    return { error: error.message };\n  }\n  return { error: defaultMessage };\n};\n\nexport async function generateAtsOptimizedResume(\n  input: OptimizeResumeForAtsInput\n): Promise<{ data: OptimizeResumeForAtsOutput | null; error?: string }> {\n  try {\n    const result = await optimizeResumeForAts(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to optimize resume for ATS.');\n  }\n}\n\nexport async function generateTailoredCoverLetter(\n  input: TailoredCoverLetterInput\n): Promise<{ data: TailoredCoverLetterOutput | null; error?: string }> {\n  try {\n    const result = await tailoredCoverLetter(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to generate cover letter.');\n  }\n}\n\nexport async function generateImpactfulRewrite(input: RewriteForImpactInput) {\n  try {\n    const result = await rewriteForImpact(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to rewrite resume section.');\n  }\n}\n\nexport async function findResumeFlaws(input: ResumeFlawSpotterInput) {\n  try {\n    const result = await resumeFlawSpotter(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to spot resume flaws.');\n  }\n}\n\nexport async function getResumesForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('resumes')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch resumes.');\n\n    const parsedResumes = (data || []).map((r: any) => {\n      try {\n        return {\n          id: r.id,\n          title: r.title,\n          name: r.name,\n          phone: r.phone,\n          email: r.email,\n          linkedinUrl: r.linkedin_url,\n          portfolioUrl: r.portfolio_url,\n          summary: r.summary,\n          skills: typeof r.skills === 'string' ? JSON.parse(r.skills) : r.skills,\n          experiences: typeof r.experiences === 'string' ? JSON.parse(r.experiences) : r.experiences,\n          projects: typeof r.projects === 'string' ? JSON.parse(r.projects) : r.projects,\n          education: typeof r.education === 'string' ? JSON.parse(r.education) : r.education,\n          userId: r.user_id,\n          createdAt: new Date((r.created_at as number) * 1000),\n          updatedAt: r.updated_at ? new Date((r.updated_at as number) * 1000) : null,\n        };\n      } catch (e) {\n        console.error('Failed to parse resume data', e);\n        return {\n          id: r.id,\n          title: r.title,\n          name: r.name,\n          phone: r.phone,\n          email: r.email,\n          linkedinUrl: r.linkedin_url,\n          portfolioUrl: r.portfolio_url,\n          summary: r.summary,\n          skills: [],\n          experiences: [],\n          projects: [],\n          education: [],\n          userId: r.user_id,\n          createdAt: new Date((r.created_at as number) * 1000),\n          updatedAt: r.updated_at ? new Date((r.updated_at as number) * 1000) : null,\n        };\n      }\n    });\n\n    return { data: parsedResumes };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch resumes.');\n  }\n}\n\nexport async function saveLetter({\n  jobTitle,\n  company,\n  jobDesc,\n  content,\n  tone,\n  atsScore,\n  resumeId,\n  userId,\n}: {\n  jobTitle: string;\n  company: string;\n  jobDesc: string;\n  content: string;\n  tone: string;\n  atsScore: number;\n  resumeId: number;\n  userId?: number;\n}) {\n  const { user } = await requireAuth();\n\n  try {\n    const { data, error } = await db\n      .from('letters')\n      .insert({\n        job_title: jobTitle,\n        company,\n        job_desc: jobDesc,\n        content,\n        tone,\n        ats_score: atsScore,\n        user_id: user.id,\n        resume_id: resumeId,\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to save cover letter.');\n\n    revalidatePath('/dashboard');\n    const mapped = data && {\n      id: data.id,\n      jobTitle: data.job_title,\n      company: data.company,\n      jobDesc: data.job_desc,\n      content: data.content,\n      tone: data.tone,\n      atsScore: data.ats_score,\n      userId: data.user_id,\n      resumeId: data.resume_id,\n      createdAt: new Date((data.created_at as number) * 1000),\n    };\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to save cover letter.');\n  }\n}\n\nexport async function getApplicationsForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('applications')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch applications');\n\n    const mapped = (data || []).map((a: any) => ({\n      id: a.id,\n      jobTitle: a.job_title,\n      company: a.company,\n      status: a.status,\n      url: a.url,\n      requirements: a.requirements,\n      deadline: a.deadline ?? null,\n      userId: a.user_id,\n      createdAt: a.created_at as number,\n    }));\n\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch applications');\n  }\n}\n\nexport async function addApplication(application: {\n  jobTitle: string;\n  company: string;\n  status: string;\n  url?: string;\n  requirements?: string;\n  userId?: number;\n}) {\n  const { user } = await requireAuth();\n\n  try {\n    const { data, error } = await db\n      .from('applications')\n      .insert({\n        job_title: application.jobTitle,\n        company: application.company,\n        status: application.status,\n        url: application.url,\n        requirements: application.requirements,\n        user_id: user.id,\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to add application');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    const mapped = data && ({\n      id: data.id,\n      jobTitle: data.job_title,\n      company: data.company,\n      status: data.status,\n      url: data.url,\n      requirements: data.requirements,\n      deadline: data.deadline ?? null,\n      userId: data.user_id,\n      createdAt: data.created_at as number,\n    });\n    return { data: mapped as any };\n  } catch(error) {\n    return handleError(error, 'Failed to add application');\n  }\n}\n\nexport async function updateApplicationStatus(id: number, status: string) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('applications')\n      .update({ status })\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to update application status');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch (error) {\n    return handleError(error, 'Failed to update application status');\n  }\n}\n\nexport async function parseResumeAndSave(input: ParseResumeInput & { title: string; userId?: number }) {\n  const { user } = await requireAuth();\n\n  try {\n    const parsedData = await parseResume(input);\n\n    const { data, error } = await db\n      .from('resumes')\n      .insert({\n        user_id: user.id,\n        title: input.title,\n        name: parsedData.name,\n        phone: parsedData.phone,\n        email: parsedData.email,\n        linkedin_url: parsedData.linkedinUrl,\n        portfolio_url: parsedData.portfolioUrl,\n        summary: parsedData.summary,\n        skills: JSON.stringify(parsedData.skills),\n        experiences: JSON.stringify(parsedData.experiences),\n        projects: JSON.stringify(parsedData.projects),\n        education: JSON.stringify(parsedData.education),\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to parse and save resume.');\n\n    revalidatePath('/resumes');\n    const mapped = data && ({\n      id: data.id,\n      title: data.title,\n      name: data.name,\n      phone: data.phone,\n      email: data.email,\n      linkedinUrl: data.linkedin_url,\n      portfolioUrl: data.portfolio_url,\n      summary: data.summary,\n      skills: data.skills,\n      experiences: data.experiences,\n      projects: data.projects,\n      education: data.education,\n      userId: data.user_id,\n      createdAt: data.created_at as number,\n      updatedAt: data.updated_at ?? null,\n    });\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to parse and save resume.');\n  }\n}\n\nexport async function deleteResume(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('resumes')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete resume.');\n\n    revalidatePath('/resumes');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete resume.')\n  }\n}\n\n\nexport async function deleteLetter(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('letters')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete letter.');\n\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete letter.')\n  }\n}\n\nexport async function deleteUserAccount() {\n  const { user } = await requireAuth();\n\n  try {\n    await db.from('letters').delete().eq('user_id', user.id);\n    await db.from('applications').delete().eq('user_id', user.id);\n    await db.from('resumes').delete().eq('user_id', user.id);\n    await db.from('users').delete().eq('id', user.id);\n\n    revalidatePath('/');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete account.');\n  }\n}\n\nexport async function getLettersForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('letters')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch letters.');\n\n    const parsedLetters = (data || []).map((l: any) => ({\n      id: l.id,\n      jobTitle: l.job_title,\n      company: l.company,\n      jobDesc: l.job_desc,\n      content: l.content,\n      tone: l.tone,\n      atsScore: l.ats_score,\n      userId: l.user_id,\n      resumeId: l.resume_id,\n      createdAt: new Date((l.created_at as number) * 1000),\n    }));\n\n    return { data: parsedLetters };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch letters.');\n  }\n}\n\nexport async function deleteApplication(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('applications')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete application.');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch (e) {\n    return handleError(e, 'Failed to delete application.');\n  }\n}\n\n\nexport async function autofillJobDetailsAction(input: AutofillJobDetailsInput): Promise<{data: AutofillJobDetailsOutput | null; error?: string}> {\n    try {\n        const result = await autofillJobDetails(input);\n        return { data: result };\n    } catch(e) {\n        return handleError(e, 'Failed to autofill job details.');\n    }\n}\n\nexport async function updateResume(resume: ParseResumeOutput & { id: number, title: string }) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('resumes')\n      .update({\n        title: resume.title,\n        name: resume.name,\n        phone: resume.phone,\n        email: resume.email,\n        linkedin_url: resume.linkedinUrl,\n        portfolio_url: resume.portfolioUrl,\n        summary: resume.summary,\n        skills: typeof resume.skills === 'string' ? resume.skills : JSON.stringify(resume.skills),\n        experiences: typeof resume.experiences === 'string' ? resume.experiences : JSON.stringify(resume.experiences),\n        projects: typeof resume.projects === 'string' ? resume.projects : JSON.stringify(resume.projects),\n        education: typeof resume.education === 'string' ? resume.education : JSON.stringify(resume.education),\n        updated_at: Math.floor(Date.now() / 1000),\n      })\n      .eq('id', resume.id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to update resume.');\n\n    revalidatePath('/resumes');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to update resume.');\n  }\n}\n"],"names":[],"mappings":";;;;;;IAkEsB,kBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 673, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport {\n  optimizeResumeForAts,\n  OptimizeResumeForAtsInput,\n  OptimizeResumeForAtsOutput,\n} from '@/ai/flows/ats-resume-optimization';\nimport {\n  rewriteForImpact,\n  RewriteForImpactInput,\n} from '@/ai/flows/impactful-rewrite';\nimport {\n  resumeFlawSpotter,\n  ResumeFlawSpotterInput,\n} from '@/ai/flows/resume-flaw-spotter';\nimport {\n  tailoredCoverLetter,\n  TailoredCoverLetterInput,\n  TailoredCoverLetterOutput,\n} from '@/ai/flows/tailored-cover-letter';\nimport { parseResume, ParseResumeInput, ParseResumeOutput } from '@/ai/flows/parse-resume';\nimport { autofillJobDetails, AutofillJobDetailsInput, AutofillJobDetailsOutput } from '@/ai/flows/autofill-job-details';\nimport { db } from '@/db';\nimport { revalidatePath } from 'next/cache';\nimport { requireAuth } from '@/lib/auth';\n\nconst handleError = (error: unknown, defaultMessage: string) => {\n  console.error(error);\n  if (error instanceof Error) {\n    return { error: error.message };\n  }\n  return { error: defaultMessage };\n};\n\nexport async function generateAtsOptimizedResume(\n  input: OptimizeResumeForAtsInput\n): Promise<{ data: OptimizeResumeForAtsOutput | null; error?: string }> {\n  try {\n    const result = await optimizeResumeForAts(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to optimize resume for ATS.');\n  }\n}\n\nexport async function generateTailoredCoverLetter(\n  input: TailoredCoverLetterInput\n): Promise<{ data: TailoredCoverLetterOutput | null; error?: string }> {\n  try {\n    const result = await tailoredCoverLetter(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to generate cover letter.');\n  }\n}\n\nexport async function generateImpactfulRewrite(input: RewriteForImpactInput) {\n  try {\n    const result = await rewriteForImpact(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to rewrite resume section.');\n  }\n}\n\nexport async function findResumeFlaws(input: ResumeFlawSpotterInput) {\n  try {\n    const result = await resumeFlawSpotter(input);\n    return { data: result };\n  } catch (error) {\n    return handleError(error, 'Failed to spot resume flaws.');\n  }\n}\n\nexport async function getResumesForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('resumes')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch resumes.');\n\n    const parsedResumes = (data || []).map((r: any) => {\n      try {\n        return {\n          id: r.id,\n          title: r.title,\n          name: r.name,\n          phone: r.phone,\n          email: r.email,\n          linkedinUrl: r.linkedin_url,\n          portfolioUrl: r.portfolio_url,\n          summary: r.summary,\n          skills: typeof r.skills === 'string' ? JSON.parse(r.skills) : r.skills,\n          experiences: typeof r.experiences === 'string' ? JSON.parse(r.experiences) : r.experiences,\n          projects: typeof r.projects === 'string' ? JSON.parse(r.projects) : r.projects,\n          education: typeof r.education === 'string' ? JSON.parse(r.education) : r.education,\n          userId: r.user_id,\n          createdAt: new Date((r.created_at as number) * 1000),\n          updatedAt: r.updated_at ? new Date((r.updated_at as number) * 1000) : null,\n        };\n      } catch (e) {\n        console.error('Failed to parse resume data', e);\n        return {\n          id: r.id,\n          title: r.title,\n          name: r.name,\n          phone: r.phone,\n          email: r.email,\n          linkedinUrl: r.linkedin_url,\n          portfolioUrl: r.portfolio_url,\n          summary: r.summary,\n          skills: [],\n          experiences: [],\n          projects: [],\n          education: [],\n          userId: r.user_id,\n          createdAt: new Date((r.created_at as number) * 1000),\n          updatedAt: r.updated_at ? new Date((r.updated_at as number) * 1000) : null,\n        };\n      }\n    });\n\n    return { data: parsedResumes };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch resumes.');\n  }\n}\n\nexport async function saveLetter({\n  jobTitle,\n  company,\n  jobDesc,\n  content,\n  tone,\n  atsScore,\n  resumeId,\n  userId,\n}: {\n  jobTitle: string;\n  company: string;\n  jobDesc: string;\n  content: string;\n  tone: string;\n  atsScore: number;\n  resumeId: number;\n  userId?: number;\n}) {\n  const { user } = await requireAuth();\n\n  try {\n    const { data, error } = await db\n      .from('letters')\n      .insert({\n        job_title: jobTitle,\n        company,\n        job_desc: jobDesc,\n        content,\n        tone,\n        ats_score: atsScore,\n        user_id: user.id,\n        resume_id: resumeId,\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to save cover letter.');\n\n    revalidatePath('/dashboard');\n    const mapped = data && {\n      id: data.id,\n      jobTitle: data.job_title,\n      company: data.company,\n      jobDesc: data.job_desc,\n      content: data.content,\n      tone: data.tone,\n      atsScore: data.ats_score,\n      userId: data.user_id,\n      resumeId: data.resume_id,\n      createdAt: new Date((data.created_at as number) * 1000),\n    };\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to save cover letter.');\n  }\n}\n\nexport async function getApplicationsForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('applications')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch applications');\n\n    const mapped = (data || []).map((a: any) => ({\n      id: a.id,\n      jobTitle: a.job_title,\n      company: a.company,\n      status: a.status,\n      url: a.url,\n      requirements: a.requirements,\n      deadline: a.deadline ?? null,\n      userId: a.user_id,\n      createdAt: a.created_at as number,\n    }));\n\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch applications');\n  }\n}\n\nexport async function addApplication(application: {\n  jobTitle: string;\n  company: string;\n  status: string;\n  url?: string;\n  requirements?: string;\n  userId?: number;\n}) {\n  const { user } = await requireAuth();\n\n  try {\n    const { data, error } = await db\n      .from('applications')\n      .insert({\n        job_title: application.jobTitle,\n        company: application.company,\n        status: application.status,\n        url: application.url,\n        requirements: application.requirements,\n        user_id: user.id,\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to add application');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    const mapped = data && ({\n      id: data.id,\n      jobTitle: data.job_title,\n      company: data.company,\n      status: data.status,\n      url: data.url,\n      requirements: data.requirements,\n      deadline: data.deadline ?? null,\n      userId: data.user_id,\n      createdAt: data.created_at as number,\n    });\n    return { data: mapped as any };\n  } catch(error) {\n    return handleError(error, 'Failed to add application');\n  }\n}\n\nexport async function updateApplicationStatus(id: number, status: string) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('applications')\n      .update({ status })\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to update application status');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch (error) {\n    return handleError(error, 'Failed to update application status');\n  }\n}\n\nexport async function parseResumeAndSave(input: ParseResumeInput & { title: string; userId?: number }) {\n  const { user } = await requireAuth();\n\n  try {\n    const parsedData = await parseResume(input);\n\n    const { data, error } = await db\n      .from('resumes')\n      .insert({\n        user_id: user.id,\n        title: input.title,\n        name: parsedData.name,\n        phone: parsedData.phone,\n        email: parsedData.email,\n        linkedin_url: parsedData.linkedinUrl,\n        portfolio_url: parsedData.portfolioUrl,\n        summary: parsedData.summary,\n        skills: JSON.stringify(parsedData.skills),\n        experiences: JSON.stringify(parsedData.experiences),\n        projects: JSON.stringify(parsedData.projects),\n        education: JSON.stringify(parsedData.education),\n      })\n      .select('*')\n      .single();\n\n    if (error) return handleError(error, 'Failed to parse and save resume.');\n\n    revalidatePath('/resumes');\n    const mapped = data && ({\n      id: data.id,\n      title: data.title,\n      name: data.name,\n      phone: data.phone,\n      email: data.email,\n      linkedinUrl: data.linkedin_url,\n      portfolioUrl: data.portfolio_url,\n      summary: data.summary,\n      skills: data.skills,\n      experiences: data.experiences,\n      projects: data.projects,\n      education: data.education,\n      userId: data.user_id,\n      createdAt: data.created_at as number,\n      updatedAt: data.updated_at ?? null,\n    });\n    return { data: mapped as any };\n  } catch (error) {\n    return handleError(error, 'Failed to parse and save resume.');\n  }\n}\n\nexport async function deleteResume(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('resumes')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete resume.');\n\n    revalidatePath('/resumes');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete resume.')\n  }\n}\n\n\nexport async function deleteLetter(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('letters')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete letter.');\n\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete letter.')\n  }\n}\n\nexport async function deleteUserAccount() {\n  const { user } = await requireAuth();\n\n  try {\n    await db.from('letters').delete().eq('user_id', user.id);\n    await db.from('applications').delete().eq('user_id', user.id);\n    await db.from('resumes').delete().eq('user_id', user.id);\n    await db.from('users').delete().eq('id', user.id);\n\n    revalidatePath('/');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to delete account.');\n  }\n}\n\nexport async function getLettersForUser(userId: number) {\n  const { user } = await requireAuth();\n  if (user.id !== userId) {\n    return { error: 'Unauthorized access' };\n  }\n\n  try {\n    const { data, error } = await db\n      .from('letters')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) return handleError(error, 'Failed to fetch letters.');\n\n    const parsedLetters = (data || []).map((l: any) => ({\n      id: l.id,\n      jobTitle: l.job_title,\n      company: l.company,\n      jobDesc: l.job_desc,\n      content: l.content,\n      tone: l.tone,\n      atsScore: l.ats_score,\n      userId: l.user_id,\n      resumeId: l.resume_id,\n      createdAt: new Date((l.created_at as number) * 1000),\n    }));\n\n    return { data: parsedLetters };\n  } catch (error) {\n    return handleError(error, 'Failed to fetch letters.');\n  }\n}\n\nexport async function deleteApplication(id: number) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('applications')\n      .delete()\n      .eq('id', id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to delete application.');\n\n    revalidatePath('/applications');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch (e) {\n    return handleError(e, 'Failed to delete application.');\n  }\n}\n\n\nexport async function autofillJobDetailsAction(input: AutofillJobDetailsInput): Promise<{data: AutofillJobDetailsOutput | null; error?: string}> {\n    try {\n        const result = await autofillJobDetails(input);\n        return { data: result };\n    } catch(e) {\n        return handleError(e, 'Failed to autofill job details.');\n    }\n}\n\nexport async function updateResume(resume: ParseResumeOutput & { id: number, title: string }) {\n  const { user } = await requireAuth();\n\n  try {\n    const { error } = await db\n      .from('resumes')\n      .update({\n        title: resume.title,\n        name: resume.name,\n        phone: resume.phone,\n        email: resume.email,\n        linkedin_url: resume.linkedinUrl,\n        portfolio_url: resume.portfolioUrl,\n        summary: resume.summary,\n        skills: typeof resume.skills === 'string' ? resume.skills : JSON.stringify(resume.skills),\n        experiences: typeof resume.experiences === 'string' ? resume.experiences : JSON.stringify(resume.experiences),\n        projects: typeof resume.projects === 'string' ? resume.projects : JSON.stringify(resume.projects),\n        education: typeof resume.education === 'string' ? resume.education : JSON.stringify(resume.education),\n        updated_at: Math.floor(Date.now() / 1000),\n      })\n      .eq('id', resume.id)\n      .eq('user_id', user.id);\n\n    if (error) return handleError(error, 'Failed to update resume.');\n\n    revalidatePath('/resumes');\n    revalidatePath('/dashboard');\n    return { data: { success: true } };\n  } catch(e) {\n    return handleError(e, 'Failed to update resume.');\n  }\n}\n"],"names":[],"mappings":";;;;;;IAyDsB,2BAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 689, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/components/ui/dropdown-menu.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AANA;;;;;;AAQA,MAAM,eAAe,+KAAA,CAAA,OAA0B;AAE/C,MAAM,sBAAsB,+KAAA,CAAA,UAA6B;AAEzD,MAAM,oBAAoB,+KAAA,CAAA,QAA2B;AAErD,MAAM,qBAAqB,+KAAA,CAAA,SAA4B;AAEvD,MAAM,kBAAkB,+KAAA,CAAA,MAAyB;AAEjD,MAAM,yBAAyB,+KAAA,CAAA,aAAgC;AAE/D,MAAM,uCAAyB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAK5C,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBAC3C,6LAAC,+KAAA,CAAA,aAAgC;QAC/B,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,0MACA,SAAS,QACT;QAED,GAAG,KAAK;;YAER;0BACD,6LAAC,yNAAA,CAAA,eAAY;gBAAC,WAAU;;;;;;;;;;;;;AAG5B,uBAAuB,WAAW,GAChC,+KAAA,CAAA,aAAgC,CAAC,WAAW;AAE9C,MAAM,uCAAyB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG5C,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,+KAAA,CAAA,aAAgC;QAC/B,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,ybACA;QAED,GAAG,KAAK;;;;;;;AAGb,uBAAuB,WAAW,GAChC,+KAAA,CAAA,aAAgC,CAAC,WAAW;AAE9C,MAAM,oCAAsB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGzC,CAAC,EAAE,SAAS,EAAE,aAAa,CAAC,EAAE,GAAG,OAAO,EAAE,oBAC1C,6LAAC,+KAAA,CAAA,SAA4B;kBAC3B,cAAA,6LAAC,+KAAA,CAAA,UAA6B;YAC5B,KAAK;YACL,YAAY;YACZ,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,ybACA;YAED,GAAG,KAAK;;;;;;;;;;;;AAIf,oBAAoB,WAAW,GAAG,+KAAA,CAAA,UAA6B,CAAC,WAAW;AAE3E,MAAM,iCAAmB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAKtC,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,OAAO,EAAE,oBACjC,6LAAC,+KAAA,CAAA,OAA0B;QACzB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qSACA,SAAS,QACT;QAED,GAAG,KAAK;;;;;;;AAGb,iBAAiB,WAAW,GAAG,+KAAA,CAAA,OAA0B,CAAC,WAAW;AAErE,MAAM,yCAA2B,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG9C,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,OAAO,EAAE,oBAC7C,6LAAC,+KAAA,CAAA,eAAkC;QACjC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,wOACA;QAEF,SAAS;QACR,GAAG,KAAK;;0BAET,6LAAC;gBAAK,WAAU;0BACd,cAAA,6LAAC,+KAAA,CAAA,gBAAmC;8BAClC,cAAA,6LAAC,uMAAA,CAAA,QAAK;wBAAC,WAAU;;;;;;;;;;;;;;;;YAGpB;;;;;;;;AAGL,yBAAyB,WAAW,GAClC,+KAAA,CAAA,eAAkC,CAAC,WAAW;AAEhD,MAAM,sCAAwB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAG3C,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,6LAAC,+KAAA,CAAA,YAA+B;QAC9B,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,wOACA;QAED,GAAG,KAAK;;0BAET,6LAAC;gBAAK,WAAU;0BACd,cAAA,6LAAC,+KAAA,CAAA,gBAAmC;8BAClC,cAAA,6LAAC,yMAAA,CAAA,SAAM;wBAAC,WAAU;;;;;;;;;;;;;;;;YAGrB;;;;;;;;AAGL,sBAAsB,WAAW,GAAG,+KAAA,CAAA,YAA+B,CAAC,WAAW;AAE/E,MAAM,kCAAoB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAKvC,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,OAAO,EAAE,oBACjC,6LAAC,+KAAA,CAAA,QAA2B;QAC1B,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qCACA,SAAS,QACT;QAED,GAAG,KAAK;;;;;;;AAGb,kBAAkB,WAAW,GAAG,+KAAA,CAAA,QAA2B,CAAC,WAAW;AAEvE,MAAM,sCAAwB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAG3C,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,+KAAA,CAAA,YAA+B;QAC9B,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,4BAA4B;QACzC,GAAG,KAAK;;;;;;;AAGb,sBAAsB,WAAW,GAAG,+KAAA,CAAA,YAA+B,CAAC,WAAW;AAE/E,MAAM,uBAAuB,CAAC,EAC5B,SAAS,EACT,GAAG,OACmC;IACtC,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8CAA8C;QAC3D,GAAG,KAAK;;;;;;AAGf;OAVM;AAWN,qBAAqB,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 917, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/components/ui/popover.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n"],"names":[],"mappings":";;;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,UAAU,sKAAA,CAAA,OAAqB;AAErC,MAAM,iBAAiB,sKAAA,CAAA,UAAwB;AAE/C,MAAM,+BAAiB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAGpC,CAAC,EAAE,SAAS,EAAE,QAAQ,QAAQ,EAAE,aAAa,CAAC,EAAE,GAAG,OAAO,EAAE,oBAC5D,6LAAC,sKAAA,CAAA,SAAuB;kBACtB,cAAA,6LAAC,sKAAA,CAAA,UAAwB;YACvB,KAAK;YACL,OAAO;YACP,YAAY;YACZ,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,8aACA;YAED,GAAG,KAAK;;;;;;;;;;;;AAIf,eAAe,WAAW,GAAG,sKAAA,CAAA,UAAwB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 965, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/components/ui/dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,SAAS,qKAAA,CAAA,OAAoB;AAEnC,MAAM,gBAAgB,qKAAA,CAAA,UAAuB;AAE7C,MAAM,eAAe,qKAAA,CAAA,SAAsB;AAE3C,MAAM,cAAc,qKAAA,CAAA,QAAqB;AAEzC,MAAM,8BAAgB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,qKAAA,CAAA,UAAuB;QACtB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,0JACA;QAED,GAAG,KAAK;;;;;;KAVP;AAaN,cAAc,WAAW,GAAG,qKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,8BAAgB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGnC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,6LAAC;;0BACC,6LAAC;;;;;0BACD,6LAAC,qKAAA,CAAA,UAAuB;gBACtB,KAAK;gBACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,+fACA;gBAED,GAAG,KAAK;;oBAER;kCACD,6LAAC,qKAAA,CAAA,QAAqB;wBAAC,WAAU;;0CAC/B,6LAAC,+LAAA,CAAA,IAAC;gCAAC,WAAU;;;;;;0CACb,6LAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;;AAKlC,cAAc,WAAW,GAAG,qKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;MATP;AAYN,aAAa,WAAW,GAAG;AAE3B,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;;;;;;MATP;AAYN,aAAa,WAAW,GAAG;AAE3B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,qKAAA,CAAA,QAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qDACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG,qKAAA,CAAA,QAAqB,CAAC,WAAW;AAE3D,MAAM,kCAAoB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGvC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,qKAAA,CAAA,cAA2B;QAC1B,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,kBAAkB,WAAW,GAAG,qKAAA,CAAA,cAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 1116, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/components/ui/command.tsx"],"sourcesContent":["\n\"use client\"\n\nimport * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1297, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/components/ui/sheet.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AAEA;AAPA;;;;;;;AASA,MAAM,QAAQ,qKAAA,CAAA,OAAmB;AAEjC,MAAM,eAAe,qKAAA,CAAA,UAAsB;AAE3C,MAAM,aAAa,qKAAA,CAAA,QAAoB;AAEvC,MAAM,cAAc,qKAAA,CAAA,SAAqB;AAEzC,MAAM,6BAAe,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,EAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,qKAAA,CAAA,UAAsB;QACrB,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,2JACA;QAED,GAAG,KAAK;QACT,KAAK;;;;;;KAVH;AAaN,aAAa,WAAW,GAAG,qKAAA,CAAA,UAAsB,CAAC,WAAW;AAE7D,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB,oMACA;IACE,UAAU;QACR,MAAM;YACJ,KAAK;YACL,QACE;YACF,MAAM;YACN,OACE;QACJ;IACF;IACA,iBAAiB;QACf,MAAM;IACR;AACF;AAOF,MAAM,6BAAe,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGlC,CAAC,EAAE,OAAO,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpD,6LAAC;;0BACC,6LAAC;;;;;0BACD,6LAAC,qKAAA,CAAA,UAAsB;gBACrB,KAAK;gBACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;oBAAE;gBAAK,IAAI;gBACtC,GAAG,KAAK;;oBAER;kCACD,6LAAC,qKAAA,CAAA,QAAoB;wBAAC,WAAU;;0CAC9B,6LAAC,+LAAA,CAAA,IAAC;gCAAC,WAAU;;;;;;0CACb,6LAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;;AAKlC,aAAa,WAAW,GAAG,qKAAA,CAAA,UAAsB,CAAC,WAAW;AAE7D,MAAM,cAAc,CAAC,EACnB,SAAS,EACT,GAAG,OACkC,iBACrC,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,oDACA;QAED,GAAG,KAAK;;;;;;MATP;AAYN,YAAY,WAAW,GAAG;AAE1B,MAAM,cAAc,CAAC,EACnB,SAAS,EACT,GAAG,OACkC,iBACrC,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;;;;;;MATP;AAYN,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,qKAAA,CAAA,QAAoB;QACnB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,yCAAyC;QACtD,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG,qKAAA,CAAA,QAAoB,CAAC,WAAW;AAEzD,MAAM,iCAAmB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,qKAAA,CAAA,cAA0B;QACzB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,iBAAiB,WAAW,GAAG,qKAAA,CAAA,cAA0B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 1465, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/hooks/use-media-query.ts"],"sourcesContent":["\n\"use client\"\n\nimport { useState, useEffect } from 'react';\n\nexport function useMediaQuery(query: string) {\n  const [matches, setMatches] = useState(false);\n\n  useEffect(() => {\n    if (typeof window === 'undefined') {\n      return;\n    }\n    \n    const media = window.matchMedia(query);\n    if (media.matches !== matches) {\n      setMatches(media.matches);\n    }\n    const listener = () => {\n      setMatches(media.matches);\n    };\n    media.addEventListener('change', listener);\n    return () => media.removeEventListener('change', listener);\n  }, [matches, query]);\n\n  return matches;\n}\n"],"names":[],"mappings":";;;AAGA;;AAFA;;AAIO,SAAS,cAAc,KAAa;;IACzC,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;mCAAE;YACR,uCAAmC;;YAEnC;YAEA,MAAM,QAAQ,OAAO,UAAU,CAAC;YAChC,IAAI,MAAM,OAAO,KAAK,SAAS;gBAC7B,WAAW,MAAM,OAAO;YAC1B;YACA,MAAM;oDAAW;oBACf,WAAW,MAAM,OAAO;gBAC1B;;YACA,MAAM,gBAAgB,CAAC,UAAU;YACjC;2CAAO,IAAM,MAAM,mBAAmB,CAAC,UAAU;;QACnD;kCAAG;QAAC;QAAS;KAAM;IAEnB,OAAO;AACT;GApBgB","debugId":null}},
    {"offset": {"line": 1510, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/components/nav.tsx"],"sourcesContent":["\n'use client';\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from \"@/components/ui/sheet\";\nimport { BarChart3, Briefcase, FileText, LayoutDashboard, LogOut, Menu, Settings } from \"lucide-react\";\nimport { usePathname, useRouter } from \"next/navigation\";\nimport { cn } from \"@/lib/utils\";\nimport { useMediaQuery } from \"@/hooks/use-media-query\";\nimport { useState, useTransition } from \"react\";\nimport { toast } from \"@/hooks/use-toast\";\n\nconst navItems = [\n    { href: '/dashboard', icon: LayoutDashboard, label: 'Dashboard' },\n    { href: '/applications', icon: Briefcase, label: 'Applications' },\n    { href: '/analytics', icon: BarChart3, label: 'Analytics' },\n    { href: '/resumes', icon: FileText, label: 'Resumes' },\n    { href: '/settings', icon: Settings, label: 'Settings' },\n]\n\nexport function Nav() {\n  const router = useRouter();\n  const pathname = usePathname();\n  const isDesktop = useMediaQuery(\"(min-width: 768px)\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [isPending, startTransition] = useTransition();\n\n  const handleNavigation = (href: string) => {\n    router.push(href);\n    setIsOpen(false);\n  }\n\n  const handleSignOut = () => {\n    startTransition(async () => {\n      try {\n        const response = await fetch('/api/auth/signout', {\n          method: 'POST',\n        });\n\n        if (response.ok) {\n          try {\n            localStorage.removeItem('fitletter_user_email');\n            localStorage.removeItem('fitletter_user_id');\n            localStorage.removeItem('fitletter_user_name');\n          } catch (_) {}\n          toast({\n            title: 'Signed Out',\n            description: 'You have been signed out successfully.',\n          });\n          router.push('/login');\n          router.refresh();\n        } else {\n          throw new Error('Sign out failed');\n        }\n      } catch (error) {\n        toast({\n          title: 'Error',\n          description: 'Failed to sign out. Please try again.',\n          variant: 'destructive',\n        });\n      }\n    });\n  };\n\n  const NavContent = () => (\n    <div className=\"flex flex-col gap-2 p-2 md:flex-row md:gap-1 md:rounded-lg md:border md:bg-background md:p-1 md:items-center\">\n      {navItems.map(item => (\n        <Button\n          key={item.href}\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => handleNavigation(item.href)}\n          className={cn(\n            \"w-full justify-start text-base md:text-sm\",\n            pathname === item.href && \"bg-muted font-semibold\"\n          )}\n        >\n          <item.icon className=\"mr-2\" />\n          {item.label}\n        </Button>\n      ))}\n      <div className=\"md:ml-auto\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={handleSignOut}\n          disabled={isPending}\n          className=\"w-full justify-start text-base md:text-sm text-muted-foreground hover:text-destructive\"\n        >\n          <LogOut className=\"mr-2\" />\n          Sign Out\n        </Button>\n      </div>\n    </div>\n  );\n\n  return (\n    <nav className=\"flex w-full items-center gap-4 md:w-auto\">\n      <div className=\"flex items-center gap-2\">\n        <div className=\"rounded-lg bg-primary/10 p-2 text-primary\">\n          <FileText className=\"h-6 w-6\" />\n        </div>\n        <h1 className=\"font-headline text-2xl font-bold tracking-tight\">\n          FitLetter\n        </h1>\n      </div>\n      \n      {isDesktop ? (\n        <NavContent />\n      ) : (\n        <div className=\"ml-auto\">\n          <Sheet open={isOpen} onOpenChange={setIsOpen}>\n            <SheetTrigger asChild>\n              <Button variant=\"outline\" size=\"icon\">\n                <Menu />\n                <span className=\"sr-only\">Open navigation menu</span>\n              </Button>\n            </SheetTrigger>\n            <SheetContent side=\"left\">\n                <SheetHeader>\n                    <SheetTitle className=\"sr-only\">Navigation Menu</SheetTitle>\n                </SheetHeader>\n              <NavContent />\n            </SheetContent>\n          </Sheet>\n        </div>\n      )}\n    </nav>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1804, "column": 0}, "map": {"version":3,"sources":["file:///home/zsmile/Desktop/FitLetter_ai_web/src/app/editor/%5Bid%5D/page.tsx"],"sourcesContent":["\n'use client';\nimport {\n  getResumesForUser,\n  generateTailoredCoverLetter,\n  generateAtsOptimizedResume,\n  saveLetter,\n  autofillJobDetailsAction,\n  updateResume,\n} from '@/app/actions';\nimport { Button } from '@/components/ui/button';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Slider } from '@/components/ui/slider';\nimport { Textarea } from '@/components/ui/textarea';\nimport type { Resume, ResumeFlawSpotterOutput } from '@/db/schema';\nimport { useToast } from '@/hooks/use-toast';\nimport { Check, ChevronDown, ChevronsUpDown, FileDown, Loader2, Save, Sparkles, Wand2 } from 'lucide-react';\nimport { useParams, useRouter } from 'next/navigation';\nimport { useEffect, useState, useMemo } from 'react';\nimport { findResumeFlaws, generateImpactfulRewrite } from '@/app/actions';\nimport Confetti from 'react-confetti';\nimport { useWindowSize } from 'react-use';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from '@/components/ui/command';\nimport { cn } from '@/lib/utils';\nimport { jsPDF } from 'jspdf';\nimport { Nav } from '@/components/nav';\n\ntype Experience = { role: string; company: string; dates: string; impact: string[] };\ntype Education = { degree: string; school: string; year: string };\ntype Project = { title: string; techUsed: string; description: string, impact?: string };\ntype Skills = string[];\n\ntype ResumeWithParsedJson = Omit<\n  Resume,\n  'experiences' | 'education' | 'skills' | 'projects' | 'createdAt' | 'updatedAt'\n> & {\n  experiences: Experience[];\n  education: Education[];\n  skills: Skills;\n  projects: Project[];\n  createdAt: Date;\n  updatedAt: Date | null;\n};\n\nconst toneMapping = ['Formal', 'Friendly', 'Enthusiastic'];\n\nfunction downloadAsFile(content: string, fileName: string, format: 'txt' | 'pdf' | 'docx' = 'txt') {\n    if (format === 'pdf') {\n        const doc = new jsPDF();\n        doc.setFont('Helvetica', 'normal');\n        doc.setFontSize(10);\n        \n        const pageHeight = doc.internal.pageSize.height;\n        const margin = 15;\n        let y = margin;\n        \n        const lines = doc.splitTextToSize(content, doc.internal.pageSize.width - margin * 2);\n\n        lines.forEach((line: string) => {\n            if (y > pageHeight - margin) {\n                doc.addPage();\n                y = margin;\n            }\n            doc.text(line, margin, y);\n            y += doc.getLineHeight() / 2.8; // Adjust line height factor for better spacing\n        });\n\n        doc.save(`${fileName}.pdf`);\n    } else {\n        const blob = new Blob([content], { type: 'text/plain' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `${fileName}.${format}`;\n        a.click();\n        URL.revokeObjectURL(url);\n    }\n}\n\n\nconst DownloadButton = ({ content, fileName }: { content: string, fileName: string}) => {\n    if (!content) return null;\n    return (\n        <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n                <Button variant=\"outline\" size=\"sm\">\n                    <FileDown className=\"mr-2\" />\n                    Download\n                    <ChevronDown className=\"ml-2\" />\n                </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent>\n                <DropdownMenuItem onClick={() => downloadAsFile(content, fileName, 'txt')}>Plain Text (.txt)</DropdownMenuItem>\n                <DropdownMenuItem onClick={() => downloadAsFile(content, fileName, 'pdf')}>PDF (.pdf)</DropdownMenuItem>\n                <DropdownMenuItem onClick={() => downloadAsFile(content, fileName, 'docx')} disabled>Word (.docx) - Soon</DropdownMenuItem>\n            </DropdownMenuContent>\n        </DropdownMenu>\n    );\n};\n\n\nexport default function EditorPage() {\n  const router = useRouter();\n  const params = useParams();\n  const { toast } = useToast();\n  const { width, height } = useWindowSize();\n  const [showConfetti, setShowConfetti] = useState(false);\n\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [isRegeneratingResume, setIsRegeneratingResume] = useState(false);\n  const [isRegeneratingLetter, setIsRegeneratingLetter] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [isRewriting, setIsRewriting] = useState(false);\n  const [isAutofilling, setIsAutofilling] = useState(false);\n  const [resumes, setResumes] = useState<ResumeWithParsedJson[]>([]);\n  const [selectedResume, setSelectedResume] = useState<ResumeWithParsedJson | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [analysisResult, setAnalysisResult] = useState<ResumeFlawSpotterOutput | null>(null);\n  const [rewriteResult, setRewriteResult] = useState<string | null>(null);\n  const [sectionToRewrite, setSectionToRewrite] = useState('summary');\n  const [comboboxOpen, setComboboxOpen] = useState(false);\n  \n  const [jobPostingText, setJobPostingText] = useState('');\n  const [jobTitle, setJobTitle] = useState('');\n  const [companyName, setCompanyName] = useState('');\n  const [jobDescription, setJobDescription] = useState('');\n  const [toneIndex, setToneIndex] = useState(0);\n  const [generatedCoverLetter, setGeneratedCoverLetter] = useState('');\n  const [optimizedResume, setOptimizedResume] = useState('');\n  const [newAtsScore, setNewAtsScore] = useState<number | null>(null);\n  const [applicationUrl, setApplicationUrl] = useState('');\n  const [userId, setUserId] = useState<number|null>(null);\n\n  const isNew = params.id === 'new';\n\n  useEffect(() => {\n    const storedId = localStorage.getItem('fitletter_user_id');\n    if (!storedId) {\n        router.push('/');\n        return;\n    }\n    const id = parseInt(storedId);\n    setUserId(id);\n\n    async function loadResumes() {\n      setIsLoading(true);\n      const { data, error } = await getResumesForUser(id);\n      if (error) {\n        console.error(error);\n        toast({\n          title: 'Error loading resumes',\n          description: error,\n          variant: 'destructive',\n        });\n      } else if (data) {\n        const parsedData = data as ResumeWithParsedJson[];\n        setResumes(parsedData);\n        if (parsedData.length > 0) {\n          const resumeIdToSelect = isNew ? parsedData[0].id : parseInt(params.id as string);\n          const resume = parsedData.find(r => r.id === resumeIdToSelect) || parsedData[0];\n          setSelectedResume(resume);\n        }\n      }\n      setIsLoading(false);\n    }\n    loadResumes();\n  }, [toast, isNew, params.id, router]);\n\n  const resumeContent = useMemo(() => {\n    if (!selectedResume) return 'Select a resume to view its content.';\n    \n    const { name, phone, email, linkedinUrl, portfolioUrl, summary, skills, experiences, projects, education } = selectedResume;\n    \n    return `${name} | ${phone} | ${email} ${linkedinUrl ? `| ${linkedinUrl}` : ''} ${portfolioUrl ? `| ${portfolioUrl}` : ''}\n---\n**Professional Summary**\n${summary}\n\n---\n**Skills**\n${skills?.join(', ') || 'N/A'}\n\n---\n**Professional Experience**\n${experiences?.map(exp => `\n**${exp.role}** | ${exp.company} | ${exp.dates}\n${exp.impact.map(item => `- ${item}`).join('\\n')}\n`).join('\\n') || 'N/A'}\n\n---\n**Projects**\n${projects?.map(proj => `\n**${proj.title}** | ${proj.techUsed}\n*${proj.description}*\n${proj.impact ? `- ${proj.impact}` : ''}\n`).join('\\n') || 'N/A'}\n\n---\n**Education**\n${education?.map(edu => `- ${edu.degree}, ${edu.school} (${edu.year})`).join('\\n') || 'N/A'}\n`;\n  }, [selectedResume]);\n\n  const handleGenerate = async () => {\n    if (!selectedResume || !jobTitle || !companyName || !jobDescription || !userId) {\n      toast({\n        title: 'Missing Information',\n        description: 'Please fill out all job details, select a resume and be logged in.',\n        variant: 'destructive',\n      });\n      return;\n    }\n    setIsGenerating(true);\n\n    try {\n      const coverLetterPromise = generateTailoredCoverLetter({\n        resume: resumeContent,\n        jobTitle,\n        company: companyName,\n        jobDescription,\n        tone: toneMapping[toneIndex],\n      });\n\n      const atsPromise = generateAtsOptimizedResume({\n        resume: resumeContent,\n        jobDescription,\n      });\n\n      const [coverLetterResult, atsResult] = await Promise.all([\n        coverLetterPromise,\n        atsPromise,\n      ]);\n\n      if (coverLetterResult.data) {\n        setGeneratedCoverLetter(coverLetterResult.data.coverLetter);\n      } else {\n        throw new Error(\n          coverLetterResult.error || 'Failed to generate cover letter.'\n        );\n      }\n\n      if (atsResult.data) {\n        setOptimizedResume(atsResult.data.optimizedResume);\n        setNewAtsScore(atsResult.data.atsScore);\n      } else {\n        throw new Error(\n          atsResult.error || 'Failed to optimize resume.'\n        );\n      }\n\n      if (\n        coverLetterResult.data &&\n        atsResult.data &&\n        isNew &&\n        selectedResume\n      ) {\n        await saveLetter({\n          jobTitle,\n          company: companyName,\n          jobDesc: jobDescription,\n          content: coverLetterResult.data.coverLetter,\n          tone: toneMapping[toneIndex],\n          atsScore: atsResult.data.atsScore,\n          resumeId: selectedResume.id,\n          userId\n        });\n        toast({\n          title: 'Success!',\n          description: 'Your application documents have been generated and saved.',\n        });\n        setShowConfetti(true);\n      }\n    } catch (error: any) {\n      toast({\n        title: 'Generation Failed',\n        description: error.message,\n        variant: 'destructive',\n      });\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const handleRegenerateResume = async () => {\n    if (!selectedResume || !jobDescription || !optimizedResume) {\n        toast({ title: 'Cannot Regenerate', description: 'Please generate an optimized resume first.', variant: 'destructive' });\n        return;\n    }\n    setIsRegeneratingResume(true);\n    const { data, error } = await generateAtsOptimizedResume({\n        resume: resumeContent,\n        jobDescription,\n        currentOptimizedResume: optimizedResume,\n        currentAtsScore: newAtsScore || undefined,\n    });\n    if (data) {\n        setOptimizedResume(data.optimizedResume);\n        setNewAtsScore(data.atsScore);\n        toast({ title: 'Resume Regenerated!', description: 'The optimized resume has been improved.' });\n    } else {\n        toast({ title: 'Regeneration Failed', description: error, variant: 'destructive' });\n    }\n    setIsRegeneratingResume(false);\n  }\n\n  const handleRegenerateCoverLetter = async () => {\n    if (!selectedResume || !jobDescription || !generatedCoverLetter) {\n        toast({ title: 'Cannot Regenerate', description: 'Please generate a cover letter first.', variant: 'destructive' });\n        return;\n    }\n    setIsRegeneratingLetter(true);\n     const { data, error } = await generateTailoredCoverLetter({\n        resume: resumeContent,\n        jobTitle,\n        company: companyName,\n        jobDescription,\n        tone: toneMapping[toneIndex],\n        currentCoverLetter: generatedCoverLetter,\n    });\n     if (data) {\n        setGeneratedCoverLetter(data.coverLetter);\n        toast({ title: 'Cover Letter Regenerated!', description: 'The cover letter has been improved.' });\n    } else {\n        toast({ title: 'Regeneration Failed', description: error, variant: 'destructive' });\n    }\n    setIsRegeneratingLetter(false);\n  }\n\n  const handleSaveResume = async () => {\n      if (!selectedResume) return;\n      setIsSaving(true);\n      const { error } = await updateResume({\n        ...selectedResume,\n        skills: selectedResume.skills as any,\n        experiences: selectedResume.experiences as any,\n        education: selectedResume.education as any,\n        projects: selectedResume.projects as any,\n      });\n      if (error) {\n        toast({ title: 'Save Failed', description: error, variant: 'destructive' });\n      } else {\n        toast({ title: 'Resume Saved!', description: 'Your changes have been saved.'});\n      }\n      setIsSaving(false);\n  }\n\n  const handleSaveLetter = async () => {\n    if (!selectedResume || !jobTitle || !companyName || !jobDescription || !generatedCoverLetter || !userId) {\n        toast({ title: \"Cannot Save\", description: \"Please generate a cover letter first and ensure all fields are filled.\", variant: \"destructive\" });\n        return;\n    }\n    setIsSaving(true);\n    const { error } = await saveLetter({\n        jobTitle,\n        company: companyName,\n        jobDesc: jobDescription,\n        content: generatedCoverLetter,\n        tone: toneMapping[toneIndex],\n        atsScore: newAtsScore || 0,\n        resumeId: selectedResume.id,\n        userId\n    });\n\n    if (error) {\n        toast({ title: 'Save Failed', description: error, variant: 'destructive' });\n    } else {\n        toast({ title: 'Cover Letter Saved!', description: 'Your new cover letter has been saved.'});\n        setShowConfetti(true);\n        router.push('/dashboard');\n    }\n    setIsSaving(false);\n  }\n\n  const handleAnalyze = async () => {\n    if (!selectedResume) return;\n    setIsAnalyzing(true);\n    setAnalysisResult(null);\n    const { data, error } = await findResumeFlaws({\n      resumeText: resumeContent,\n    });\n    if (data) {\n      setAnalysisResult(data as ResumeFlawSpotterOutput);\n    } else {\n      toast({ title: 'Analysis Failed', description: error, variant: 'destructive' });\n    }\n    setIsAnalyzing(false);\n  };\n  \n    const handleApplySuggestion = (originalText: string, suggestedText: string) => {\n        if (!selectedResume) return;\n        \n        let updated = false;\n        const newResume = { ...selectedResume };\n\n        if (newResume.summary.includes(originalText)) {\n            newResume.summary = newResume.summary.replace(originalText, suggestedText);\n            updated = true;\n        }\n\n        newResume.experiences.forEach((exp, index) => {\n            exp.impact.forEach((imp, i) => {\n                if (imp.includes(originalText.replace(/^- /, ''))) {\n                    newResume.experiences[index].impact[i] = suggestedText.replace(/^- /, '');\n                    updated = true;\n                }\n            })\n        });\n        \n        if (updated) {\n            setSelectedResume(newResume);\n            toast({ title: \"Suggestion Applied\", description: \"The resume has been updated. Saving...\" });\n            handleSaveResume();\n        } else {\n            toast({ title: \"Apply Failed\", description: \"Could not automatically apply the suggestion.\", variant: 'destructive' });\n        }\n    }\n\n\n  const handleRewrite = async () => {\n    if (!selectedResume) return;\n    setIsRewriting(true);\n    setRewriteResult(null);\n    let sectionText = '';\n    \n    const [sectionType, sectionIndex] = sectionToRewrite.split('-');\n    const index = parseInt(sectionIndex);\n\n    if (sectionType === 'summary') {\n        sectionText = selectedResume.summary;\n    } else if (sectionType === 'skills') {\n        sectionText = selectedResume.skills.join(', ');\n    } else if (sectionType === 'experience' && selectedResume.experiences?.[index]) {\n        sectionText = selectedResume.experiences[index].impact.join('\\n');\n    } else if (sectionType === 'project' && selectedResume.projects?.[index]) {\n        sectionText = `${selectedResume.projects[index].description}\\n${selectedResume.projects[index].impact || ''}`;\n    } else if (sectionType === 'education' && selectedResume.education?.[index]) {\n        const edu = selectedResume.education[index];\n        sectionText = `${edu.degree}, ${edu.school} (${edu.year})`;\n    }\n\n    const { data, error } = await generateImpactfulRewrite({\n      resumeSection: sectionType,\n      currentText: sectionText,\n      jobDescription: jobDescription || undefined,\n    });\n\n    if (data) {\n      setRewriteResult(data.rewrittenText);\n    } else {\n      toast({ title: 'Rewrite Failed', description: error, variant: 'destructive' });\n    }\n    setIsRewriting(false);\n  };\n  \n  const handleApplyRewrite = () => {\n    if (!rewriteResult || !selectedResume) return;\n\n    const newResume = { ...selectedResume };\n    const [sectionType, sectionIndex] = sectionToRewrite.split('-');\n    const index = parseInt(sectionIndex);\n\n    if (sectionType === 'summary') {\n        newResume.summary = rewriteResult;\n    } else if (sectionType === 'skills') {\n        newResume.skills = rewriteResult.split(',').map(s => s.trim()).filter(Boolean);\n    } else if (sectionType === 'experience' && newResume.experiences?.[index]) {\n        newResume.experiences[index].impact = rewriteResult.split('\\n').map(s => s.replace(/^- /, ''));\n    } else if (sectionType === 'project' && newResume.projects?.[index]) {\n        const [description, impact] = rewriteResult.split('\\n- Impact: ');\n        newResume.projects[index].description = description ? description.replace(/^\\*/, '').replace(/\\*$/, '').trim() : '';\n        newResume.projects[index].impact = impact ? impact.trim() : undefined;\n    } else if (sectionType === 'education' && newResume.education?.[index]) {\n        const [degree, rest] = rewriteResult.split(', ');\n        if(degree && rest) {\n            const [school, year] = rest.split(' (');\n            newResume.education[index] = {\n                degree,\n                school,\n                year: year ? year.replace(')', '') : '',\n            };\n        }\n    }\n\n    setSelectedResume(newResume);\n    setRewriteResult(null);\n    toast({ title: \"Resume Updated\", description: \"The section has been updated with the rewritten text. Saving...\" });\n    handleSaveResume();\n  }\n\n  const handleAutofill = async () => {\n    if (!jobPostingText) return;\n    setIsAutofilling(true);\n    const { data, error } = await autofillJobDetailsAction({ jobPostingText });\n    if (data) {\n        if(data.jobTitle) setJobTitle(data.jobTitle);\n        if(data.companyName) setCompanyName(data.companyName);\n        if(data.jobDescription) setJobDescription(data.jobDescription);\n        if(data.url) setApplicationUrl(data.url);\n        toast({ title: 'Success', description: 'Job details have been autofilled.'});\n    } else {\n        toast({ title: 'Autofill Failed', description: error, variant: 'destructive' });\n    }\n    setIsAutofilling(false);\n  }\n  \n    const rewriteOptions = useMemo(() => {\n        if (!selectedResume) return [];\n        const options = [{ value: 'summary', label: 'Summary' }];\n        \n        if (selectedResume.skills && selectedResume.skills.length > 0) {\n            options.push({ value: 'skills', label: 'Skills' });\n        }\n        \n        if (selectedResume.experiences && selectedResume.experiences.length > 0) {\n            selectedResume.experiences.forEach((exp, index) => {\n                options.push({ value: `experience-${index}`, label: `Exp: ${exp.role.substring(0, 20)}...` });\n            });\n        }\n        \n        if (selectedResume.projects && selectedResume.projects.length > 0) {\n            selectedResume.projects.forEach((proj, index) => {\n                options.push({ value: `project-${index}`, label: `Proj: ${proj.title.substring(0, 20)}...` });\n            });\n        }\n\n        if (selectedResume.education && selectedResume.education.length > 0) {\n            selectedResume.education.forEach((edu, index) => {\n                options.push({ value: `education-${index}`, label: `Edu: ${edu.degree.substring(0, 20)}...` });\n            });\n        }\n        return options;\n    }, [selectedResume]);\n\n    if (isLoading) {\n        return (\n            <div className=\"flex h-screen w-screen items-center justify-center\">\n                <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n            </div>\n        );\n    }\n    \n    if (!isLoading && resumes.length === 0) {\n        return (\n            <div className=\"flex h-screen w-screen flex-col items-center justify-center gap-4 text-center\">\n                <h2 className=\"text-2xl font-semibold\">No Resumes Found</h2>\n                <p className=\"text-muted-foreground\">You need to create a resume before you can use the editor.</p>\n                <Button onClick={() => router.push('/resumes')}>Go to Resumes Page</Button>\n            </div>\n        )\n    }\n\n  return (\n    <div className=\"min-h-screen w-full bg-background/50\">\n      {showConfetti && <Confetti width={width} height={height} recycle={false} onConfettiComplete={() => setShowConfetti(false)} />}\n      <main className=\"container mx-auto flex flex-col p-4 sm:p-8\">\n        <header className=\"mb-8 flex items-center justify-between\">\n          <Nav />\n        </header>\n\n        <div className=\"grid grid-cols-1 gap-8 lg:grid-cols-2\">\n          {/* Left Column: Job Description and AI Actions */}\n          <div className=\"flex flex-col gap-8\">\n            <Card className=\"animate-fade-in-up\">\n                <CardHeader>\n                    <CardTitle>Autofill Job Details</CardTitle>\n                    <CardDescription>\n                        Paste a job link or the full text of a job posting below and let AI extract the details.\n                    </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                    <Textarea \n                        id=\"job-posting-text\"\n                        placeholder=\"Paste a share link (e.g., from LinkedIn) or the full job posting text here...\"\n                        className=\"min-h-[100px]\"\n                        value={jobPostingText}\n                        onChange={(e) => setJobPostingText(e.target.value)}\n                    />\n                    <Button onClick={handleAutofill} disabled={isAutofilling || !jobPostingText} className=\"w-full\">\n                        {isAutofilling ? <Loader2 className=\"mr-2 animate-spin\" /> : <Wand2 className=\"mr-2\" />}\n                        Autofill from Posting\n                    </Button>\n                </CardContent>\n            </Card>\n\n\n            <Card className=\"flex-1 animate-fade-in-up\" style={{animationDelay: '0.2s'}}>\n              <CardHeader>\n                <CardTitle>Job & Resume Details</CardTitle>\n                <CardDescription>\n                  Provide the job description and select your resume to tailor your documents.\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"job-title\">Job Title</Label>\n                    <Input\n                      id=\"job-title\"\n                      placeholder=\"e.g. Software Engineer\"\n                      value={jobTitle}\n                      onChange={(e) => setJobTitle(e.target.value)}\n                    />\n                  </div>\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"company-name\">Company Name</Label>\n                    <Input\n                      id=\"company-name\"\n                      placeholder=\"e.g. Acme Inc.\"\n                      value={companyName}\n                      onChange={(e) => setCompanyName(e.target.value)}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"resume\">Select Resume</Label>\n                  <Select\n                    value={selectedResume?.id.toString()}\n                    onValueChange={(value) => {\n                      const resume = resumes.find(\n                        (r) => r.id.toString() === value\n                      );\n                      setSelectedResume(resume || null);\n                    }}\n                    disabled={isLoading || resumes.length === 0}\n                  >\n                    <SelectTrigger>\n                      <SelectValue\n                        placeholder={\n                          isLoading ? 'Loading...' : 'Select a resume'\n                        }\n                      />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {resumes.map((resume) => (\n                        <SelectItem\n                          key={resume.id}\n                          value={resume.id.toString()}\n                        >\n                          {resume.title}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                 <div className=\"grid gap-2\">\n                    <Label htmlFor=\"application-url\">Job URL</Label>\n                    <Input\n                      id=\"application-url\"\n                      placeholder=\"https://www.linkedin.com/jobs/view/...\"\n                      value={applicationUrl}\n                      onChange={(e) => setApplicationUrl(e.target.value)}\n                    />\n                  </div>\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"job-description\">Job Description</Label>\n                  <Textarea\n                    id=\"job-description\"\n                    placeholder=\"Paste the job description here...\"\n                    className=\"min-h-[150px] lg:min-h-[200px]\"\n                    value={jobDescription}\n                    onChange={(e) => setJobDescription(e.target.value)}\n                  />\n                </div>\n                <div className=\"grid gap-4\">\n                  <div className=\"grid gap-2\">\n                    <Label>Cover Letter Tone: <span className=\"font-bold text-primary\">{toneMapping[toneIndex]}</span></Label>\n                    <Slider\n                      value={[toneIndex]}\n                      onValueChange={(value) => setToneIndex(value[0])}\n                      min={0}\n                      max={2}\n                      step={1}\n                    />\n                  </div>\n                  <Button\n                    onClick={handleGenerate}\n                    disabled={isGenerating || !selectedResume}\n                    className=\"w-full font-bold\"\n                    size=\"lg\"\n                  >\n                    {isGenerating ? (\n                      <Loader2 className=\"mr-2 animate-spin\" />\n                    ) : (\n                      <Wand2 className=\"mr-2\" />\n                    )}\n                    Generate / Optimize\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"animate-fade-in-up\" style={{animationDelay: '0.3s'}}>\n              <CardHeader>\n                <CardTitle>AI Resume Tools</CardTitle>\n                <CardDescription>\n                  Enhance your resume with AI-powered analysis and rewrites.\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\n                  {/* AI Rewrite */}\n                  <div className=\"space-y-2\">\n                    <Label>Impactful Rewrite</Label>\n                    <Popover open={comboboxOpen} onOpenChange={setComboboxOpen}>\n                        <PopoverTrigger asChild>\n                            <Button\n                            variant=\"outline\"\n                            role=\"combobox\"\n                            aria-expanded={comboboxOpen}\n                            className=\"w-full justify-between\"\n                            disabled={!selectedResume}\n                            >\n                            {sectionToRewrite\n                                ? rewriteOptions.find((opt) => opt.value === sectionToRewrite)?.label\n                                : \"Select a section...\"}\n                            <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                            </Button>\n                        </PopoverTrigger>\n                        <PopoverContent className=\"w-[--radix-popover-trigger-width] p-0\">\n                            <Command>\n                            <CommandInput placeholder=\"Search section...\" />\n                            <CommandList>\n                                <CommandEmpty>No section found.</CommandEmpty>\n                                <CommandGroup>\n                                {rewriteOptions.map((opt) => (\n                                    <CommandItem\n                                    key={opt.value}\n                                    value={opt.value}\n                                    onSelect={(currentValue) => {\n                                        setSectionToRewrite(currentValue === sectionToRewrite ? \"\" : currentValue)\n                                        setComboboxOpen(false)\n                                    }}\n                                    >\n                                    <Check\n                                        className={cn(\n                                        \"mr-2 h-4 w-4\",\n                                        sectionToRewrite === opt.value ? \"opacity-100\" : \"opacity-0\"\n                                        )}\n                                    />\n                                    {opt.label}\n                                    </CommandItem>\n                                ))}\n                                </CommandGroup>\n                            </CommandList>\n                            </Command>\n                        </PopoverContent>\n                    </Popover>\n                    <Button\n                      onClick={handleRewrite}\n                      disabled={isRewriting || !selectedResume || !sectionToRewrite}\n                      className=\"w-full\"\n                      variant=\"secondary\"\n                    >\n                      {isRewriting ? (\n                        <Loader2 className=\"mr-2 animate-spin\" />\n                      ) : (\n                        <Sparkles className=\"mr-2\" />\n                      )}\n                      Rewrite Section\n                    </Button>\n                  </div>\n\n                  {/* Resume Flaw Spotter */}\n                  <div className=\"space-y-2 flex flex-col\">\n                    <Label>Resume Flaw Analysis</Label>\n                     <Button\n                      onClick={handleAnalyze}\n                      disabled={isAnalyzing || !selectedResume}\n                      className=\"w-full mt-auto\"\n                      variant=\"secondary\"\n                    >\n                      {isAnalyzing ? (\n                        <Loader2 className=\"mr-2 animate-spin\" />\n                      ) : (\n                        <Sparkles className=\"mr-2\" />\n                      )}\n                      Analyze for Flaws\n                    </Button>\n                  </div>\n                </div>\n\n                {rewriteResult && (\n                    <div className=\"space-y-2 rounded-md border p-4\">\n                        <Label>AI Suggestion:</Label>\n                        <Textarea readOnly value={rewriteResult} className=\"min-h-[100px] bg-muted\" />\n                        <Button onClick={handleApplyRewrite} className=\"w-full\">Apply Rewrite & Save</Button>\n                    </div>\n                )}\n\n                {analysisResult && (\n                      <div className=\"space-y-4 rounded-md border p-4 text-sm\">\n                        <h4 className=\"font-semibold\">AI Feedback:</h4>\n                        <p className=\"text-muted-foreground italic\">\n                          \"{analysisResult.overallFeedback}\"\n                        </p>\n                        <h4 className=\"font-semibold\">Suggestions:</h4>\n                        <div className=\"space-y-3 max-h-60 overflow-y-auto pr-2\">\n                        {analysisResult.suggestions.map((suggestion, index) => (\n                            <div key={index} className=\"p-3 bg-muted/50 rounded-md\">\n                                <p className=\"text-destructive line-through\">{suggestion.originalText}</p>\n                                <p className=\"text-green-600\">{suggestion.suggestionText}</p>\n                                <div className=\"flex items-center justify-between mt-2\">\n                                    <p className=\"text-xs text-muted-foreground\">{suggestion.comment}</p>\n                                    <Button size=\"sm\" variant=\"outline\" onClick={() => handleApplySuggestion(suggestion.originalText, suggestion.suggestionText)}>Apply & Save</Button>\n                                </div>\n                            </div>\n                        ))}\n                        </div>\n                      </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right Column: Resume and Cover Letter */}\n          <div className=\"space-y-8\">\n            <Card className=\"animate-fade-in-up\" style={{animationDelay: '0.1s'}}>\n              <CardHeader className=\"flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between\">\n                <div>\n                    <CardTitle>Original Resume</CardTitle>\n                    <CardDescription>\n                    Your base resume. Select from the dropdown on the left.\n                    </CardDescription>\n                </div>\n                <Button onClick={handleSaveResume} disabled={isSaving || !selectedResume}>\n                    {isSaving ? <Loader2 className=\"mr-2 animate-spin\"/> : <Save className=\"mr-2\"/>}\n                    Save Resume\n                </Button>\n              </CardHeader>\n              <CardContent>\n                <Textarea\n                  className=\"min-h-[250px] text-xs\"\n                  placeholder=\"Your resume content will appear here...\"\n                  value={isLoading ? 'Loading resume...' : resumeContent}\n                  readOnly\n                />\n              </CardContent>\n            </Card>\n            <Card className=\"animate-fade-in-up\" style={{animationDelay: '0.4s'}}>\n              <CardHeader>\n                <div className=\"flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between\">\n                  <div>\n                    <CardTitle>Optimized Resume</CardTitle>\n                    <CardDescription>\n                      This version is optimized for the job description.\n                    </CardDescription>\n                  </div>\n                  <div className='flex items-center gap-2'>\n                    {newAtsScore !== null && (\n                      <span className=\"text-lg font-bold text-primary\">\n                        ATS Score: {newAtsScore}\n                      </span>\n                    )}\n                    <Button variant=\"outline\" size=\"sm\" onClick={handleRegenerateResume} disabled={isRegeneratingResume || !optimizedResume}>\n                        {isRegeneratingResume ? <Loader2 className=\"mr-2 animate-spin\" /> : <Sparkles className=\"mr-2\"/>}\n                        Regenerate\n                    </Button>\n                    <DownloadButton content={optimizedResume} fileName=\"optimized-resume\" />\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <Textarea\n                  className=\"min-h-[250px] text-xs\"\n                  value={isGenerating && !optimizedResume ? \"Generating...\" : optimizedResume}\n                  readOnly\n                />\n              </CardContent>\n            </Card>\n            <Card className=\"animate-fade-in-up\" style={{animationDelay: '0.5s'}}>\n              <CardHeader>\n                <div className='flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between'>\n                    <div>\n                      <CardTitle>Generated Cover Letter</CardTitle>\n                      <CardDescription>\n                          A tailored cover letter will be generated here.\n                      </CardDescription>\n                    </div>\n                  <div className=\"flex gap-2\">\n                     <Button variant=\"outline\" size=\"sm\" onClick={handleRegenerateCoverLetter} disabled={isRegeneratingLetter || !generatedCoverLetter}>\n                      {isRegeneratingLetter ? <Loader2 className=\"mr-2 animate-spin\" /> : <Sparkles className=\"mr-2\"/>}\n                      Regenerate\n                    </Button>\n                    <Button variant=\"secondary\" onClick={handleSaveLetter} disabled={isSaving || !generatedCoverLetter}>\n                        {isSaving ? <Loader2 className=\"mr-2 animate-spin\"/> : <Save className=\"mr-2\"/>}\n                        Save Letter\n                    </Button>\n                    <DownloadButton content={generatedCoverLetter} fileName=\"cover-letter\" />\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <Textarea\n                  className=\"min-h-[300px] text-xs\"\n                  value={isGenerating && !generatedCoverLetter ? \"Generating...\" : generatedCoverLetter}\n                  readOnly\n                />\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}